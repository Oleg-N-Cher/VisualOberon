MODULE [foreign] Windows (* INTERFACE "Pascal";
      LINK LIB "kernel32"; LIB "user32"; LIB "gdi32" END*);

IMPORT SYSTEM;

    (* Generated by H2O using "OOC" back-end *)


    (* H2O: Constants occuring in macros *)

CONST
    _MSC_VER* = 000000320H;
    _M_IX86* = 00000012CH;
    _WIN32_WINNT* = 000000400H;
    __STDC__* = 000000001H;
    WINVER* = 000000400H;
    EXCEPTION_EXECUTE_HANDLER* = 000000001H;
    EXCEPTION_CONTINUE_SEARCH* = 000000000H;
    EXCEPTION_CONTINUE_EXECUTION* = 0FFFFFFFFH;
    MAX_PATH* = 000000104H;
    NULL* = 000000000H;
    FALSE* = 000000000H;
    TRUE* = 000000001H;
    WEOF* = 00000FFFFH;
    _UPPER* = 000000001H;
    _LOWER* = 000000002H;
    _DIGIT* = 000000004H;
    _SPACE* = 000000008H;
    _PUNCT* = 000000010H;
    _CONTROL* = 000000020H;
    _BLANK* = 000000040H;
    _HEX* = 000000080H;
    _LEADBYTE* = 000008000H;
    _ALPHA* = 000000103H;
    ANYSIZE_ARRAY* = 000000001H;
    MAX_NATURAL_ALIGNMENT* = 000000004H;
    MAXINT_PTR* = 07FFFFFFFH;
    MININT_PTR* = 080000000H;
    MAXUHALF_PTR* = 00000FFFFH;
    MAXHALF_PTR* = 000007FFFH;
    MINHALF_PTR* = 000008000H;
    APPLICATION_ERROR_MASK* = 020000000H;
    ERROR_SEVERITY_SUCCESS* = 000000000H;
    ERROR_SEVERITY_INFORMATIONAL* = 040000000H;
    ERROR_SEVERITY_WARNING* = 080000000H;
    ERROR_SEVERITY_ERROR* = 0C0000000H;
    ANSI_NULL* = 000000000H;
    UNICODE_NULL* = 000000000H;
    MINCHAR* = 000000080H;
    MAXCHAR* = 00000007FH;
    MINSHORT* = 000008000H;
    MAXSHORT* = 000007FFFH;
    MINLONG* = 080000000H;
    MAXLONG* = 07FFFFFFFH;
    MAXBYTE* = 0000000FFH;
    MAXWORD* = 00000FFFFH;
    MAXDWORD* = 0FFFFFFFFH;
    LANG_NEUTRAL* = 000000000H;
    LANG_AFRIKAANS* = 000000036H;
    LANG_ALBANIAN* = 00000001CH;
    LANG_ARABIC* = 000000001H;
    LANG_ARMENIAN* = 00000002BH;
    LANG_ASSAMESE* = 00000004DH;
    LANG_AZERI* = 00000002CH;
    LANG_BASQUE* = 00000002DH;
    LANG_BELARUSIAN* = 000000023H;
    LANG_BENGALI* = 000000045H;
    LANG_BULGARIAN* = 000000002H;
    LANG_CATALAN* = 000000003H;
    LANG_CHINESE* = 000000004H;
    LANG_CROATIAN* = 00000001AH;
    LANG_CZECH* = 000000005H;
    LANG_DANISH* = 000000006H;
    LANG_DUTCH* = 000000013H;
    LANG_ENGLISH* = 000000009H;
    LANG_ESTONIAN* = 000000025H;
    LANG_FAEROESE* = 000000038H;
    LANG_FARSI* = 000000029H;
    LANG_FINNISH* = 00000000BH;
    LANG_FRENCH* = 00000000CH;
    LANG_GEORGIAN* = 000000037H;
    LANG_GERMAN* = 000000007H;
    LANG_GREEK* = 000000008H;
    LANG_GUJARATI* = 000000047H;
    LANG_HEBREW* = 00000000DH;
    LANG_HINDI* = 000000039H;
    LANG_HUNGARIAN* = 00000000EH;
    LANG_ICELANDIC* = 00000000FH;
    LANG_INDONESIAN* = 000000021H;
    LANG_ITALIAN* = 000000010H;
    LANG_JAPANESE* = 000000011H;
    LANG_KANNADA* = 00000004BH;
    LANG_KASHMIRI* = 000000060H;
    LANG_KAZAK* = 00000003FH;
    LANG_KONKANI* = 000000057H;
    LANG_KOREAN* = 000000012H;
    LANG_LATVIAN* = 000000026H;
    LANG_LITHUANIAN* = 000000027H;
    LANG_MACEDONIAN* = 00000002FH;
    LANG_MALAY* = 00000003EH;
    LANG_MALAYALAM* = 00000004CH;
    LANG_MANIPURI* = 000000058H;
    LANG_MARATHI* = 00000004EH;
    LANG_NEPALI* = 000000061H;
    LANG_NORWEGIAN* = 000000014H;
    LANG_ORIYA* = 000000048H;
    LANG_POLISH* = 000000015H;
    LANG_PORTUGUESE* = 000000016H;
    LANG_PUNJABI* = 000000046H;
    LANG_ROMANIAN* = 000000018H;
    LANG_RUSSIAN* = 000000019H;
    LANG_SANSKRIT* = 00000004FH;
    LANG_SERBIAN* = 00000001AH;
    LANG_SINDHI* = 000000059H;
    LANG_SLOVAK* = 00000001BH;
    LANG_SLOVENIAN* = 000000024H;
    LANG_SPANISH* = 00000000AH;
    LANG_SWAHILI* = 000000041H;
    LANG_SWEDISH* = 00000001DH;
    LANG_TAMIL* = 000000049H;
    LANG_TATAR* = 000000044H;
    LANG_TELUGU* = 00000004AH;
    LANG_THAI* = 00000001EH;
    LANG_TURKISH* = 00000001FH;
    LANG_UKRAINIAN* = 000000022H;
    LANG_URDU* = 000000020H;
    LANG_UZBEK* = 000000043H;
    LANG_VIETNAMESE* = 00000002AH;
    SUBLANG_NEUTRAL* = 000000000H;
    SUBLANG_DEFAULT* = 000000001H;
    SUBLANG_SYS_DEFAULT* = 000000002H;
    SUBLANG_ARABIC_SAUDI_ARABIA* = 000000001H;
    SUBLANG_ARABIC_IRAQ* = 000000002H;
    SUBLANG_ARABIC_EGYPT* = 000000003H;
    SUBLANG_ARABIC_LIBYA* = 000000004H;
    SUBLANG_ARABIC_ALGERIA* = 000000005H;
    SUBLANG_ARABIC_MOROCCO* = 000000006H;
    SUBLANG_ARABIC_TUNISIA* = 000000007H;
    SUBLANG_ARABIC_OMAN* = 000000008H;
    SUBLANG_ARABIC_YEMEN* = 000000009H;
    SUBLANG_ARABIC_SYRIA* = 00000000AH;
    SUBLANG_ARABIC_JORDAN* = 00000000BH;
    SUBLANG_ARABIC_LEBANON* = 00000000CH;
    SUBLANG_ARABIC_KUWAIT* = 00000000DH;
    SUBLANG_ARABIC_UAE* = 00000000EH;
    SUBLANG_ARABIC_BAHRAIN* = 00000000FH;
    SUBLANG_ARABIC_QATAR* = 000000010H;
    SUBLANG_AZERI_LATIN* = 000000001H;
    SUBLANG_AZERI_CYRILLIC* = 000000002H;
    SUBLANG_CHINESE_TRADITIONAL* = 000000001H;
    SUBLANG_CHINESE_SIMPLIFIED* = 000000002H;
    SUBLANG_CHINESE_HONGKONG* = 000000003H;
    SUBLANG_CHINESE_SINGAPORE* = 000000004H;
    SUBLANG_CHINESE_MACAU* = 000000005H;
    SUBLANG_DUTCH* = 000000001H;
    SUBLANG_DUTCH_BELGIAN* = 000000002H;
    SUBLANG_ENGLISH_US* = 000000001H;
    SUBLANG_ENGLISH_UK* = 000000002H;
    SUBLANG_ENGLISH_AUS* = 000000003H;
    SUBLANG_ENGLISH_CAN* = 000000004H;
    SUBLANG_ENGLISH_NZ* = 000000005H;
    SUBLANG_ENGLISH_EIRE* = 000000006H;
    SUBLANG_ENGLISH_SOUTH_AFRICA* = 000000007H;
    SUBLANG_ENGLISH_JAMAICA* = 000000008H;
    SUBLANG_ENGLISH_CARIBBEAN* = 000000009H;
    SUBLANG_ENGLISH_BELIZE* = 00000000AH;
    SUBLANG_ENGLISH_TRINIDAD* = 00000000BH;
    SUBLANG_ENGLISH_ZIMBABWE* = 00000000CH;
    SUBLANG_ENGLISH_PHILIPPINES* = 00000000DH;
    SUBLANG_FRENCH* = 000000001H;
    SUBLANG_FRENCH_BELGIAN* = 000000002H;
    SUBLANG_FRENCH_CANADIAN* = 000000003H;
    SUBLANG_FRENCH_SWISS* = 000000004H;
    SUBLANG_FRENCH_LUXEMBOURG* = 000000005H;
    SUBLANG_FRENCH_MONACO* = 000000006H;
    SUBLANG_GERMAN* = 000000001H;
    SUBLANG_GERMAN_SWISS* = 000000002H;
    SUBLANG_GERMAN_AUSTRIAN* = 000000003H;
    SUBLANG_GERMAN_LUXEMBOURG* = 000000004H;
    SUBLANG_GERMAN_LIECHTENSTEIN* = 000000005H;
    SUBLANG_ITALIAN* = 000000001H;
    SUBLANG_ITALIAN_SWISS* = 000000002H;
    SUBLANG_KASHMIRI_INDIA* = 000000002H;
    SUBLANG_KOREAN* = 000000001H;
    SUBLANG_LITHUANIAN* = 000000001H;
    SUBLANG_LITHUANIAN_CLASSIC* = 000000002H;
    SUBLANG_MALAY_MALAYSIA* = 000000001H;
    SUBLANG_MALAY_BRUNEI_DARUSSALAM* = 000000002H;
    SUBLANG_NEPALI_INDIA* = 000000002H;
    SUBLANG_NORWEGIAN_BOKMAL* = 000000001H;
    SUBLANG_NORWEGIAN_NYNORSK* = 000000002H;
    SUBLANG_PORTUGUESE* = 000000002H;
    SUBLANG_PORTUGUESE_BRAZILIAN* = 000000001H;
    SUBLANG_SERBIAN_LATIN* = 000000002H;
    SUBLANG_SERBIAN_CYRILLIC* = 000000003H;
    SUBLANG_SPANISH* = 000000001H;
    SUBLANG_SPANISH_MEXICAN* = 000000002H;
    SUBLANG_SPANISH_MODERN* = 000000003H;
    SUBLANG_SPANISH_GUATEMALA* = 000000004H;
    SUBLANG_SPANISH_COSTA_RICA* = 000000005H;
    SUBLANG_SPANISH_PANAMA* = 000000006H;
    SUBLANG_SPANISH_DOMINICAN_REPUBLIC* = 000000007H;
    SUBLANG_SPANISH_VENEZUELA* = 000000008H;
    SUBLANG_SPANISH_COLOMBIA* = 000000009H;
    SUBLANG_SPANISH_PERU* = 00000000AH;
    SUBLANG_SPANISH_ARGENTINA* = 00000000BH;
    SUBLANG_SPANISH_ECUADOR* = 00000000CH;
    SUBLANG_SPANISH_CHILE* = 00000000DH;
    SUBLANG_SPANISH_URUGUAY* = 00000000EH;
    SUBLANG_SPANISH_PARAGUAY* = 00000000FH;
    SUBLANG_SPANISH_BOLIVIA* = 000000010H;
    SUBLANG_SPANISH_EL_SALVADOR* = 000000011H;
    SUBLANG_SPANISH_HONDURAS* = 000000012H;
    SUBLANG_SPANISH_NICARAGUA* = 000000013H;
    SUBLANG_SPANISH_PUERTO_RICO* = 000000014H;
    SUBLANG_SWEDISH* = 000000001H;
    SUBLANG_SWEDISH_FINLAND* = 000000002H;
    SUBLANG_URDU_PAKISTAN* = 000000001H;
    SUBLANG_URDU_INDIA* = 000000002H;
    SUBLANG_UZBEK_LATIN* = 000000001H;
    SUBLANG_UZBEK_CYRILLIC* = 000000002H;
    SORT_DEFAULT* = 000000000H;
    SORT_JAPANESE_XJIS* = 000000000H;
    SORT_JAPANESE_UNICODE* = 000000001H;
    SORT_CHINESE_BIG5* = 000000000H;
    SORT_CHINESE_PRCP* = 000000000H;
    SORT_CHINESE_UNICODE* = 000000001H;
    SORT_CHINESE_PRC* = 000000002H;
    SORT_CHINESE_BOPOMOFO* = 000000003H;
    SORT_KOREAN_KSC* = 000000000H;
    SORT_KOREAN_UNICODE* = 000000001H;
    SORT_GERMAN_PHONE_BOOK* = 000000001H;
    SORT_HUNGARIAN_DEFAULT* = 000000000H;
    SORT_HUNGARIAN_TECHNICAL* = 000000001H;
    SORT_GEORGIAN_TRADITIONAL* = 000000000H;
    SORT_GEORGIAN_MODERN* = 000000001H;
    NLS_VALID_LOCALE_MASK* = 0000FFFFFH;
    LANG_SYSTEM_DEFAULT* = 000000800H;
    LANG_USER_DEFAULT* = 000000400H;
    LOCALE_SYSTEM_DEFAULT* = 000000800H;
    LOCALE_USER_DEFAULT* = 000000400H;
    LOCALE_NEUTRAL* = 000000000H;
    STATUS_WAIT_0* = 000000000H;
    STATUS_ABANDONED_WAIT_0* = 000000080H;
    STATUS_USER_APC* = 0000000C0H;
    STATUS_TIMEOUT* = 000000102H;
    STATUS_PENDING* = 000000103H;
    STATUS_SEGMENT_NOTIFICATION* = 040000005H;
    STATUS_GUARD_PAGE_VIOLATION* = 080000001H;
    STATUS_DATATYPE_MISALIGNMENT* = 080000002H;
    STATUS_BREAKPOINT* = 080000003H;
    STATUS_SINGLE_STEP* = 080000004H;
    STATUS_ACCESS_VIOLATION* = 0C0000005H;
    STATUS_IN_PAGE_ERROR* = 0C0000006H;
    STATUS_INVALID_HANDLE* = 0C0000008H;
    STATUS_NO_MEMORY* = 0C0000017H;
    STATUS_ILLEGAL_INSTRUCTION* = 0C000001DH;
    STATUS_NONCONTINUABLE_EXCEPTION* = 0C0000025H;
    STATUS_INVALID_DISPOSITION* = 0C0000026H;
    STATUS_ARRAY_BOUNDS_EXCEEDED* = 0C000008CH;
    STATUS_FLOAT_DENORMAL_OPERAND* = 0C000008DH;
    STATUS_FLOAT_DIVIDE_BY_ZERO* = 0C000008EH;
    STATUS_FLOAT_INEXACT_RESULT* = 0C000008FH;
    STATUS_FLOAT_INVALID_OPERATION* = 0C0000090H;
    STATUS_FLOAT_OVERFLOW* = 0C0000091H;
    STATUS_FLOAT_STACK_CHECK* = 0C0000092H;
    STATUS_FLOAT_UNDERFLOW* = 0C0000093H;
    STATUS_INTEGER_DIVIDE_BY_ZERO* = 0C0000094H;
    STATUS_INTEGER_OVERFLOW* = 0C0000095H;
    STATUS_PRIVILEGED_INSTRUCTION* = 0C0000096H;
    STATUS_STACK_OVERFLOW* = 0C00000FDH;
    STATUS_CONTROL_C_EXIT* = 0C000013AH;
    STATUS_FLOAT_MULTIPLE_FAULTS* = 0C00002B4H;
    STATUS_FLOAT_MULTIPLE_TRAPS* = 0C00002B5H;
    STATUS_ILLEGAL_VLM_REFERENCE* = 0C00002C0H;
    MAXIMUM_WAIT_OBJECTS* = 000000040H;
    MAXIMUM_SUSPEND_COUNT* = 00000007FH;
    SIZE_OF_80387_REGISTERS* = 000000050H;
    CONTEXT_i386* = 000010000H;
    CONTEXT_i486* = 000010000H;
    CONTEXT_CONTROL* = 000010001H;
    CONTEXT_INTEGER* = 000010002H;
    CONTEXT_SEGMENTS* = 000010004H;
    CONTEXT_FLOATING_POINT* = 000010008H;
    CONTEXT_DEBUG_REGISTERS* = 000010010H;
    CONTEXT_EXTENDED_REGISTERS* = 000010020H;
    CONTEXT_FULL* = 000010007H;
    MAXIMUM_SUPPORTED_EXTENSION* = 000000200H;
    EXCEPTION_NONCONTINUABLE* = 000000001H;
    EXCEPTION_MAXIMUM_PARAMETERS* = 00000000FH;
    DELETE* = 000010000H;
    READ_CONTROL* = 000020000H;
    WRITE_DAC* = 000040000H;
    WRITE_OWNER* = 000080000H;
    SYNCHRONIZE* = 000100000H;
    STANDARD_RIGHTS_REQUIRED* = 0000F0000H;
    STANDARD_RIGHTS_READ* = 000020000H;
    STANDARD_RIGHTS_WRITE* = 000020000H;
    STANDARD_RIGHTS_EXECUTE* = 000020000H;
    STANDARD_RIGHTS_ALL* = 0001F0000H;
    SPECIFIC_RIGHTS_ALL* = 00000FFFFH;
    ACCESS_SYSTEM_SECURITY* = 001000000H;
    MAXIMUM_ALLOWED* = 002000000H;
    GENERIC_READ* = 080000000H;
    GENERIC_WRITE* = 040000000H;
    GENERIC_EXECUTE* = 020000000H;
    GENERIC_ALL* = 010000000H;
    SID_REVISION* = 000000001H;
    SID_MAX_SUB_AUTHORITIES* = 00000000FH;
    SID_RECOMMENDED_SUB_AUTHORITIES* = 000000001H;
    SECURITY_NULL_RID* = 000000000H;
    SECURITY_WORLD_RID* = 000000000H;
    SECURITY_LOCAL_RID* = 000000000H;
    SECURITY_CREATOR_OWNER_RID* = 000000000H;
    SECURITY_CREATOR_GROUP_RID* = 000000001H;
    SECURITY_CREATOR_OWNER_SERVER_RID* = 000000002H;
    SECURITY_CREATOR_GROUP_SERVER_RID* = 000000003H;
    SECURITY_DIALUP_RID* = 000000001H;
    SECURITY_NETWORK_RID* = 000000002H;
    SECURITY_BATCH_RID* = 000000003H;
    SECURITY_INTERACTIVE_RID* = 000000004H;
    SECURITY_SERVICE_RID* = 000000006H;
    SECURITY_ANONYMOUS_LOGON_RID* = 000000007H;
    SECURITY_PROXY_RID* = 000000008H;
    SECURITY_ENTERPRISE_CONTROLLERS_RID* = 000000009H;
    SECURITY_SERVER_LOGON_RID* = 000000009H;
    SECURITY_PRINCIPAL_SELF_RID* = 00000000AH;
    SECURITY_AUTHENTICATED_USER_RID* = 00000000BH;
    SECURITY_RESTRICTED_CODE_RID* = 00000000CH;
    SECURITY_LOGON_IDS_RID* = 000000005H;
    SECURITY_LOGON_IDS_RID_COUNT* = 000000003H;
    SECURITY_LOCAL_SYSTEM_RID* = 000000012H;
    SECURITY_NT_NON_UNIQUE* = 000000015H;
    SECURITY_BUILTIN_DOMAIN_RID* = 000000020H;
    DOMAIN_USER_RID_ADMIN* = 0000001F4H;
    DOMAIN_USER_RID_GUEST* = 0000001F5H;
    DOMAIN_USER_RID_KRBTGT* = 0000001F6H;
    DOMAIN_GROUP_RID_ADMINS* = 000000200H;
    DOMAIN_GROUP_RID_USERS* = 000000201H;
    DOMAIN_GROUP_RID_GUESTS* = 000000202H;
    DOMAIN_GROUP_RID_COMPUTERS* = 000000203H;
    DOMAIN_GROUP_RID_CONTROLLERS* = 000000204H;
    DOMAIN_GROUP_RID_CERT_ADMINS* = 000000205H;
    DOMAIN_GROUP_RID_SCHEMA_ADMINS* = 000000206H;
    DOMAIN_ALIAS_RID_ADMINS* = 000000220H;
    DOMAIN_ALIAS_RID_USERS* = 000000221H;
    DOMAIN_ALIAS_RID_GUESTS* = 000000222H;
    DOMAIN_ALIAS_RID_POWER_USERS* = 000000223H;
    DOMAIN_ALIAS_RID_ACCOUNT_OPS* = 000000224H;
    DOMAIN_ALIAS_RID_SYSTEM_OPS* = 000000225H;
    DOMAIN_ALIAS_RID_PRINT_OPS* = 000000226H;
    DOMAIN_ALIAS_RID_BACKUP_OPS* = 000000227H;
    DOMAIN_ALIAS_RID_REPLICATOR* = 000000228H;
    SE_GROUP_MANDATORY* = 000000001H;
    SE_GROUP_ENABLED_BY_DEFAULT* = 000000002H;
    SE_GROUP_ENABLED* = 000000004H;
    SE_GROUP_OWNER* = 000000008H;
    SE_GROUP_USE_FOR_DENY_ONLY* = 000000010H;
    SE_GROUP_LOGON_ID* = 0C0000000H;
    ACL_REVISION* = 000000002H;
    ACL_REVISION_DS* = 000000004H;
    ACL_REVISION1* = 000000001H;
    MIN_ACL_REVISION* = 000000002H;
    ACL_REVISION2* = 000000002H;
    ACL_REVISION3* = 000000003H;
    ACL_REVISION4* = 000000004H;
    MAX_ACL_REVISION* = 000000004H;
    ACCESS_MIN_MS_ACE_TYPE* = 000000000H;
    ACCESS_ALLOWED_ACE_TYPE* = 000000000H;
    ACCESS_DENIED_ACE_TYPE* = 000000001H;
    SYSTEM_AUDIT_ACE_TYPE* = 000000002H;
    SYSTEM_ALARM_ACE_TYPE* = 000000003H;
    ACCESS_MAX_MS_V2_ACE_TYPE* = 000000003H;
    ACCESS_ALLOWED_COMPOUND_ACE_TYPE* = 000000004H;
    ACCESS_MAX_MS_V3_ACE_TYPE* = 000000004H;
    ACCESS_MIN_MS_OBJECT_ACE_TYPE* = 000000005H;
    ACCESS_ALLOWED_OBJECT_ACE_TYPE* = 000000005H;
    ACCESS_DENIED_OBJECT_ACE_TYPE* = 000000006H;
    SYSTEM_AUDIT_OBJECT_ACE_TYPE* = 000000007H;
    SYSTEM_ALARM_OBJECT_ACE_TYPE* = 000000008H;
    ACCESS_MAX_MS_OBJECT_ACE_TYPE* = 000000008H;
    ACCESS_MAX_MS_V4_ACE_TYPE* = 000000008H;
    ACCESS_MAX_MS_ACE_TYPE* = 000000008H;
    OBJECT_INHERIT_ACE* = 000000001H;
    CONTAINER_INHERIT_ACE* = 000000002H;
    NO_PROPAGATE_INHERIT_ACE* = 000000004H;
    INHERIT_ONLY_ACE* = 000000008H;
    INHERITED_ACE* = 000000010H;
    VALID_INHERIT_FLAGS* = 00000001FH;
    SUCCESSFUL_ACCESS_ACE_FLAG* = 000000040H;
    FAILED_ACCESS_ACE_FLAG* = 000000080H;
    ACE_OBJECT_TYPE_PRESENT* = 000000001H;
    ACE_INHERITED_OBJECT_TYPE_PRESENT* = 000000002H;
    SECURITY_DESCRIPTOR_REVISION* = 000000001H;
    SECURITY_DESCRIPTOR_REVISION1* = 000000001H;
    SE_OWNER_DEFAULTED* = 000000001H;
    SE_GROUP_DEFAULTED* = 000000002H;
    SE_DACL_PRESENT* = 000000004H;
    SE_DACL_DEFAULTED* = 000000008H;
    SE_SACL_PRESENT* = 000000010H;
    SE_SACL_DEFAULTED* = 000000020H;
    SE_DACL_AUTO_INHERIT_REQ* = 000000100H;
    SE_SACL_AUTO_INHERIT_REQ* = 000000200H;
    SE_DACL_AUTO_INHERITED* = 000000400H;
    SE_SACL_AUTO_INHERITED* = 000000800H;
    SE_DACL_PROTECTED* = 000001000H;
    SE_SACL_PROTECTED* = 000002000H;
    SE_SELF_RELATIVE* = 000008000H;
    ACCESS_OBJECT_GUID* = 000000000H;
    ACCESS_PROPERTY_SET_GUID* = 000000001H;
    ACCESS_PROPERTY_GUID* = 000000002H;
    ACCESS_MAX_LEVEL* = 000000004H;
    AUDIT_ALLOW_NO_PRIVILEGE* = 000000001H;
    SE_PRIVILEGE_ENABLED_BY_DEFAULT* = 000000001H;
    SE_PRIVILEGE_ENABLED* = 000000002H;
    SE_PRIVILEGE_USED_FOR_ACCESS* = 080000000H;
    PRIVILEGE_SET_ALL_NECESSARY* = 000000001H;
    SECURITY_MAX_IMPERSONATION_LEVEL* = 000000003H;
    DEFAULT_IMPERSONATION_LEVEL* = 000000002H;
    TOKEN_ASSIGN_PRIMARY* = 000000001H;
    TOKEN_DUPLICATE* = 000000002H;
    TOKEN_IMPERSONATE* = 000000004H;
    TOKEN_QUERY* = 000000008H;
    TOKEN_QUERY_SOURCE* = 000000010H;
    TOKEN_ADJUST_PRIVILEGES* = 000000020H;
    TOKEN_ADJUST_GROUPS* = 000000040H;
    TOKEN_ADJUST_DEFAULT* = 000000080H;
    TOKEN_ADJUST_SESSIONID* = 000000100H;
    TOKEN_ALL_ACCESS* = 0000F01FFH;
    TOKEN_READ* = 000020008H;
    TOKEN_WRITE* = 0000200E0H;
    TOKEN_EXECUTE* = 000020000H;
    TOKEN_SOURCE_LENGTH* = 000000008H;
    SECURITY_DYNAMIC_TRACKING* = 000000001H;
    SECURITY_STATIC_TRACKING* = 000000000H;
    OWNER_SECURITY_INFORMATION* = 000000001H;
    GROUP_SECURITY_INFORMATION* = 000000002H;
    DACL_SECURITY_INFORMATION* = 000000004H;
    SACL_SECURITY_INFORMATION* = 000000008H;
    PROCESS_TERMINATE* = 000000001H;
    PROCESS_CREATE_THREAD* = 000000002H;
    PROCESS_SET_SESSIONID* = 000000004H;
    PROCESS_VM_OPERATION* = 000000008H;
    PROCESS_VM_READ* = 000000010H;
    PROCESS_VM_WRITE* = 000000020H;
    PROCESS_DUP_HANDLE* = 000000040H;
    PROCESS_CREATE_PROCESS* = 000000080H;
    PROCESS_SET_QUOTA* = 000000100H;
    PROCESS_SET_INFORMATION* = 000000200H;
    PROCESS_QUERY_INFORMATION* = 000000400H;
    PROCESS_ALL_ACCESS* = 0001F0FFFH;
    MAXIMUM_PROCESSORS* = 000000020H;
    THREAD_TERMINATE* = 000000001H;
    THREAD_SUSPEND_RESUME* = 000000002H;
    THREAD_GET_CONTEXT* = 000000008H;
    THREAD_SET_CONTEXT* = 000000010H;
    THREAD_SET_INFORMATION* = 000000020H;
    THREAD_QUERY_INFORMATION* = 000000040H;
    THREAD_SET_THREAD_TOKEN* = 000000080H;
    THREAD_IMPERSONATE* = 000000100H;
    THREAD_DIRECT_IMPERSONATION* = 000000200H;
    THREAD_ALL_ACCESS* = 0001F03FFH;
    JOB_OBJECT_ASSIGN_PROCESS* = 000000001H;
    JOB_OBJECT_SET_ATTRIBUTES* = 000000002H;
    JOB_OBJECT_QUERY* = 000000004H;
    JOB_OBJECT_TERMINATE* = 000000008H;
    JOB_OBJECT_SET_SECURITY_ATTRIBUTES* = 000000010H;
    JOB_OBJECT_ALL_ACCESS* = 0001F001FH;
    TLS_MINIMUM_AVAILABLE* = 000000040H;
    THREAD_BASE_PRIORITY_LOWRT* = 00000000FH;
    THREAD_BASE_PRIORITY_MAX* = 000000002H;
    THREAD_BASE_PRIORITY_MIN* = 0FFFFFFFEH;
    THREAD_BASE_PRIORITY_IDLE* = 0FFFFFFF1H;
    JOB_OBJECT_TERMINATE_AT_END_OF_JOB* = 000000000H;
    JOB_OBJECT_POST_AT_END_OF_JOB* = 000000001H;
    JOB_OBJECT_MSG_END_OF_JOB_TIME* = 000000001H;
    JOB_OBJECT_MSG_END_OF_PROCESS_TIME* = 000000002H;
    JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT* = 000000003H;
    JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO* = 000000004H;
    JOB_OBJECT_LIMIT_WORKINGSET* = 000000001H;
    JOB_OBJECT_LIMIT_PROCESS_TIME* = 000000002H;
    JOB_OBJECT_LIMIT_JOB_TIME* = 000000004H;
    JOB_OBJECT_LIMIT_ACTIVE_PROCESS* = 000000008H;
    JOB_OBJECT_LIMIT_AFFINITY* = 000000010H;
    JOB_OBJECT_LIMIT_PRIORITY_CLASS* = 000000020H;
    JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME* = 000000040H;
    JOB_OBJECT_LIMIT_VALID_FLAGS* = 00000007FH;
    JOB_OBJECT_UILIMIT_NONE* = 000000000H;
    JOB_OBJECT_UILIMIT_HANDLES* = 000000001H;
    JOB_OBJECT_UILIMIT_READCLIPBOARD* = 000000002H;
    JOB_OBJECT_UILIMIT_WRITECLIPBOARD* = 000000004H;
    JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS* = 000000008H;
    JOB_OBJECT_UILIMIT_DISPLAYSETTINGS* = 000000010H;
    JOB_OBJECT_UILIMIT_GLOBALATOMS* = 000000020H;
    JOB_OBJECT_UILIMIT_DESKTOP* = 000000040H;
    JOB_OBJECT_UILIMIT_EXITWINDOWS* = 000000080H;
    JOB_OBJECT_UILIMIT_ALL* = 0000000FFH;
    JOB_OBJECT_UI_VALID_FLAGS* = 0000000FFH;
    JOB_OBJECT_SECURITY_NO_ADMIN* = 000000001H;
    JOB_OBJECT_SECURITY_RESTRICTED_TOKEN* = 000000002H;
    JOB_OBJECT_SECURITY_ONLY_TOKEN* = 000000004H;
    JOB_OBJECT_SECURITY_FILTER_TOKENS* = 000000008H;
    JOB_OBJECT_SECURITY_VALID_FLAGS* = 00000000FH;
    EVENT_MODIFY_STATE* = 000000002H;
    EVENT_ALL_ACCESS* = 0001F0003H;
    MUTANT_QUERY_STATE* = 000000001H;
    MUTANT_ALL_ACCESS* = 0001F0001H;
    SEMAPHORE_MODIFY_STATE* = 000000002H;
    SEMAPHORE_ALL_ACCESS* = 0001F0003H;
    TIMER_QUERY_STATE* = 000000001H;
    TIMER_MODIFY_STATE* = 000000002H;
    TIMER_ALL_ACCESS* = 0001F0003H;
    TIME_ZONE_ID_UNKNOWN* = 000000000H;
    TIME_ZONE_ID_STANDARD* = 000000001H;
    TIME_ZONE_ID_DAYLIGHT* = 000000002H;
    PROCESSOR_INTEL_386* = 000000182H;
    PROCESSOR_INTEL_486* = 0000001E6H;
    PROCESSOR_INTEL_PENTIUM* = 00000024AH;
    PROCESSOR_MIPS_R4000* = 000000FA0H;
    PROCESSOR_ALPHA_21064* = 000005248H;
    PROCESSOR_PPC_601* = 000000259H;
    PROCESSOR_PPC_603* = 00000025BH;
    PROCESSOR_PPC_604* = 00000025CH;
    PROCESSOR_PPC_620* = 00000026CH;
    PROCESSOR_HITACHI_SH3* = 000002713H;
    PROCESSOR_HITACHI_SH3E* = 000002714H;
    PROCESSOR_HITACHI_SH4* = 000002715H;
    PROCESSOR_MOTOROLA_821* = 000000335H;
    PROCESSOR_SHx_SH3* = 000000067H;
    PROCESSOR_SHx_SH4* = 000000068H;
    PROCESSOR_STRONGARM* = 000000A11H;
    PROCESSOR_ARM720* = 000000720H;
    PROCESSOR_ARM820* = 000000820H;
    PROCESSOR_ARM920* = 000000920H;
    PROCESSOR_ARM_7TDMI* = 000011171H;
    PROCESSOR_ARCHITECTURE_INTEL* = 000000000H;
    PROCESSOR_ARCHITECTURE_MIPS* = 000000001H;
    PROCESSOR_ARCHITECTURE_ALPHA* = 000000002H;
    PROCESSOR_ARCHITECTURE_PPC* = 000000003H;
    PROCESSOR_ARCHITECTURE_SHX* = 000000004H;
    PROCESSOR_ARCHITECTURE_ARM* = 000000005H;
    PROCESSOR_ARCHITECTURE_IA64* = 000000006H;
    PROCESSOR_ARCHITECTURE_ALPHA64* = 000000007H;
    PROCESSOR_ARCHITECTURE_UNKNOWN* = 00000FFFFH;
    PF_FLOATING_POINT_PRECISION_ERRATA* = 000000000H;
    PF_FLOATING_POINT_EMULATED* = 000000001H;
    PF_COMPARE_EXCHANGE_DOUBLE* = 000000002H;
    PF_MMX_INSTRUCTIONS_AVAILABLE* = 000000003H;
    PF_PPC_MOVEMEM_64BIT_OK* = 000000004H;
    PF_ALPHA_BYTE_INSTRUCTIONS* = 000000005H;
    PF_XMMI_INSTRUCTIONS_AVAILABLE* = 000000006H;
    PF_AMD3D_INSTRUCTIONS_AVAILABLE* = 000000007H;
    SYSTEM_FLAG_REMOTE_BOOT_CLIENT* = 000000001H;
    SYSTEM_FLAG_DISKLESS_CLIENT* = 000000002H;
    SECTION_QUERY* = 000000001H;
    SECTION_MAP_WRITE* = 000000002H;
    SECTION_MAP_READ* = 000000004H;
    SECTION_MAP_EXECUTE* = 000000008H;
    SECTION_EXTEND_SIZE* = 000000010H;
    SECTION_ALL_ACCESS* = 0000F001FH;
    PAGE_NOACCESS* = 000000001H;
    PAGE_READONLY* = 000000002H;
    PAGE_READWRITE* = 000000004H;
    PAGE_WRITECOPY* = 000000008H;
    PAGE_EXECUTE* = 000000010H;
    PAGE_EXECUTE_READ* = 000000020H;
    PAGE_EXECUTE_READWRITE* = 000000040H;
    PAGE_EXECUTE_WRITECOPY* = 000000080H;
    PAGE_GUARD* = 000000100H;
    PAGE_NOCACHE* = 000000200H;
    PAGE_WRITECOMBINE* = 000000400H;
    MEM_COMMIT* = 000001000H;
    MEM_RESERVE* = 000002000H;
    MEM_DECOMMIT* = 000004000H;
    MEM_RELEASE* = 000008000H;
    MEM_FREE* = 000010000H;
    MEM_PRIVATE* = 000020000H;
    MEM_MAPPED* = 000040000H;
    MEM_RESET* = 000080000H;
    MEM_TOP_DOWN* = 000100000H;
    MEM_4MB_PAGES* = 080000000H;
    SEC_FILE* = 000800000H;
    SEC_IMAGE* = 001000000H;
    SEC_VLM* = 002000000H;
    SEC_RESERVE* = 004000000H;
    SEC_COMMIT* = 008000000H;
    SEC_NOCACHE* = 010000000H;
    MEM_IMAGE* = 001000000H;
    FILE_READ_DATA* = 000000001H;
    FILE_LIST_DIRECTORY* = 000000001H;
    FILE_WRITE_DATA* = 000000002H;
    FILE_ADD_FILE* = 000000002H;
    FILE_APPEND_DATA* = 000000004H;
    FILE_ADD_SUBDIRECTORY* = 000000004H;
    FILE_CREATE_PIPE_INSTANCE* = 000000004H;
    FILE_READ_EA* = 000000008H;
    FILE_WRITE_EA* = 000000010H;
    FILE_EXECUTE* = 000000020H;
    FILE_TRAVERSE* = 000000020H;
    FILE_DELETE_CHILD* = 000000040H;
    FILE_READ_ATTRIBUTES* = 000000080H;
    FILE_WRITE_ATTRIBUTES* = 000000100H;
    FILE_ALL_ACCESS* = 0001F03FFH;
    FILE_GENERIC_READ* = 000120089H;
    FILE_GENERIC_WRITE* = 000120116H;
    FILE_GENERIC_EXECUTE* = 0001200A0H;
    FILE_SHARE_READ* = 000000001H;
    FILE_SHARE_WRITE* = 000000002H;
    FILE_SHARE_DELETE* = 000000004H;
    FILE_ATTRIBUTE_READONLY* = 000000001H;
    FILE_ATTRIBUTE_HIDDEN* = 000000002H;
    FILE_ATTRIBUTE_SYSTEM* = 000000004H;
    FILE_ATTRIBUTE_DIRECTORY* = 000000010H;
    FILE_ATTRIBUTE_ARCHIVE* = 000000020H;
    FILE_ATTRIBUTE_ENCRYPTED* = 000000040H;
    FILE_ATTRIBUTE_NORMAL* = 000000080H;
    FILE_ATTRIBUTE_TEMPORARY* = 000000100H;
    FILE_ATTRIBUTE_SPARSE_FILE* = 000000200H;
    FILE_ATTRIBUTE_REPARSE_POINT* = 000000400H;
    FILE_ATTRIBUTE_COMPRESSED* = 000000800H;
    FILE_ATTRIBUTE_OFFLINE* = 000001000H;
    FILE_ATTRIBUTE_NOT_CONTENT_INDEXED* = 000002000H;
    FILE_NOTIFY_CHANGE_FILE_NAME* = 000000001H;
    FILE_NOTIFY_CHANGE_DIR_NAME* = 000000002H;
    FILE_NOTIFY_CHANGE_ATTRIBUTES* = 000000004H;
    FILE_NOTIFY_CHANGE_SIZE* = 000000008H;
    FILE_NOTIFY_CHANGE_LAST_WRITE* = 000000010H;
    FILE_NOTIFY_CHANGE_LAST_ACCESS* = 000000020H;
    FILE_NOTIFY_CHANGE_CREATION* = 000000040H;
    FILE_NOTIFY_CHANGE_SECURITY* = 000000100H;
    FILE_ACTION_ADDED* = 000000001H;
    FILE_ACTION_REMOVED* = 000000002H;
    FILE_ACTION_MODIFIED* = 000000003H;
    FILE_ACTION_RENAMED_OLD_NAME* = 000000004H;
    FILE_ACTION_RENAMED_NEW_NAME* = 000000005H;
    MAILSLOT_NO_MESSAGE* = 0FFFFFFFFH;
    MAILSLOT_WAIT_FOREVER* = 0FFFFFFFFH;
    FILE_CASE_SENSITIVE_SEARCH* = 000000001H;
    FILE_CASE_PRESERVED_NAMES* = 000000002H;
    FILE_UNICODE_ON_DISK* = 000000004H;
    FILE_PERSISTENT_ACLS* = 000000008H;
    FILE_FILE_COMPRESSION* = 000000010H;
    FILE_VOLUME_QUOTAS* = 000000020H;
    FILE_SUPPORTS_SPARSE_FILES* = 000000040H;
    FILE_SUPPORTS_REPARSE_POINTS* = 000000080H;
    FILE_SUPPORTS_REMOTE_STORAGE* = 000000100H;
    FILE_VOLUME_IS_COMPRESSED* = 000008000H;
    FILE_SUPPORTS_OBJECT_IDS* = 000010000H;
    FILE_SUPPORTS_ENCRYPTION* = 000020000H;
    MAXIMUM_REPARSE_DATA_BUFFER_SIZE* = 000004000H;
    IO_REPARSE_TAG_RESERVED_ZERO* = 000000000H;
    IO_REPARSE_TAG_RESERVED_ONE* = 000000001H;
    IO_REPARSE_TAG_RESERVED_RANGE* = 000000001H;
    IO_REPARSE_TAG_VALID_VALUES* = 0E000FFFFH;
    IO_REPARSE_TAG_SYMBOLIC_LINK* = 000000000H;
    IO_REPARSE_TAG_MOUNT_POINT* = 0A0000003H;
    IO_REPARSE_TAG_HSM* = 0C0000004H;
    IO_REPARSE_TAG_NSS* = 080000005H;
    IO_REPARSE_TAG_NSSRECOVER* = 080000006H;
    IO_REPARSE_TAG_SIS* = 080000007H;
    IO_REPARSE_TAG_DFS* = 080000008H;
    IO_COMPLETION_MODIFY_STATE* = 000000002H;
    IO_COMPLETION_ALL_ACCESS* = 0001F0003H;
    DUPLICATE_CLOSE_SOURCE* = 000000001H;
    DUPLICATE_SAME_ACCESS* = 000000002H;
    ES_SYSTEM_REQUIRED* = 000000001H;
    ES_DISPLAY_REQUIRED* = 000000002H;
    ES_USER_PRESENT* = 000000004H;
    ES_CONTINUOUS* = 080000000H;
    IMAGE_DOS_SIGNATURE* = 000005A4DH;
    IMAGE_OS2_SIGNATURE* = 00000454EH;
    IMAGE_OS2_SIGNATURE_LE* = 00000454CH;
    IMAGE_VXD_SIGNATURE* = 00000454CH;
    IMAGE_NT_SIGNATURE* = 000004550H;
    IMAGE_SIZEOF_FILE_HEADER* = 000000014H;
    IMAGE_FILE_RELOCS_STRIPPED* = 000000001H;
    IMAGE_FILE_EXECUTABLE_IMAGE* = 000000002H;
    IMAGE_FILE_LINE_NUMS_STRIPPED* = 000000004H;
    IMAGE_FILE_LOCAL_SYMS_STRIPPED* = 000000008H;
    IMAGE_FILE_AGGRESIVE_WS_TRIM* = 000000010H;
    IMAGE_FILE_LARGE_ADDRESS_AWARE* = 000000020H;
    IMAGE_FILE_BYTES_REVERSED_LO* = 000000080H;
    IMAGE_FILE_32BIT_MACHINE* = 000000100H;
    IMAGE_FILE_DEBUG_STRIPPED* = 000000200H;
    IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP* = 000000400H;
    IMAGE_FILE_NET_RUN_FROM_SWAP* = 000000800H;
    IMAGE_FILE_SYSTEM* = 000001000H;
    IMAGE_FILE_DLL* = 000002000H;
    IMAGE_FILE_UP_SYSTEM_ONLY* = 000004000H;
    IMAGE_FILE_BYTES_REVERSED_HI* = 000008000H;
    IMAGE_FILE_MACHINE_UNKNOWN* = 000000000H;
    IMAGE_FILE_MACHINE_I386* = 00000014CH;
    IMAGE_FILE_MACHINE_R3000* = 000000162H;
    IMAGE_FILE_MACHINE_R4000* = 000000166H;
    IMAGE_FILE_MACHINE_R10000* = 000000168H;
    IMAGE_FILE_MACHINE_WCEMIPSV2* = 000000169H;
    IMAGE_FILE_MACHINE_ALPHA* = 000000184H;
    IMAGE_FILE_MACHINE_POWERPC* = 0000001F0H;
    IMAGE_FILE_MACHINE_SH3* = 0000001A2H;
    IMAGE_FILE_MACHINE_SH3E* = 0000001A4H;
    IMAGE_FILE_MACHINE_SH4* = 0000001A6H;
    IMAGE_FILE_MACHINE_ARM* = 0000001C0H;
    IMAGE_FILE_MACHINE_THUMB* = 0000001C2H;
    IMAGE_FILE_MACHINE_IA64* = 000000200H;
    IMAGE_FILE_MACHINE_MIPS16* = 000000266H;
    IMAGE_FILE_MACHINE_MIPSFPU* = 000000366H;
    IMAGE_FILE_MACHINE_MIPSFPU16* = 000000466H;
    IMAGE_FILE_MACHINE_ALPHA64* = 000000284H;
    IMAGE_FILE_MACHINE_AXP64* = 000000284H;
    IMAGE_NUMBEROF_DIRECTORY_ENTRIES* = 000000010H;
    IMAGE_SIZEOF_ROM_OPTIONAL_HEADER* = 000000038H;
    IMAGE_SIZEOF_STD_OPTIONAL_HEADER* = 00000001CH;
    IMAGE_SIZEOF_NT_OPTIONAL32_HEADER* = 0000000E0H;
    IMAGE_SIZEOF_NT_OPTIONAL64_HEADER* = 0000000F0H;
    IMAGE_NT_OPTIONAL_HDR32_MAGIC* = 00000010BH;
    IMAGE_NT_OPTIONAL_HDR64_MAGIC* = 00000020BH;
    IMAGE_ROM_OPTIONAL_HDR_MAGIC* = 000000107H;
    IMAGE_SIZEOF_NT_OPTIONAL_HEADER* = 0000000E0H;
    IMAGE_NT_OPTIONAL_HDR_MAGIC* = 00000010BH;
    IMAGE_SUBSYSTEM_UNKNOWN* = 000000000H;
    IMAGE_SUBSYSTEM_NATIVE* = 000000001H;
    IMAGE_SUBSYSTEM_WINDOWS_GUI* = 000000002H;
    IMAGE_SUBSYSTEM_WINDOWS_CUI* = 000000003H;
    IMAGE_SUBSYSTEM_OS2_CUI* = 000000005H;
    IMAGE_SUBSYSTEM_POSIX_CUI* = 000000007H;
    IMAGE_SUBSYSTEM_NATIVE_WINDOWS* = 000000008H;
    IMAGE_SUBSYSTEM_WINDOWS_CE_GUI* = 000000009H;
    IMAGE_DLLCHARACTERISTICS_WDM_DRIVER* = 000002000H;
    IMAGE_DIRECTORY_ENTRY_EXPORT* = 000000000H;
    IMAGE_DIRECTORY_ENTRY_IMPORT* = 000000001H;
    IMAGE_DIRECTORY_ENTRY_RESOURCE* = 000000002H;
    IMAGE_DIRECTORY_ENTRY_EXCEPTION* = 000000003H;
    IMAGE_DIRECTORY_ENTRY_SECURITY* = 000000004H;
    IMAGE_DIRECTORY_ENTRY_BASERELOC* = 000000005H;
    IMAGE_DIRECTORY_ENTRY_DEBUG* = 000000006H;
    IMAGE_DIRECTORY_ENTRY_ARCHITECTURE* = 000000007H;
    IMAGE_DIRECTORY_ENTRY_GLOBALPTR* = 000000008H;
    IMAGE_DIRECTORY_ENTRY_TLS* = 000000009H;
    IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG* = 00000000AH;
    IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT* = 00000000BH;
    IMAGE_DIRECTORY_ENTRY_IAT* = 00000000CH;
    IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT* = 00000000DH;
    IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR* = 00000000EH;
    IMAGE_SIZEOF_SHORT_NAME* = 000000008H;
    IMAGE_SIZEOF_SECTION_HEADER* = 000000028H;
    IMAGE_SCN_TYPE_NO_PAD* = 000000008H;
    IMAGE_SCN_CNT_CODE* = 000000020H;
    IMAGE_SCN_CNT_INITIALIZED_DATA* = 000000040H;
    IMAGE_SCN_CNT_UNINITIALIZED_DATA* = 000000080H;
    IMAGE_SCN_LNK_OTHER* = 000000100H;
    IMAGE_SCN_LNK_INFO* = 000000200H;
    IMAGE_SCN_LNK_REMOVE* = 000000800H;
    IMAGE_SCN_LNK_COMDAT* = 000001000H;
    IMAGE_SCN_NO_DEFER_SPEC_EXC* = 000004000H;
    IMAGE_SCN_GPREL* = 000008000H;
    IMAGE_SCN_MEM_FARDATA* = 000008000H;
    IMAGE_SCN_MEM_PURGEABLE* = 000020000H;
    IMAGE_SCN_MEM_16BIT* = 000020000H;
    IMAGE_SCN_MEM_LOCKED* = 000040000H;
    IMAGE_SCN_MEM_PRELOAD* = 000080000H;
    IMAGE_SCN_ALIGN_1BYTES* = 000100000H;
    IMAGE_SCN_ALIGN_2BYTES* = 000200000H;
    IMAGE_SCN_ALIGN_4BYTES* = 000300000H;
    IMAGE_SCN_ALIGN_8BYTES* = 000400000H;
    IMAGE_SCN_ALIGN_16BYTES* = 000500000H;
    IMAGE_SCN_ALIGN_32BYTES* = 000600000H;
    IMAGE_SCN_ALIGN_64BYTES* = 000700000H;
    IMAGE_SCN_ALIGN_128BYTES* = 000800000H;
    IMAGE_SCN_ALIGN_256BYTES* = 000900000H;
    IMAGE_SCN_ALIGN_512BYTES* = 000A00000H;
    IMAGE_SCN_ALIGN_1024BYTES* = 000B00000H;
    IMAGE_SCN_ALIGN_2048BYTES* = 000C00000H;
    IMAGE_SCN_ALIGN_4096BYTES* = 000D00000H;
    IMAGE_SCN_ALIGN_8192BYTES* = 000E00000H;
    IMAGE_SCN_LNK_NRELOC_OVFL* = 001000000H;
    IMAGE_SCN_MEM_DISCARDABLE* = 002000000H;
    IMAGE_SCN_MEM_NOT_CACHED* = 004000000H;
    IMAGE_SCN_MEM_NOT_PAGED* = 008000000H;
    IMAGE_SCN_MEM_SHARED* = 010000000H;
    IMAGE_SCN_MEM_EXECUTE* = 020000000H;
    IMAGE_SCN_MEM_READ* = 040000000H;
    IMAGE_SCN_MEM_WRITE* = 080000000H;
    IMAGE_SCN_SCALE_INDEX* = 000000001H;
    IMAGE_SIZEOF_SYMBOL* = 000000012H;
    IMAGE_SYM_UNDEFINED* = 000000000H;
    IMAGE_SYM_ABSOLUTE* = 0FFFFFFFFH;
    IMAGE_SYM_DEBUG* = 0FFFFFFFEH;
    IMAGE_SYM_TYPE_NULL* = 000000000H;
    IMAGE_SYM_TYPE_VOID* = 000000001H;
    IMAGE_SYM_TYPE_CHAR* = 000000002H;
    IMAGE_SYM_TYPE_SHORT* = 000000003H;
    IMAGE_SYM_TYPE_INT* = 000000004H;
    IMAGE_SYM_TYPE_LONG* = 000000005H;
    IMAGE_SYM_TYPE_FLOAT* = 000000006H;
    IMAGE_SYM_TYPE_DOUBLE* = 000000007H;
    IMAGE_SYM_TYPE_STRUCT* = 000000008H;
    IMAGE_SYM_TYPE_UNION* = 000000009H;
    IMAGE_SYM_TYPE_ENUM* = 00000000AH;
    IMAGE_SYM_TYPE_MOE* = 00000000BH;
    IMAGE_SYM_TYPE_BYTE* = 00000000CH;
    IMAGE_SYM_TYPE_WORD* = 00000000DH;
    IMAGE_SYM_TYPE_UINT* = 00000000EH;
    IMAGE_SYM_TYPE_DWORD* = 00000000FH;
    IMAGE_SYM_TYPE_PCODE* = 000008000H;
    IMAGE_SYM_DTYPE_NULL* = 000000000H;
    IMAGE_SYM_DTYPE_POINTER* = 000000001H;
    IMAGE_SYM_DTYPE_FUNCTION* = 000000002H;
    IMAGE_SYM_DTYPE_ARRAY* = 000000003H;
    IMAGE_SYM_CLASS_END_OF_FUNCTION* = 0FFFFFFFFH;
    IMAGE_SYM_CLASS_NULL* = 000000000H;
    IMAGE_SYM_CLASS_AUTOMATIC* = 000000001H;
    IMAGE_SYM_CLASS_EXTERNAL* = 000000002H;
    IMAGE_SYM_CLASS_STATIC* = 000000003H;
    IMAGE_SYM_CLASS_REGISTER* = 000000004H;
    IMAGE_SYM_CLASS_EXTERNAL_DEF* = 000000005H;
    IMAGE_SYM_CLASS_LABEL* = 000000006H;
    IMAGE_SYM_CLASS_UNDEFINED_LABEL* = 000000007H;
    IMAGE_SYM_CLASS_MEMBER_OF_STRUCT* = 000000008H;
    IMAGE_SYM_CLASS_ARGUMENT* = 000000009H;
    IMAGE_SYM_CLASS_STRUCT_TAG* = 00000000AH;
    IMAGE_SYM_CLASS_MEMBER_OF_UNION* = 00000000BH;
    IMAGE_SYM_CLASS_UNION_TAG* = 00000000CH;
    IMAGE_SYM_CLASS_TYPE_DEFINITION* = 00000000DH;
    IMAGE_SYM_CLASS_UNDEFINED_STATIC* = 00000000EH;
    IMAGE_SYM_CLASS_ENUM_TAG* = 00000000FH;
    IMAGE_SYM_CLASS_MEMBER_OF_ENUM* = 000000010H;
    IMAGE_SYM_CLASS_REGISTER_PARAM* = 000000011H;
    IMAGE_SYM_CLASS_BIT_FIELD* = 000000012H;
    IMAGE_SYM_CLASS_FAR_EXTERNAL* = 000000044H;
    IMAGE_SYM_CLASS_BLOCK* = 000000064H;
    IMAGE_SYM_CLASS_FUNCTION* = 000000065H;
    IMAGE_SYM_CLASS_END_OF_STRUCT* = 000000066H;
    IMAGE_SYM_CLASS_FILE* = 000000067H;
    IMAGE_SYM_CLASS_SECTION* = 000000068H;
    IMAGE_SYM_CLASS_WEAK_EXTERNAL* = 000000069H;
    N_BTMASK* = 00000000FH;
    N_TMASK* = 000000030H;
    N_TMASK1* = 0000000C0H;
    N_TMASK2* = 0000000F0H;
    N_BTSHFT* = 000000004H;
    N_TSHIFT* = 000000002H;
    IMAGE_SIZEOF_AUX_SYMBOL* = 000000012H;
    IMAGE_COMDAT_SELECT_NODUPLICATES* = 000000001H;
    IMAGE_COMDAT_SELECT_ANY* = 000000002H;
    IMAGE_COMDAT_SELECT_SAME_SIZE* = 000000003H;
    IMAGE_COMDAT_SELECT_EXACT_MATCH* = 000000004H;
    IMAGE_COMDAT_SELECT_ASSOCIATIVE* = 000000005H;
    IMAGE_COMDAT_SELECT_LARGEST* = 000000006H;
    IMAGE_COMDAT_SELECT_NEWEST* = 000000007H;
    IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY* = 000000001H;
    IMAGE_WEAK_EXTERN_SEARCH_LIBRARY* = 000000002H;
    IMAGE_WEAK_EXTERN_SEARCH_ALIAS* = 000000003H;
    IMAGE_SIZEOF_RELOCATION* = 00000000AH;
    IMAGE_REL_I386_ABSOLUTE* = 000000000H;
    IMAGE_REL_I386_DIR16* = 000000001H;
    IMAGE_REL_I386_REL16* = 000000002H;
    IMAGE_REL_I386_DIR32* = 000000006H;
    IMAGE_REL_I386_DIR32NB* = 000000007H;
    IMAGE_REL_I386_SEG12* = 000000009H;
    IMAGE_REL_I386_SECTION* = 00000000AH;
    IMAGE_REL_I386_SECREL* = 00000000BH;
    IMAGE_REL_I386_REL32* = 000000014H;
    IMAGE_REL_MIPS_ABSOLUTE* = 000000000H;
    IMAGE_REL_MIPS_REFHALF* = 000000001H;
    IMAGE_REL_MIPS_REFWORD* = 000000002H;
    IMAGE_REL_MIPS_JMPADDR* = 000000003H;
    IMAGE_REL_MIPS_REFHI* = 000000004H;
    IMAGE_REL_MIPS_REFLO* = 000000005H;
    IMAGE_REL_MIPS_GPREL* = 000000006H;
    IMAGE_REL_MIPS_LITERAL* = 000000007H;
    IMAGE_REL_MIPS_SECTION* = 00000000AH;
    IMAGE_REL_MIPS_SECREL* = 00000000BH;
    IMAGE_REL_MIPS_SECRELLO* = 00000000CH;
    IMAGE_REL_MIPS_SECRELHI* = 00000000DH;
    IMAGE_REL_MIPS_JMPADDR16* = 000000010H;
    IMAGE_REL_MIPS_REFWORDNB* = 000000022H;
    IMAGE_REL_MIPS_PAIR* = 000000025H;
    IMAGE_REL_ALPHA_ABSOLUTE* = 000000000H;
    IMAGE_REL_ALPHA_REFLONG* = 000000001H;
    IMAGE_REL_ALPHA_REFQUAD* = 000000002H;
    IMAGE_REL_ALPHA_GPREL32* = 000000003H;
    IMAGE_REL_ALPHA_LITERAL* = 000000004H;
    IMAGE_REL_ALPHA_LITUSE* = 000000005H;
    IMAGE_REL_ALPHA_GPDISP* = 000000006H;
    IMAGE_REL_ALPHA_BRADDR* = 000000007H;
    IMAGE_REL_ALPHA_HINT* = 000000008H;
    IMAGE_REL_ALPHA_INLINE_REFLONG* = 000000009H;
    IMAGE_REL_ALPHA_REFHI* = 00000000AH;
    IMAGE_REL_ALPHA_REFLO* = 00000000BH;
    IMAGE_REL_ALPHA_PAIR* = 00000000CH;
    IMAGE_REL_ALPHA_MATCH* = 00000000DH;
    IMAGE_REL_ALPHA_SECTION* = 00000000EH;
    IMAGE_REL_ALPHA_SECREL* = 00000000FH;
    IMAGE_REL_ALPHA_REFLONGNB* = 000000010H;
    IMAGE_REL_ALPHA_SECRELLO* = 000000011H;
    IMAGE_REL_ALPHA_SECRELHI* = 000000012H;
    IMAGE_REL_ALPHA_REFQ3* = 000000013H;
    IMAGE_REL_ALPHA_REFQ2* = 000000014H;
    IMAGE_REL_ALPHA_REFQ1* = 000000015H;
    IMAGE_REL_ALPHA_GPRELLO* = 000000016H;
    IMAGE_REL_ALPHA_GPRELHI* = 000000017H;
    IMAGE_REL_PPC_ABSOLUTE* = 000000000H;
    IMAGE_REL_PPC_ADDR64* = 000000001H;
    IMAGE_REL_PPC_ADDR32* = 000000002H;
    IMAGE_REL_PPC_ADDR24* = 000000003H;
    IMAGE_REL_PPC_ADDR16* = 000000004H;
    IMAGE_REL_PPC_ADDR14* = 000000005H;
    IMAGE_REL_PPC_REL24* = 000000006H;
    IMAGE_REL_PPC_REL14* = 000000007H;
    IMAGE_REL_PPC_TOCREL16* = 000000008H;
    IMAGE_REL_PPC_TOCREL14* = 000000009H;
    IMAGE_REL_PPC_ADDR32NB* = 00000000AH;
    IMAGE_REL_PPC_SECREL* = 00000000BH;
    IMAGE_REL_PPC_SECTION* = 00000000CH;
    IMAGE_REL_PPC_IFGLUE* = 00000000DH;
    IMAGE_REL_PPC_IMGLUE* = 00000000EH;
    IMAGE_REL_PPC_SECREL16* = 00000000FH;
    IMAGE_REL_PPC_REFHI* = 000000010H;
    IMAGE_REL_PPC_REFLO* = 000000011H;
    IMAGE_REL_PPC_PAIR* = 000000012H;
    IMAGE_REL_PPC_SECRELLO* = 000000013H;
    IMAGE_REL_PPC_SECRELHI* = 000000014H;
    IMAGE_REL_PPC_GPREL* = 000000015H;
    IMAGE_REL_PPC_TYPEMASK* = 0000000FFH;
    IMAGE_REL_PPC_NEG* = 000000100H;
    IMAGE_REL_PPC_BRTAKEN* = 000000200H;
    IMAGE_REL_PPC_BRNTAKEN* = 000000400H;
    IMAGE_REL_PPC_TOCDEFN* = 000000800H;
    IMAGE_REL_SH3_ABSOLUTE* = 000000000H;
    IMAGE_REL_SH3_DIRECT16* = 000000001H;
    IMAGE_REL_SH3_DIRECT32* = 000000002H;
    IMAGE_REL_SH3_DIRECT8* = 000000003H;
    IMAGE_REL_SH3_DIRECT8_WORD* = 000000004H;
    IMAGE_REL_SH3_DIRECT8_LONG* = 000000005H;
    IMAGE_REL_SH3_DIRECT4* = 000000006H;
    IMAGE_REL_SH3_DIRECT4_WORD* = 000000007H;
    IMAGE_REL_SH3_DIRECT4_LONG* = 000000008H;
    IMAGE_REL_SH3_PCREL8_WORD* = 000000009H;
    IMAGE_REL_SH3_PCREL8_LONG* = 00000000AH;
    IMAGE_REL_SH3_PCREL12_WORD* = 00000000BH;
    IMAGE_REL_SH3_STARTOF_SECTION* = 00000000CH;
    IMAGE_REL_SH3_SIZEOF_SECTION* = 00000000DH;
    IMAGE_REL_SH3_SECTION* = 00000000EH;
    IMAGE_REL_SH3_SECREL* = 00000000FH;
    IMAGE_REL_SH3_DIRECT32_NB* = 000000010H;
    IMAGE_REL_ARM_ABSOLUTE* = 000000000H;
    IMAGE_REL_ARM_ADDR32* = 000000001H;
    IMAGE_REL_ARM_ADDR32NB* = 000000002H;
    IMAGE_REL_ARM_BRANCH24* = 000000003H;
    IMAGE_REL_ARM_BRANCH11* = 000000004H;
    IMAGE_REL_ARM_SECTION* = 00000000EH;
    IMAGE_REL_ARM_SECREL* = 00000000FH;
    IMAGE_REL_IA64_ABSOLUTE* = 000000000H;
    IMAGE_REL_IA64_IMM14* = 000000001H;
    IMAGE_REL_IA64_IMM22* = 000000002H;
    IMAGE_REL_IA64_IMM64* = 000000003H;
    IMAGE_REL_IA64_DIR32* = 000000004H;
    IMAGE_REL_IA64_DIR64* = 000000005H;
    IMAGE_REL_IA64_PCREL21B* = 000000006H;
    IMAGE_REL_IA64_PCREL21M* = 000000007H;
    IMAGE_REL_IA64_PCREL21F* = 000000008H;
    IMAGE_REL_IA64_GPREL22* = 000000009H;
    IMAGE_REL_IA64_LTOFF22* = 00000000AH;
    IMAGE_REL_IA64_SECTION* = 00000000BH;
    IMAGE_REL_IA64_SECREL22* = 00000000CH;
    IMAGE_REL_IA64_SECREL64I* = 00000000DH;
    IMAGE_REL_IA64_SECREL32* = 00000000EH;
    IMAGE_REL_IA64_LTOFF64* = 00000000FH;
    IMAGE_REL_IA64_DIR32NB* = 000000010H;
    IMAGE_REL_IA64_RESERVED_11* = 000000011H;
    IMAGE_REL_IA64_RESERVED_12* = 000000012H;
    IMAGE_REL_IA64_RESERVED_13* = 000000013H;
    IMAGE_REL_IA64_RESERVED_14* = 000000014H;
    IMAGE_REL_IA64_RESERVED_15* = 000000015H;
    IMAGE_REL_IA64_RESERVED_16* = 000000016H;
    IMAGE_REL_IA64_ADDEND* = 00000001FH;
    EMARCH_ENC_I17_IMM7B_INST_WORD_X* = 000000003H;
    EMARCH_ENC_I17_IMM7B_SIZE_X* = 000000007H;
    EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X* = 000000004H;
    EMARCH_ENC_I17_IMM7B_VAL_POS_X* = 000000000H;
    EMARCH_ENC_I17_IMM9D_INST_WORD_X* = 000000003H;
    EMARCH_ENC_I17_IMM9D_SIZE_X* = 000000009H;
    EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X* = 000000012H;
    EMARCH_ENC_I17_IMM9D_VAL_POS_X* = 000000007H;
    EMARCH_ENC_I17_IMM5C_INST_WORD_X* = 000000003H;
    EMARCH_ENC_I17_IMM5C_SIZE_X* = 000000005H;
    EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X* = 00000000DH;
    EMARCH_ENC_I17_IMM5C_VAL_POS_X* = 000000010H;
    EMARCH_ENC_I17_IC_INST_WORD_X* = 000000003H;
    EMARCH_ENC_I17_IC_SIZE_X* = 000000001H;
    EMARCH_ENC_I17_IC_INST_WORD_POS_X* = 00000000CH;
    EMARCH_ENC_I17_IC_VAL_POS_X* = 000000015H;
    EMARCH_ENC_I17_IMM41a_INST_WORD_X* = 000000001H;
    EMARCH_ENC_I17_IMM41a_SIZE_X* = 00000000AH;
    EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X* = 00000000EH;
    EMARCH_ENC_I17_IMM41a_VAL_POS_X* = 000000016H;
    EMARCH_ENC_I17_IMM41b_INST_WORD_X* = 000000001H;
    EMARCH_ENC_I17_IMM41b_SIZE_X* = 000000008H;
    EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X* = 000000018H;
    EMARCH_ENC_I17_IMM41b_VAL_POS_X* = 000000020H;
    EMARCH_ENC_I17_IMM41c_INST_WORD_X* = 000000002H;
    EMARCH_ENC_I17_IMM41c_SIZE_X* = 000000017H;
    EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X* = 000000000H;
    EMARCH_ENC_I17_IMM41c_VAL_POS_X* = 000000028H;
    EMARCH_ENC_I17_SIGN_INST_WORD_X* = 000000003H;
    EMARCH_ENC_I17_SIGN_SIZE_X* = 000000001H;
    EMARCH_ENC_I17_SIGN_INST_WORD_POS_X* = 00000001BH;
    EMARCH_ENC_I17_SIGN_VAL_POS_X* = 00000003FH;
    IMAGE_SIZEOF_LINENUMBER* = 000000006H;
    IMAGE_SIZEOF_BASE_RELOCATION* = 000000008H;
    IMAGE_REL_BASED_ABSOLUTE* = 000000000H;
    IMAGE_REL_BASED_HIGH* = 000000001H;
    IMAGE_REL_BASED_LOW* = 000000002H;
    IMAGE_REL_BASED_HIGHLOW* = 000000003H;
    IMAGE_REL_BASED_HIGHADJ* = 000000004H;
    IMAGE_REL_BASED_MIPS_JMPADDR* = 000000005H;
    IMAGE_REL_BASED_SECTION* = 000000006H;
    IMAGE_REL_BASED_REL32* = 000000007H;
    IMAGE_REL_BASED_MIPS_JMPADDR16* = 000000009H;
    IMAGE_REL_BASED_IA64_IMM64* = 000000009H;
    IMAGE_REL_BASED_DIR64* = 00000000AH;
    IMAGE_REL_BASED_HIGH3ADJ* = 00000000BH;
    IMAGE_ARCHIVE_START_SIZE* = 000000008H;
    IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR* = 00000003CH;
    IMAGE_ORDINAL_FLAG64* = 000000000H;
    IMAGE_ORDINAL_FLAG32* = 080000000H;
    IMAGE_ORDINAL_FLAG* = 080000000H;
    IMAGE_MIX_ISA_LIMIT* = 000000002H;
    IA64_STUB_NOT_AVAILABLE* = 0FFFFFFFFH;
    IA64_JMPE_MASK* = 000FFFFFFH;
    IA64_JMPE_MARKER* = 00035000FH;
    IMAGE_RESOURCE_NAME_IS_STRING* = 080000000H;
    IMAGE_RESOURCE_DATA_IS_DIRECTORY* = 080000000H;
    IMAGE_DEBUG_TYPE_UNKNOWN* = 000000000H;
    IMAGE_DEBUG_TYPE_COFF* = 000000001H;
    IMAGE_DEBUG_TYPE_CODEVIEW* = 000000002H;
    IMAGE_DEBUG_TYPE_FPO* = 000000003H;
    IMAGE_DEBUG_TYPE_MISC* = 000000004H;
    IMAGE_DEBUG_TYPE_EXCEPTION* = 000000005H;
    IMAGE_DEBUG_TYPE_FIXUP* = 000000006H;
    IMAGE_DEBUG_TYPE_OMAP_TO_SRC* = 000000007H;
    IMAGE_DEBUG_TYPE_OMAP_FROM_SRC* = 000000008H;
    IMAGE_DEBUG_TYPE_BORLAND* = 000000009H;
    IMAGE_DEBUG_TYPE_RESERVED10* = 00000000AH;
    FRAME_FPO* = 000000000H;
    FRAME_TRAP* = 000000001H;
    FRAME_TSS* = 000000002H;
    FRAME_NONFPO* = 000000003H;
    SIZEOF_RFPO_DATA* = 000000010H;
    IMAGE_DEBUG_MISC_EXENAME* = 000000001H;
    IMAGE_SEPARATE_DEBUG_SIGNATURE* = 000004944H;
    IMAGE_SEPARATE_DEBUG_FLAGS_MASK* = 000008000H;
    IMAGE_SEPARATE_DEBUG_MISMATCH* = 000008000H;
    IMPORT_OBJECT_HDR_SIG2* = 00000FFFFH;
    _NLSCMPERROR* = 07FFFFFFFH;
    HEAP_NO_SERIALIZE* = 000000001H;
    HEAP_GROWABLE* = 000000002H;
    HEAP_GENERATE_EXCEPTIONS* = 000000004H;
    HEAP_ZERO_MEMORY* = 000000008H;
    HEAP_REALLOC_IN_PLACE_ONLY* = 000000010H;
    HEAP_TAIL_CHECKING_ENABLED* = 000000020H;
    HEAP_FREE_CHECKING_ENABLED* = 000000040H;
    HEAP_DISABLE_COALESCE_ON_FREE* = 000000080H;
    HEAP_CREATE_ALIGN_16* = 000010000H;
    HEAP_CREATE_ENABLE_TRACING* = 000020000H;
    HEAP_MAXIMUM_TAG* = 000000FFFH;
    HEAP_PSEUDO_TAG_FLAG* = 000008000H;
    HEAP_TAG_SHIFT* = 000000012H;
    IS_TEXT_UNICODE_ASCII16* = 000000001H;
    IS_TEXT_UNICODE_REVERSE_ASCII16* = 000000010H;
    IS_TEXT_UNICODE_STATISTICS* = 000000002H;
    IS_TEXT_UNICODE_REVERSE_STATISTICS* = 000000020H;
    IS_TEXT_UNICODE_CONTROLS* = 000000004H;
    IS_TEXT_UNICODE_REVERSE_CONTROLS* = 000000040H;
    IS_TEXT_UNICODE_SIGNATURE* = 000000008H;
    IS_TEXT_UNICODE_REVERSE_SIGNATURE* = 000000080H;
    IS_TEXT_UNICODE_ILLEGAL_CHARS* = 000000100H;
    IS_TEXT_UNICODE_ODD_LENGTH* = 000000200H;
    IS_TEXT_UNICODE_DBCS_LEADBYTE* = 000000400H;
    IS_TEXT_UNICODE_NULL_BYTES* = 000001000H;
    IS_TEXT_UNICODE_UNICODE_MASK* = 00000000FH;
    IS_TEXT_UNICODE_REVERSE_MASK* = 0000000F0H;
    IS_TEXT_UNICODE_NOT_UNICODE_MASK* = 000000F00H;
    IS_TEXT_UNICODE_NOT_ASCII_MASK* = 00000F000H;
    COMPRESSION_FORMAT_NONE* = 000000000H;
    COMPRESSION_FORMAT_DEFAULT* = 000000001H;
    COMPRESSION_FORMAT_LZNT1* = 000000002H;
    COMPRESSION_ENGINE_STANDARD* = 000000000H;
    COMPRESSION_ENGINE_MAXIMUM* = 000000100H;
    MESSAGE_RESOURCE_UNICODE* = 000000001H;
    RTL_CRITSECT_TYPE* = 000000000H;
    RTL_RESOURCE_TYPE* = 000000001H;
    SEF_DACL_AUTO_INHERIT* = 000000001H;
    SEF_SACL_AUTO_INHERIT* = 000000002H;
    SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT* = 000000004H;
    SEF_AVOID_PRIVILEGE_CHECK* = 000000008H;
    WT_EXECUTEDEFAULT* = 000000000H;
    WT_EXECUTEINIOTHREAD* = 000000001H;
    WT_EXECUTEINUITHREAD* = 000000002H;
    WT_EXECUTEINWAITTHREAD* = 000000004H;
    WT_EXECUTEDELETEWAIT* = 000000008H;
    WT_EXECUTEINLONGTHREAD* = 000000010H;
    DLL_PROCESS_ATTACH* = 000000001H;
    DLL_THREAD_ATTACH* = 000000002H;
    DLL_THREAD_DETACH* = 000000003H;
    DLL_PROCESS_DETACH* = 000000000H;
    EVENTLOG_SEQUENTIAL_READ* = 000000001H;
    EVENTLOG_SEEK_READ* = 000000002H;
    EVENTLOG_FORWARDS_READ* = 000000004H;
    EVENTLOG_BACKWARDS_READ* = 000000008H;
    EVENTLOG_SUCCESS* = 000000000H;
    EVENTLOG_ERROR_TYPE* = 000000001H;
    EVENTLOG_WARNING_TYPE* = 000000002H;
    EVENTLOG_INFORMATION_TYPE* = 000000004H;
    EVENTLOG_AUDIT_SUCCESS* = 000000008H;
    EVENTLOG_AUDIT_FAILURE* = 000000010H;
    EVENTLOG_START_PAIRED_EVENT* = 000000001H;
    EVENTLOG_END_PAIRED_EVENT* = 000000002H;
    EVENTLOG_END_ALL_PAIRED_EVENTS* = 000000004H;
    EVENTLOG_PAIRED_EVENT_ACTIVE* = 000000008H;
    EVENTLOG_PAIRED_EVENT_INACTIVE* = 000000010H;
    MAXLOGICALLOGNAMESIZE* = 000000100H;
    DBG_CONTINUE* = 000010002H;
    DBG_TERMINATE_THREAD* = 040010003H;
    DBG_TERMINATE_PROCESS* = 040010004H;
    DBG_CONTROL_C* = 040010005H;
    DBG_CONTROL_BREAK* = 040010008H;
    DBG_EXCEPTION_NOT_HANDLED* = 080010001H;
    KEY_QUERY_VALUE* = 000000001H;
    KEY_SET_VALUE* = 000000002H;
    KEY_CREATE_SUB_KEY* = 000000004H;
    KEY_ENUMERATE_SUB_KEYS* = 000000008H;
    KEY_NOTIFY* = 000000010H;
    KEY_CREATE_LINK* = 000000020H;
    KEY_READ* = 000020019H;
    KEY_WRITE* = 000020006H;
    KEY_EXECUTE* = 000020019H;
    KEY_ALL_ACCESS* = 0000F003FH;
    REG_OPTION_RESERVED* = 000000000H;
    REG_OPTION_NON_VOLATILE* = 000000000H;
    REG_OPTION_VOLATILE* = 000000001H;
    REG_OPTION_CREATE_LINK* = 000000002H;
    REG_OPTION_BACKUP_RESTORE* = 000000004H;
    REG_OPTION_OPEN_LINK* = 000000008H;
    REG_LEGAL_OPTION* = 00000000FH;
    REG_CREATED_NEW_KEY* = 000000001H;
    REG_OPENED_EXISTING_KEY* = 000000002H;
    REG_WHOLE_HIVE_VOLATILE* = 000000001H;
    REG_REFRESH_HIVE* = 000000002H;
    REG_NO_LAZY_FLUSH* = 000000004H;
    REG_NOTIFY_CHANGE_NAME* = 000000001H;
    REG_NOTIFY_CHANGE_ATTRIBUTES* = 000000002H;
    REG_NOTIFY_CHANGE_LAST_SET* = 000000004H;
    REG_NOTIFY_CHANGE_SECURITY* = 000000008H;
    REG_LEGAL_CHANGE_FILTER* = 00000000FH;
    REG_NONE* = 000000000H;
    REG_SZ* = 000000001H;
    REG_EXPAND_SZ* = 000000002H;
    REG_BINARY* = 000000003H;
    REG_DWORD* = 000000004H;
    REG_DWORD_LITTLE_ENDIAN* = 000000004H;
    REG_DWORD_BIG_ENDIAN* = 000000005H;
    REG_LINK* = 000000006H;
    REG_MULTI_SZ* = 000000007H;
    REG_RESOURCE_LIST* = 000000008H;
    REG_FULL_RESOURCE_DESCRIPTOR* = 000000009H;
    REG_RESOURCE_REQUIREMENTS_LIST* = 00000000AH;
    SERVICE_KERNEL_DRIVER* = 000000001H;
    SERVICE_FILE_SYSTEM_DRIVER* = 000000002H;
    SERVICE_ADAPTER* = 000000004H;
    SERVICE_RECOGNIZER_DRIVER* = 000000008H;
    SERVICE_DRIVER* = 00000000BH;
    SERVICE_WIN32_OWN_PROCESS* = 000000010H;
    SERVICE_WIN32_SHARE_PROCESS* = 000000020H;
    SERVICE_WIN32* = 000000030H;
    SERVICE_INTERACTIVE_PROCESS* = 000000100H;
    SERVICE_TYPE_ALL* = 00000013FH;
    SERVICE_BOOT_START* = 000000000H;
    SERVICE_SYSTEM_START* = 000000001H;
    SERVICE_AUTO_START* = 000000002H;
    SERVICE_DEMAND_START* = 000000003H;
    SERVICE_DISABLED* = 000000004H;
    SERVICE_ERROR_IGNORE* = 000000000H;
    SERVICE_ERROR_NORMAL* = 000000001H;
    SERVICE_ERROR_SEVERE* = 000000002H;
    SERVICE_ERROR_CRITICAL* = 000000003H;
    TAPE_ERASE_SHORT* = 000000000H;
    TAPE_ERASE_LONG* = 000000001H;
    TAPE_LOAD* = 000000000H;
    TAPE_UNLOAD* = 000000001H;
    TAPE_TENSION* = 000000002H;
    TAPE_LOCK* = 000000003H;
    TAPE_UNLOCK* = 000000004H;
    TAPE_FORMAT* = 000000005H;
    TAPE_SETMARKS* = 000000000H;
    TAPE_FILEMARKS* = 000000001H;
    TAPE_SHORT_FILEMARKS* = 000000002H;
    TAPE_LONG_FILEMARKS* = 000000003H;
    TAPE_ABSOLUTE_POSITION* = 000000000H;
    TAPE_LOGICAL_POSITION* = 000000001H;
    TAPE_PSEUDO_LOGICAL_POSITION* = 000000002H;
    TAPE_REWIND* = 000000000H;
    TAPE_ABSOLUTE_BLOCK* = 000000001H;
    TAPE_LOGICAL_BLOCK* = 000000002H;
    TAPE_PSEUDO_LOGICAL_BLOCK* = 000000003H;
    TAPE_SPACE_END_OF_DATA* = 000000004H;
    TAPE_SPACE_RELATIVE_BLOCKS* = 000000005H;
    TAPE_SPACE_FILEMARKS* = 000000006H;
    TAPE_SPACE_SEQUENTIAL_FMKS* = 000000007H;
    TAPE_SPACE_SETMARKS* = 000000008H;
    TAPE_SPACE_SEQUENTIAL_SMKS* = 000000009H;
    TAPE_DRIVE_FIXED* = 000000001H;
    TAPE_DRIVE_SELECT* = 000000002H;
    TAPE_DRIVE_INITIATOR* = 000000004H;
    TAPE_DRIVE_ERASE_SHORT* = 000000010H;
    TAPE_DRIVE_ERASE_LONG* = 000000020H;
    TAPE_DRIVE_ERASE_BOP_ONLY* = 000000040H;
    TAPE_DRIVE_ERASE_IMMEDIATE* = 000000080H;
    TAPE_DRIVE_TAPE_CAPACITY* = 000000100H;
    TAPE_DRIVE_TAPE_REMAINING* = 000000200H;
    TAPE_DRIVE_FIXED_BLOCK* = 000000400H;
    TAPE_DRIVE_VARIABLE_BLOCK* = 000000800H;
    TAPE_DRIVE_WRITE_PROTECT* = 000001000H;
    TAPE_DRIVE_EOT_WZ_SIZE* = 000002000H;
    TAPE_DRIVE_ECC* = 000010000H;
    TAPE_DRIVE_COMPRESSION* = 000020000H;
    TAPE_DRIVE_PADDING* = 000040000H;
    TAPE_DRIVE_REPORT_SMKS* = 000080000H;
    TAPE_DRIVE_GET_ABSOLUTE_BLK* = 000100000H;
    TAPE_DRIVE_GET_LOGICAL_BLK* = 000200000H;
    TAPE_DRIVE_SET_EOT_WZ_SIZE* = 000400000H;
    TAPE_DRIVE_EJECT_MEDIA* = 001000000H;
    TAPE_DRIVE_CLEAN_REQUESTS* = 002000000H;
    TAPE_DRIVE_SET_CMP_BOP_ONLY* = 004000000H;
    TAPE_DRIVE_RESERVED_BIT* = 080000000H;
    TAPE_DRIVE_LOAD_UNLOAD* = 080000001H;
    TAPE_DRIVE_TENSION* = 080000002H;
    TAPE_DRIVE_LOCK_UNLOCK* = 080000004H;
    TAPE_DRIVE_REWIND_IMMEDIATE* = 080000008H;
    TAPE_DRIVE_SET_BLOCK_SIZE* = 080000010H;
    TAPE_DRIVE_LOAD_UNLD_IMMED* = 080000020H;
    TAPE_DRIVE_TENSION_IMMED* = 080000040H;
    TAPE_DRIVE_LOCK_UNLK_IMMED* = 080000080H;
    TAPE_DRIVE_SET_ECC* = 080000100H;
    TAPE_DRIVE_SET_COMPRESSION* = 080000200H;
    TAPE_DRIVE_SET_PADDING* = 080000400H;
    TAPE_DRIVE_SET_REPORT_SMKS* = 080000800H;
    TAPE_DRIVE_ABSOLUTE_BLK* = 080001000H;
    TAPE_DRIVE_ABS_BLK_IMMED* = 080002000H;
    TAPE_DRIVE_LOGICAL_BLK* = 080004000H;
    TAPE_DRIVE_LOG_BLK_IMMED* = 080008000H;
    TAPE_DRIVE_END_OF_DATA* = 080010000H;
    TAPE_DRIVE_RELATIVE_BLKS* = 080020000H;
    TAPE_DRIVE_FILEMARKS* = 080040000H;
    TAPE_DRIVE_SEQUENTIAL_FMKS* = 080080000H;
    TAPE_DRIVE_SETMARKS* = 080100000H;
    TAPE_DRIVE_SEQUENTIAL_SMKS* = 080200000H;
    TAPE_DRIVE_REVERSE_POSITION* = 080400000H;
    TAPE_DRIVE_SPACE_IMMEDIATE* = 080800000H;
    TAPE_DRIVE_WRITE_SETMARKS* = 081000000H;
    TAPE_DRIVE_WRITE_FILEMARKS* = 082000000H;
    TAPE_DRIVE_WRITE_SHORT_FMKS* = 084000000H;
    TAPE_DRIVE_WRITE_LONG_FMKS* = 088000000H;
    TAPE_DRIVE_WRITE_MARK_IMMED* = 090000000H;
    TAPE_DRIVE_FORMAT* = 0A0000000H;
    TAPE_DRIVE_FORMAT_IMMEDIATE* = 0C0000000H;
    TAPE_DRIVE_HIGH_FEATURES* = 080000000H;
    TAPE_FIXED_PARTITIONS* = 000000000H;
    TAPE_SELECT_PARTITIONS* = 000000001H;
    TAPE_INITIATOR_PARTITIONS* = 000000002H;
    HFILE_ERROR* = 0FFFFFFFFH;
    DM_UPDATE* = 000000001H;
    DM_COPY* = 000000002H;
    DM_PROMPT* = 000000004H;
    DM_MODIFY* = 000000008H;
    DM_IN_BUFFER* = 000000008H;
    DM_IN_PROMPT* = 000000004H;
    DM_OUT_BUFFER* = 000000002H;
    DM_OUT_DEFAULT* = 000000001H;
    DC_FIELDS* = 000000001H;
    DC_PAPERS* = 000000002H;
    DC_PAPERSIZE* = 000000003H;
    DC_MINEXTENT* = 000000004H;
    DC_MAXEXTENT* = 000000005H;
    DC_BINS* = 000000006H;
    DC_DUPLEX* = 000000007H;
    DC_SIZE* = 000000008H;
    DC_EXTRA* = 000000009H;
    DC_VERSION* = 00000000AH;
    DC_DRIVER* = 00000000BH;
    DC_BINNAMES* = 00000000CH;
    DC_ENUMRESOLUTIONS* = 00000000DH;
    DC_FILEDEPENDENCIES* = 00000000EH;
    DC_TRUETYPE* = 00000000FH;
    DC_PAPERNAMES* = 000000010H;
    DC_ORIENTATION* = 000000011H;
    DC_COPIES* = 000000012H;
    INVALID_HANDLE_VALUE* = 0FFFFFFFFH;
    INVALID_FILE_SIZE* = 0FFFFFFFFH;
    FILE_BEGIN* = 000000000H;
    FILE_CURRENT* = 000000001H;
    FILE_END* = 000000002H;
    TIME_ZONE_ID_INVALID* = 0FFFFFFFFH;
    WAIT_FAILED* = 0FFFFFFFFH;
    WAIT_OBJECT_0* = 000000000H;
    WAIT_ABANDONED* = 000000080H;
    WAIT_ABANDONED_0* = 000000080H;
    WAIT_TIMEOUT* = 000000102H;
    WAIT_IO_COMPLETION* = 0000000C0H;
    STILL_ACTIVE* = 000000103H;
    EXCEPTION_ACCESS_VIOLATION* = 0C0000005H;
    EXCEPTION_DATATYPE_MISALIGNMENT* = 080000002H;
    EXCEPTION_BREAKPOINT* = 080000003H;
    EXCEPTION_SINGLE_STEP* = 080000004H;
    EXCEPTION_ARRAY_BOUNDS_EXCEEDED* = 0C000008CH;
    EXCEPTION_FLT_DENORMAL_OPERAND* = 0C000008DH;
    EXCEPTION_FLT_DIVIDE_BY_ZERO* = 0C000008EH;
    EXCEPTION_FLT_INEXACT_RESULT* = 0C000008FH;
    EXCEPTION_FLT_INVALID_OPERATION* = 0C0000090H;
    EXCEPTION_FLT_OVERFLOW* = 0C0000091H;
    EXCEPTION_FLT_STACK_CHECK* = 0C0000092H;
    EXCEPTION_FLT_UNDERFLOW* = 0C0000093H;
    EXCEPTION_INT_DIVIDE_BY_ZERO* = 0C0000094H;
    EXCEPTION_INT_OVERFLOW* = 0C0000095H;
    EXCEPTION_PRIV_INSTRUCTION* = 0C0000096H;
    EXCEPTION_IN_PAGE_ERROR* = 0C0000006H;
    EXCEPTION_ILLEGAL_INSTRUCTION* = 0C000001DH;
    EXCEPTION_NONCONTINUABLE_EXCEPTION* = 0C0000025H;
    EXCEPTION_STACK_OVERFLOW* = 0C00000FDH;
    EXCEPTION_INVALID_DISPOSITION* = 0C0000026H;
    EXCEPTION_GUARD_PAGE* = 080000001H;
    EXCEPTION_INVALID_HANDLE* = 0C0000008H;
    CONTROL_C_EXIT* = 0C000013AH;
    FILE_FLAG_WRITE_THROUGH* = 080000000H;
    FILE_FLAG_OVERLAPPED* = 040000000H;
    FILE_FLAG_NO_BUFFERING* = 020000000H;
    FILE_FLAG_RANDOM_ACCESS* = 010000000H;
    FILE_FLAG_SEQUENTIAL_SCAN* = 008000000H;
    FILE_FLAG_DELETE_ON_CLOSE* = 004000000H;
    FILE_FLAG_BACKUP_SEMANTICS* = 002000000H;
    FILE_FLAG_POSIX_SEMANTICS* = 001000000H;
    FILE_FLAG_OPEN_REPARSE_POINT* = 000200000H;
    FILE_FLAG_OPEN_NO_RECALL* = 000100000H;
    CREATE_NEW* = 000000001H;
    CREATE_ALWAYS* = 000000002H;
    OPEN_EXISTING* = 000000003H;
    OPEN_ALWAYS* = 000000004H;
    TRUNCATE_EXISTING* = 000000005H;
    PROGRESS_CONTINUE* = 000000000H;
    PROGRESS_CANCEL* = 000000001H;
    PROGRESS_STOP* = 000000002H;
    PROGRESS_QUIET* = 000000003H;
    CALLBACK_CHUNK_FINISHED* = 000000000H;
    CALLBACK_STREAM_SWITCH* = 000000001H;
    COPY_FILE_FAIL_IF_EXISTS* = 000000001H;
    COPY_FILE_RESTARTABLE* = 000000002H;
    COPY_FILE_OPEN_SOURCE_FOR_WRITE* = 000000004H;
    PIPE_ACCESS_INBOUND* = 000000001H;
    PIPE_ACCESS_OUTBOUND* = 000000002H;
    PIPE_ACCESS_DUPLEX* = 000000003H;
    PIPE_CLIENT_END* = 000000000H;
    PIPE_SERVER_END* = 000000001H;
    PIPE_WAIT* = 000000000H;
    PIPE_NOWAIT* = 000000001H;
    PIPE_READMODE_BYTE* = 000000000H;
    PIPE_READMODE_MESSAGE* = 000000002H;
    PIPE_TYPE_BYTE* = 000000000H;
    PIPE_TYPE_MESSAGE* = 000000004H;
    PIPE_UNLIMITED_INSTANCES* = 0000000FFH;
    SECURITY_ANONYMOUS* = 000000000H;
    SECURITY_IDENTIFICATION* = 000010000H;
    SECURITY_IMPERSONATION* = 000020000H;
    SECURITY_DELEGATION* = 000030000H;
    SECURITY_CONTEXT_TRACKING* = 000040000H;
    SECURITY_EFFECTIVE_ONLY* = 000080000H;
    SECURITY_SQOS_PRESENT* = 000100000H;
    SECURITY_VALID_SQOS_FLAGS* = 0001F0000H;
    MUTEX_MODIFY_STATE* = 000000001H;
    MUTEX_ALL_ACCESS* = 0001F0001H;
    SP_SERIALCOMM* = 000000001H;
    PST_UNSPECIFIED* = 000000000H;
    PST_RS232* = 000000001H;
    PST_PARALLELPORT* = 000000002H;
    PST_RS422* = 000000003H;
    PST_RS423* = 000000004H;
    PST_RS449* = 000000005H;
    PST_MODEM* = 000000006H;
    PST_FAX* = 000000021H;
    PST_SCANNER* = 000000022H;
    PST_NETWORK_BRIDGE* = 000000100H;
    PST_LAT* = 000000101H;
    PST_TCPIP_TELNET* = 000000102H;
    PST_X25* = 000000103H;
    PCF_DTRDSR* = 000000001H;
    PCF_RTSCTS* = 000000002H;
    PCF_RLSD* = 000000004H;
    PCF_PARITY_CHECK* = 000000008H;
    PCF_XONXOFF* = 000000010H;
    PCF_SETXCHAR* = 000000020H;
    PCF_TOTALTIMEOUTS* = 000000040H;
    PCF_INTTIMEOUTS* = 000000080H;
    PCF_SPECIALCHARS* = 000000100H;
    PCF_16BITMODE* = 000000200H;
    SP_PARITY* = 000000001H;
    SP_BAUD* = 000000002H;
    SP_DATABITS* = 000000004H;
    SP_STOPBITS* = 000000008H;
    SP_HANDSHAKING* = 000000010H;
    SP_PARITY_CHECK* = 000000020H;
    SP_RLSD* = 000000040H;
    BAUD_075* = 000000001H;
    BAUD_110* = 000000002H;
    BAUD_134_5* = 000000004H;
    BAUD_150* = 000000008H;
    BAUD_300* = 000000010H;
    BAUD_600* = 000000020H;
    BAUD_1200* = 000000040H;
    BAUD_1800* = 000000080H;
    BAUD_2400* = 000000100H;
    BAUD_4800* = 000000200H;
    BAUD_7200* = 000000400H;
    BAUD_9600* = 000000800H;
    BAUD_14400* = 000001000H;
    BAUD_19200* = 000002000H;
    BAUD_38400* = 000004000H;
    BAUD_56K* = 000008000H;
    BAUD_128K* = 000010000H;
    BAUD_115200* = 000020000H;
    BAUD_57600* = 000040000H;
    BAUD_USER* = 010000000H;
    DATABITS_5* = 000000001H;
    DATABITS_6* = 000000002H;
    DATABITS_7* = 000000004H;
    DATABITS_8* = 000000008H;
    DATABITS_16* = 000000010H;
    DATABITS_16X* = 000000020H;
    STOPBITS_10* = 000000001H;
    STOPBITS_15* = 000000002H;
    STOPBITS_20* = 000000004H;
    PARITY_NONE* = 000000100H;
    PARITY_ODD* = 000000200H;
    PARITY_EVEN* = 000000400H;
    PARITY_MARK* = 000000800H;
    PARITY_SPACE* = 000001000H;
    COMMPROP_INITIALIZED* = 0E73CF52EH;
    DTR_CONTROL_DISABLE* = 000000000H;
    DTR_CONTROL_ENABLE* = 000000001H;
    DTR_CONTROL_HANDSHAKE* = 000000002H;
    RTS_CONTROL_DISABLE* = 000000000H;
    RTS_CONTROL_ENABLE* = 000000001H;
    RTS_CONTROL_HANDSHAKE* = 000000002H;
    RTS_CONTROL_TOGGLE* = 000000003H;
    GMEM_FIXED* = 000000000H;
    GMEM_MOVEABLE* = 000000002H;
    GMEM_NOCOMPACT* = 000000010H;
    GMEM_NODISCARD* = 000000020H;
    GMEM_ZEROINIT* = 000000040H;
    GMEM_MODIFY* = 000000080H;
    GMEM_DISCARDABLE* = 000000100H;
    GMEM_NOT_BANKED* = 000001000H;
    GMEM_SHARE* = 000002000H;
    GMEM_DDESHARE* = 000002000H;
    GMEM_NOTIFY* = 000004000H;
    GMEM_LOWER* = 000001000H;
    GMEM_VALID_FLAGS* = 000007F72H;
    GMEM_INVALID_HANDLE* = 000008000H;
    GHND* = 000000042H;
    GPTR* = 000000040H;
    GMEM_DISCARDED* = 000004000H;
    GMEM_LOCKCOUNT* = 0000000FFH;
    LMEM_FIXED* = 000000000H;
    LMEM_MOVEABLE* = 000000002H;
    LMEM_NOCOMPACT* = 000000010H;
    LMEM_NODISCARD* = 000000020H;
    LMEM_ZEROINIT* = 000000040H;
    LMEM_MODIFY* = 000000080H;
    LMEM_DISCARDABLE* = 000000F00H;
    LMEM_VALID_FLAGS* = 000000F72H;
    LMEM_INVALID_HANDLE* = 000008000H;
    LHND* = 000000042H;
    LPTR* = 000000040H;
    NONZEROLHND* = 000000002H;
    NONZEROLPTR* = 000000000H;
    LMEM_DISCARDED* = 000004000H;
    LMEM_LOCKCOUNT* = 0000000FFH;
    DEBUG_PROCESS* = 000000001H;
    DEBUG_ONLY_THIS_PROCESS* = 000000002H;
    CREATE_SUSPENDED* = 000000004H;
    DETACHED_PROCESS* = 000000008H;
    CREATE_NEW_CONSOLE* = 000000010H;
    NORMAL_PRIORITY_CLASS* = 000000020H;
    IDLE_PRIORITY_CLASS* = 000000040H;
    HIGH_PRIORITY_CLASS* = 000000080H;
    REALTIME_PRIORITY_CLASS* = 000000100H;
    CREATE_NEW_PROCESS_GROUP* = 000000200H;
    CREATE_UNICODE_ENVIRONMENT* = 000000400H;
    CREATE_SEPARATE_WOW_VDM* = 000000800H;
    CREATE_SHARED_WOW_VDM* = 000001000H;
    CREATE_FORCEDOS* = 000002000H;
    CREATE_DEFAULT_ERROR_MODE* = 004000000H;
    CREATE_NO_WINDOW* = 008000000H;
    PROFILE_USER* = 010000000H;
    PROFILE_KERNEL* = 020000000H;
    PROFILE_SERVER* = 040000000H;
    THREAD_PRIORITY_LOWEST* = 0FFFFFFFEH;
    THREAD_PRIORITY_BELOW_NORMAL* = 0FFFFFFFFH;
    THREAD_PRIORITY_NORMAL* = 000000000H;
    THREAD_PRIORITY_HIGHEST* = 000000002H;
    THREAD_PRIORITY_ABOVE_NORMAL* = 000000001H;
    THREAD_PRIORITY_ERROR_RETURN* = 07FFFFFFFH;
    THREAD_PRIORITY_TIME_CRITICAL* = 00000000FH;
    THREAD_PRIORITY_IDLE* = 0FFFFFFF1H;
    EXCEPTION_DEBUG_EVENT* = 000000001H;
    CREATE_THREAD_DEBUG_EVENT* = 000000002H;
    CREATE_PROCESS_DEBUG_EVENT* = 000000003H;
    EXIT_THREAD_DEBUG_EVENT* = 000000004H;
    EXIT_PROCESS_DEBUG_EVENT* = 000000005H;
    LOAD_DLL_DEBUG_EVENT* = 000000006H;
    UNLOAD_DLL_DEBUG_EVENT* = 000000007H;
    OUTPUT_DEBUG_STRING_EVENT* = 000000008H;
    RIP_EVENT* = 000000009H;
    DRIVE_UNKNOWN* = 000000000H;
    DRIVE_NO_ROOT_DIR* = 000000001H;
    DRIVE_REMOVABLE* = 000000002H;
    DRIVE_FIXED* = 000000003H;
    DRIVE_REMOTE* = 000000004H;
    DRIVE_CDROM* = 000000005H;
    DRIVE_RAMDISK* = 000000006H;
    FILE_TYPE_UNKNOWN* = 000000000H;
    FILE_TYPE_DISK* = 000000001H;
    FILE_TYPE_CHAR* = 000000002H;
    FILE_TYPE_PIPE* = 000000003H;
    FILE_TYPE_REMOTE* = 000008000H;
    STD_INPUT_HANDLE* = 0FFFFFFF6H;
    STD_OUTPUT_HANDLE* = 0FFFFFFF5H;
    STD_ERROR_HANDLE* = 0FFFFFFF4H;
    NOPARITY* = 000000000H;
    ODDPARITY* = 000000001H;
    EVENPARITY* = 000000002H;
    MARKPARITY* = 000000003H;
    SPACEPARITY* = 000000004H;
    ONESTOPBIT* = 000000000H;
    ONE5STOPBITS* = 000000001H;
    TWOSTOPBITS* = 000000002H;
    IGNORE* = 000000000H;
    INFINITE* = 0FFFFFFFFH;
    CBR_110* = 00000006EH;
    CBR_300* = 00000012CH;
    CBR_600* = 000000258H;
    CBR_1200* = 0000004B0H;
    CBR_2400* = 000000960H;
    CBR_4800* = 0000012C0H;
    CBR_9600* = 000002580H;
    CBR_14400* = 000003840H;
    CBR_19200* = 000004B00H;
    CBR_38400* = 000009600H;
    CBR_56000* = 00000DAC0H;
    CBR_57600* = 00000E100H;
    CBR_115200* = 00001C200H;
    CBR_128000* = 00001F400H;
    CBR_256000* = 00003E800H;
    CE_RXOVER* = 000000001H;
    CE_OVERRUN* = 000000002H;
    CE_RXPARITY* = 000000004H;
    CE_FRAME* = 000000008H;
    CE_BREAK* = 000000010H;
    CE_TXFULL* = 000000100H;
    CE_PTO* = 000000200H;
    CE_IOE* = 000000400H;
    CE_DNS* = 000000800H;
    CE_OOP* = 000001000H;
    CE_MODE* = 000008000H;
    IE_BADID* = 0FFFFFFFFH;
    IE_OPEN* = 0FFFFFFFEH;
    IE_NOPEN* = 0FFFFFFFDH;
    IE_MEMORY* = 0FFFFFFFCH;
    IE_DEFAULT* = 0FFFFFFFBH;
    IE_HARDWARE* = 0FFFFFFF6H;
    IE_BYTESIZE* = 0FFFFFFF5H;
    IE_BAUDRATE* = 0FFFFFFF4H;
    EV_RXCHAR* = 000000001H;
    EV_RXFLAG* = 000000002H;
    EV_TXEMPTY* = 000000004H;
    EV_CTS* = 000000008H;
    EV_DSR* = 000000010H;
    EV_RLSD* = 000000020H;
    EV_BREAK* = 000000040H;
    EV_ERR* = 000000080H;
    EV_RING* = 000000100H;
    EV_PERR* = 000000200H;
    EV_RX80FULL* = 000000400H;
    EV_EVENT1* = 000000800H;
    EV_EVENT2* = 000001000H;
    SETXOFF* = 000000001H;
    SETXON* = 000000002H;
    SETRTS* = 000000003H;
    CLRRTS* = 000000004H;
    SETDTR* = 000000005H;
    CLRDTR* = 000000006H;
    RESETDEV* = 000000007H;
    SETBREAK* = 000000008H;
    CLRBREAK* = 000000009H;
    PURGE_TXABORT* = 000000001H;
    PURGE_RXABORT* = 000000002H;
    PURGE_TXCLEAR* = 000000004H;
    PURGE_RXCLEAR* = 000000008H;
    LPTx* = 000000080H;
    MS_CTS_ON* = 000000010H;
    MS_DSR_ON* = 000000020H;
    MS_RING_ON* = 000000040H;
    MS_RLSD_ON* = 000000080H;
    S_QUEUEEMPTY* = 000000000H;
    S_THRESHOLD* = 000000001H;
    S_ALLTHRESHOLD* = 000000002H;
    S_NORMAL* = 000000000H;
    S_LEGATO* = 000000001H;
    S_STACCATO* = 000000002H;
    S_PERIOD512* = 000000000H;
    S_PERIOD1024* = 000000001H;
    S_PERIOD2048* = 000000002H;
    S_PERIODVOICE* = 000000003H;
    S_WHITE512* = 000000004H;
    S_WHITE1024* = 000000005H;
    S_WHITE2048* = 000000006H;
    S_WHITEVOICE* = 000000007H;
    S_SERDVNA* = 0FFFFFFFFH;
    S_SEROFM* = 0FFFFFFFEH;
    S_SERMACT* = 0FFFFFFFDH;
    S_SERQFUL* = 0FFFFFFFCH;
    S_SERBDNT* = 0FFFFFFFBH;
    S_SERDLN* = 0FFFFFFFAH;
    S_SERDCC* = 0FFFFFFF9H;
    S_SERDTP* = 0FFFFFFF8H;
    S_SERDVL* = 0FFFFFFF7H;
    S_SERDMD* = 0FFFFFFF6H;
    S_SERDSH* = 0FFFFFFF5H;
    S_SERDPT* = 0FFFFFFF4H;
    S_SERDFQ* = 0FFFFFFF3H;
    S_SERDDR* = 0FFFFFFF2H;
    S_SERDSR* = 0FFFFFFF1H;
    S_SERDST* = 0FFFFFFF0H;
    NMPWAIT_WAIT_FOREVER* = 0FFFFFFFFH;
    NMPWAIT_NOWAIT* = 000000001H;
    NMPWAIT_USE_DEFAULT_WAIT* = 000000000H;
    FS_CASE_IS_PRESERVED* = 000000002H;
    FS_CASE_SENSITIVE* = 000000001H;
    FS_UNICODE_STORED_ON_DISK* = 000000004H;
    FS_PERSISTENT_ACLS* = 000000008H;
    FS_VOL_IS_COMPRESSED* = 000008000H;
    FS_FILE_COMPRESSION* = 000000010H;
    FILE_MAP_COPY* = 000000001H;
    FILE_MAP_WRITE* = 000000002H;
    FILE_MAP_READ* = 000000004H;
    FILE_MAP_ALL_ACCESS* = 0000F001FH;
    OF_READ* = 000000000H;
    OF_WRITE* = 000000001H;
    OF_READWRITE* = 000000002H;
    OF_SHARE_COMPAT* = 000000000H;
    OF_SHARE_EXCLUSIVE* = 000000010H;
    OF_SHARE_DENY_WRITE* = 000000020H;
    OF_SHARE_DENY_READ* = 000000030H;
    OF_SHARE_DENY_NONE* = 000000040H;
    OF_PARSE* = 000000100H;
    OF_DELETE* = 000000200H;
    OF_VERIFY* = 000000400H;
    OF_CANCEL* = 000000800H;
    OF_CREATE* = 000001000H;
    OF_PROMPT* = 000002000H;
    OF_EXIST* = 000004000H;
    OF_REOPEN* = 000008000H;
    OFS_MAXPATHNAME* = 000000080H;
    MAXINTATOM* = 00000C000H;
    INVALID_ATOM* = 000000000H;
    PROCESS_HEAP_REGION* = 000000001H;
    PROCESS_HEAP_UNCOMMITTED_RANGE* = 000000002H;
    PROCESS_HEAP_ENTRY_BUSY* = 000000004H;
    PROCESS_HEAP_ENTRY_MOVEABLE* = 000000010H;
    PROCESS_HEAP_ENTRY_DDESHARE* = 000000020H;
    SCS_32BIT_BINARY* = 000000000H;
    SCS_DOS_BINARY* = 000000001H;
    SCS_WOW_BINARY* = 000000002H;
    SCS_PIF_BINARY* = 000000003H;
    SCS_POSIX_BINARY* = 000000004H;
    SCS_OS216_BINARY* = 000000005H;
    SEM_FAILCRITICALERRORS* = 000000001H;
    SEM_NOGPFAULTERRORBOX* = 000000002H;
    SEM_NOALIGNMENTFAULTEXCEPT* = 000000004H;
    SEM_NOOPENFILEERRORBOX* = 000008000H;
    LOCKFILE_FAIL_IMMEDIATELY* = 000000001H;
    LOCKFILE_EXCLUSIVE_LOCK* = 000000002H;
    HANDLE_FLAG_INHERIT* = 000000001H;
    HANDLE_FLAG_PROTECT_FROM_CLOSE* = 000000002H;
    HINSTANCE_ERROR* = 000000020H;
    GET_TAPE_MEDIA_INFORMATION* = 000000000H;
    GET_TAPE_DRIVE_INFORMATION* = 000000001H;
    SET_TAPE_MEDIA_INFORMATION* = 000000000H;
    SET_TAPE_DRIVE_INFORMATION* = 000000001H;
    FORMAT_MESSAGE_ALLOCATE_BUFFER* = 000000100H;
    FORMAT_MESSAGE_IGNORE_INSERTS* = 000000200H;
    FORMAT_MESSAGE_FROM_STRING* = 000000400H;
    FORMAT_MESSAGE_FROM_HMODULE* = 000000800H;
    FORMAT_MESSAGE_FROM_SYSTEM* = 000001000H;
    FORMAT_MESSAGE_ARGUMENT_ARRAY* = 000002000H;
    FORMAT_MESSAGE_MAX_WIDTH_MASK* = 0000000FFH;
    EFS_USE_RECOVERY_KEYS* = 000000001H;
    CREATE_FOR_IMPORT* = 000000001H;
    CREATE_FOR_DIR* = 000000002H;
    TLS_OUT_OF_INDEXES* = 0FFFFFFFFH;
    BACKUP_INVALID* = 000000000H;
    BACKUP_DATA* = 000000001H;
    BACKUP_EA_DATA* = 000000002H;
    BACKUP_SECURITY_DATA* = 000000003H;
    BACKUP_ALTERNATE_DATA* = 000000004H;
    BACKUP_LINK* = 000000005H;
    BACKUP_PROPERTY_DATA* = 000000006H;
    BACKUP_OBJECT_ID* = 000000007H;
    BACKUP_REPARSE_DATA* = 000000008H;
    BACKUP_SPARSE_BLOCK* = 000000009H;
    STREAM_NORMAL_ATTRIBUTE* = 000000000H;
    STREAM_MODIFIED_WHEN_READ* = 000000001H;
    STREAM_CONTAINS_SECURITY* = 000000002H;
    STREAM_CONTAINS_PROPERTIES* = 000000004H;
    STREAM_SPARSE_ATTRIBUTE* = 000000008H;
    STARTF_USESHOWWINDOW* = 000000001H;
    STARTF_USESIZE* = 000000002H;
    STARTF_USEPOSITION* = 000000004H;
    STARTF_USECOUNTCHARS* = 000000008H;
    STARTF_USEFILLATTRIBUTE* = 000000010H;
    STARTF_RUNFULLSCREEN* = 000000020H;
    STARTF_FORCEONFEEDBACK* = 000000040H;
    STARTF_FORCEOFFFEEDBACK* = 000000080H;
    STARTF_USESTDHANDLES* = 000000100H;
    STARTF_USEHOTKEY* = 000000200H;
    SHUTDOWN_NORETRY* = 000000001H;
    DONT_RESOLVE_DLL_REFERENCES* = 000000001H;
    LOAD_LIBRARY_AS_DATAFILE* = 000000002H;
    LOAD_WITH_ALTERED_SEARCH_PATH* = 000000008H;
    DDD_RAW_TARGET_PATH* = 000000001H;
    DDD_REMOVE_DEFINITION* = 000000002H;
    DDD_EXACT_MATCH_ON_REMOVE* = 000000004H;
    DDD_NO_BROADCAST_SYSTEM* = 000000008H;
    FIND_FIRST_EX_CASE_SENSITIVE* = 000000001H;
    MOVEFILE_REPLACE_EXISTING* = 000000001H;
    MOVEFILE_COPY_ALLOWED* = 000000002H;
    MOVEFILE_DELAY_UNTIL_REBOOT* = 000000004H;
    MOVEFILE_WRITE_THROUGH* = 000000008H;
    MAX_COMPUTERNAME_LENGTH* = 00000000FH;
    LOGON32_LOGON_INTERACTIVE* = 000000002H;
    LOGON32_LOGON_NETWORK* = 000000003H;
    LOGON32_LOGON_BATCH* = 000000004H;
    LOGON32_LOGON_SERVICE* = 000000005H;
    LOGON32_PROVIDER_DEFAULT* = 000000000H;
    LOGON32_PROVIDER_WINNT35* = 000000001H;
    LOGON32_PROVIDER_WINNT40* = 000000002H;
    HW_PROFILE_GUIDLEN* = 000000027H;
    MAX_PROFILE_LEN* = 000000050H;
    DOCKINFO_UNDOCKED* = 000000001H;
    DOCKINFO_DOCKED* = 000000002H;
    DOCKINFO_USER_SUPPLIED* = 000000004H;
    DOCKINFO_USER_UNDOCKED* = 000000005H;
    DOCKINFO_USER_DOCKED* = 000000006H;
    VER_PLATFORM_WIN32s* = 000000000H;
    VER_PLATFORM_WIN32_WINDOWS* = 000000001H;
    VER_PLATFORM_WIN32_NT* = 000000002H;
    FACILITY_WINDOWS* = 000000008H;
    FACILITY_STORAGE* = 000000003H;
    FACILITY_SSPI* = 000000009H;
    FACILITY_SETUPAPI* = 00000000FH;
    FACILITY_RPC* = 000000001H;
    FACILITY_WIN32* = 000000007H;
    FACILITY_CONTROL* = 00000000AH;
    FACILITY_NULL* = 000000000H;
    FACILITY_MSMQ* = 00000000EH;
    FACILITY_MEDIASERVER* = 00000000DH;
    FACILITY_INTERNET* = 00000000CH;
    FACILITY_ITF* = 000000004H;
    FACILITY_DISPATCH* = 000000002H;
    FACILITY_CERT* = 00000000BH;
    ERROR_SUCCESS* = 000000000H;
    NO_ERROR* = 000000000H;
    ERROR_INVALID_FUNCTION* = 000000001H;
    ERROR_FILE_NOT_FOUND* = 000000002H;
    ERROR_PATH_NOT_FOUND* = 000000003H;
    ERROR_TOO_MANY_OPEN_FILES* = 000000004H;
    ERROR_ACCESS_DENIED* = 000000005H;
    ERROR_INVALID_HANDLE* = 000000006H;
    ERROR_ARENA_TRASHED* = 000000007H;
    ERROR_NOT_ENOUGH_MEMORY* = 000000008H;
    ERROR_INVALID_BLOCK* = 000000009H;
    ERROR_BAD_ENVIRONMENT* = 00000000AH;
    ERROR_BAD_FORMAT* = 00000000BH;
    ERROR_INVALID_ACCESS* = 00000000CH;
    ERROR_INVALID_DATA* = 00000000DH;
    ERROR_OUTOFMEMORY* = 00000000EH;
    ERROR_INVALID_DRIVE* = 00000000FH;
    ERROR_CURRENT_DIRECTORY* = 000000010H;
    ERROR_NOT_SAME_DEVICE* = 000000011H;
    ERROR_NO_MORE_FILES* = 000000012H;
    ERROR_WRITE_PROTECT* = 000000013H;
    ERROR_BAD_UNIT* = 000000014H;
    ERROR_NOT_READY* = 000000015H;
    ERROR_BAD_COMMAND* = 000000016H;
    ERROR_CRC* = 000000017H;
    ERROR_BAD_LENGTH* = 000000018H;
    ERROR_SEEK* = 000000019H;
    ERROR_NOT_DOS_DISK* = 00000001AH;
    ERROR_SECTOR_NOT_FOUND* = 00000001BH;
    ERROR_OUT_OF_PAPER* = 00000001CH;
    ERROR_WRITE_FAULT* = 00000001DH;
    ERROR_READ_FAULT* = 00000001EH;
    ERROR_GEN_FAILURE* = 00000001FH;
    ERROR_SHARING_VIOLATION* = 000000020H;
    ERROR_LOCK_VIOLATION* = 000000021H;
    ERROR_WRONG_DISK* = 000000022H;
    ERROR_SHARING_BUFFER_EXCEEDED* = 000000024H;
    ERROR_HANDLE_EOF* = 000000026H;
    ERROR_HANDLE_DISK_FULL* = 000000027H;
    ERROR_NOT_SUPPORTED* = 000000032H;
    ERROR_REM_NOT_LIST* = 000000033H;
    ERROR_DUP_NAME* = 000000034H;
    ERROR_BAD_NETPATH* = 000000035H;
    ERROR_NETWORK_BUSY* = 000000036H;
    ERROR_DEV_NOT_EXIST* = 000000037H;
    ERROR_TOO_MANY_CMDS* = 000000038H;
    ERROR_ADAP_HDW_ERR* = 000000039H;
    ERROR_BAD_NET_RESP* = 00000003AH;
    ERROR_UNEXP_NET_ERR* = 00000003BH;
    ERROR_BAD_REM_ADAP* = 00000003CH;
    ERROR_PRINTQ_FULL* = 00000003DH;
    ERROR_NO_SPOOL_SPACE* = 00000003EH;
    ERROR_PRINT_CANCELLED* = 00000003FH;
    ERROR_NETNAME_DELETED* = 000000040H;
    ERROR_NETWORK_ACCESS_DENIED* = 000000041H;
    ERROR_BAD_DEV_TYPE* = 000000042H;
    ERROR_BAD_NET_NAME* = 000000043H;
    ERROR_TOO_MANY_NAMES* = 000000044H;
    ERROR_TOO_MANY_SESS* = 000000045H;
    ERROR_SHARING_PAUSED* = 000000046H;
    ERROR_REQ_NOT_ACCEP* = 000000047H;
    ERROR_REDIR_PAUSED* = 000000048H;
    ERROR_FILE_EXISTS* = 000000050H;
    ERROR_CANNOT_MAKE* = 000000052H;
    ERROR_FAIL_I24* = 000000053H;
    ERROR_OUT_OF_STRUCTURES* = 000000054H;
    ERROR_ALREADY_ASSIGNED* = 000000055H;
    ERROR_INVALID_PASSWORD* = 000000056H;
    ERROR_INVALID_PARAMETER* = 000000057H;
    ERROR_NET_WRITE_FAULT* = 000000058H;
    ERROR_NO_PROC_SLOTS* = 000000059H;
    ERROR_TOO_MANY_SEMAPHORES* = 000000064H;
    ERROR_EXCL_SEM_ALREADY_OWNED* = 000000065H;
    ERROR_SEM_IS_SET* = 000000066H;
    ERROR_TOO_MANY_SEM_REQUESTS* = 000000067H;
    ERROR_INVALID_AT_INTERRUPT_TIME* = 000000068H;
    ERROR_SEM_OWNER_DIED* = 000000069H;
    ERROR_SEM_USER_LIMIT* = 00000006AH;
    ERROR_DISK_CHANGE* = 00000006BH;
    ERROR_DRIVE_LOCKED* = 00000006CH;
    ERROR_BROKEN_PIPE* = 00000006DH;
    ERROR_OPEN_FAILED* = 00000006EH;
    ERROR_BUFFER_OVERFLOW* = 00000006FH;
    ERROR_DISK_FULL* = 000000070H;
    ERROR_NO_MORE_SEARCH_HANDLES* = 000000071H;
    ERROR_INVALID_TARGET_HANDLE* = 000000072H;
    ERROR_INVALID_CATEGORY* = 000000075H;
    ERROR_INVALID_VERIFY_SWITCH* = 000000076H;
    ERROR_BAD_DRIVER_LEVEL* = 000000077H;
    ERROR_CALL_NOT_IMPLEMENTED* = 000000078H;
    ERROR_SEM_TIMEOUT* = 000000079H;
    ERROR_INSUFFICIENT_BUFFER* = 00000007AH;
    ERROR_INVALID_NAME* = 00000007BH;
    ERROR_INVALID_LEVEL* = 00000007CH;
    ERROR_NO_VOLUME_LABEL* = 00000007DH;
    ERROR_MOD_NOT_FOUND* = 00000007EH;
    ERROR_PROC_NOT_FOUND* = 00000007FH;
    ERROR_WAIT_NO_CHILDREN* = 000000080H;
    ERROR_CHILD_NOT_COMPLETE* = 000000081H;
    ERROR_DIRECT_ACCESS_HANDLE* = 000000082H;
    ERROR_NEGATIVE_SEEK* = 000000083H;
    ERROR_SEEK_ON_DEVICE* = 000000084H;
    ERROR_IS_JOIN_TARGET* = 000000085H;
    ERROR_IS_JOINED* = 000000086H;
    ERROR_IS_SUBSTED* = 000000087H;
    ERROR_NOT_JOINED* = 000000088H;
    ERROR_NOT_SUBSTED* = 000000089H;
    ERROR_JOIN_TO_JOIN* = 00000008AH;
    ERROR_SUBST_TO_SUBST* = 00000008BH;
    ERROR_JOIN_TO_SUBST* = 00000008CH;
    ERROR_SUBST_TO_JOIN* = 00000008DH;
    ERROR_BUSY_DRIVE* = 00000008EH;
    ERROR_SAME_DRIVE* = 00000008FH;
    ERROR_DIR_NOT_ROOT* = 000000090H;
    ERROR_DIR_NOT_EMPTY* = 000000091H;
    ERROR_IS_SUBST_PATH* = 000000092H;
    ERROR_IS_JOIN_PATH* = 000000093H;
    ERROR_PATH_BUSY* = 000000094H;
    ERROR_IS_SUBST_TARGET* = 000000095H;
    ERROR_SYSTEM_TRACE* = 000000096H;
    ERROR_INVALID_EVENT_COUNT* = 000000097H;
    ERROR_TOO_MANY_MUXWAITERS* = 000000098H;
    ERROR_INVALID_LIST_FORMAT* = 000000099H;
    ERROR_LABEL_TOO_LONG* = 00000009AH;
    ERROR_TOO_MANY_TCBS* = 00000009BH;
    ERROR_SIGNAL_REFUSED* = 00000009CH;
    ERROR_DISCARDED* = 00000009DH;
    ERROR_NOT_LOCKED* = 00000009EH;
    ERROR_BAD_THREADID_ADDR* = 00000009FH;
    ERROR_BAD_ARGUMENTS* = 0000000A0H;
    ERROR_BAD_PATHNAME* = 0000000A1H;
    ERROR_SIGNAL_PENDING* = 0000000A2H;
    ERROR_MAX_THRDS_REACHED* = 0000000A4H;
    ERROR_LOCK_FAILED* = 0000000A7H;
    ERROR_BUSY* = 0000000AAH;
    ERROR_CANCEL_VIOLATION* = 0000000ADH;
    ERROR_ATOMIC_LOCKS_NOT_SUPPORTED* = 0000000AEH;
    ERROR_INVALID_SEGMENT_NUMBER* = 0000000B4H;
    ERROR_INVALID_ORDINAL* = 0000000B6H;
    ERROR_ALREADY_EXISTS* = 0000000B7H;
    ERROR_INVALID_FLAG_NUMBER* = 0000000BAH;
    ERROR_SEM_NOT_FOUND* = 0000000BBH;
    ERROR_INVALID_STARTING_CODESEG* = 0000000BCH;
    ERROR_INVALID_STACKSEG* = 0000000BDH;
    ERROR_INVALID_MODULETYPE* = 0000000BEH;
    ERROR_INVALID_EXE_SIGNATURE* = 0000000BFH;
    ERROR_EXE_MARKED_INVALID* = 0000000C0H;
    ERROR_BAD_EXE_FORMAT* = 0000000C1H;
    ERROR_ITERATED_DATA_EXCEEDS_64k* = 0000000C2H;
    ERROR_INVALID_MINALLOCSIZE* = 0000000C3H;
    ERROR_DYNLINK_FROM_INVALID_RING* = 0000000C4H;
    ERROR_IOPL_NOT_ENABLED* = 0000000C5H;
    ERROR_INVALID_SEGDPL* = 0000000C6H;
    ERROR_AUTODATASEG_EXCEEDS_64k* = 0000000C7H;
    ERROR_RING2SEG_MUST_BE_MOVABLE* = 0000000C8H;
    ERROR_RELOC_CHAIN_XEEDS_SEGLIM* = 0000000C9H;
    ERROR_INFLOOP_IN_RELOC_CHAIN* = 0000000CAH;
    ERROR_ENVVAR_NOT_FOUND* = 0000000CBH;
    ERROR_NO_SIGNAL_SENT* = 0000000CDH;
    ERROR_FILENAME_EXCED_RANGE* = 0000000CEH;
    ERROR_RING2_STACK_IN_USE* = 0000000CFH;
    ERROR_META_EXPANSION_TOO_LONG* = 0000000D0H;
    ERROR_INVALID_SIGNAL_NUMBER* = 0000000D1H;
    ERROR_THREAD_1_INACTIVE* = 0000000D2H;
    ERROR_LOCKED* = 0000000D4H;
    ERROR_TOO_MANY_MODULES* = 0000000D6H;
    ERROR_NESTING_NOT_ALLOWED* = 0000000D7H;
    ERROR_EXE_MACHINE_TYPE_MISMATCH* = 0000000D8H;
    ERROR_BAD_PIPE* = 0000000E6H;
    ERROR_PIPE_BUSY* = 0000000E7H;
    ERROR_NO_DATA* = 0000000E8H;
    ERROR_PIPE_NOT_CONNECTED* = 0000000E9H;
    ERROR_MORE_DATA* = 0000000EAH;
    ERROR_VC_DISCONNECTED* = 0000000F0H;
    ERROR_INVALID_EA_NAME* = 0000000FEH;
    ERROR_EA_LIST_INCONSISTENT* = 0000000FFH;
    ERROR_NO_MORE_ITEMS* = 000000103H;
    ERROR_CANNOT_COPY* = 00000010AH;
    ERROR_DIRECTORY* = 00000010BH;
    ERROR_EAS_DIDNT_FIT* = 000000113H;
    ERROR_EA_FILE_CORRUPT* = 000000114H;
    ERROR_EA_TABLE_FULL* = 000000115H;
    ERROR_INVALID_EA_HANDLE* = 000000116H;
    ERROR_EAS_NOT_SUPPORTED* = 00000011AH;
    ERROR_NOT_OWNER* = 000000120H;
    ERROR_TOO_MANY_POSTS* = 00000012AH;
    ERROR_PARTIAL_COPY* = 00000012BH;
    ERROR_OPLOCK_NOT_GRANTED* = 00000012CH;
    ERROR_INVALID_OPLOCK_PROTOCOL* = 00000012DH;
    ERROR_MR_MID_NOT_FOUND* = 00000013DH;
    ERROR_INVALID_ADDRESS* = 0000001E7H;
    ERROR_ARITHMETIC_OVERFLOW* = 000000216H;
    ERROR_PIPE_CONNECTED* = 000000217H;
    ERROR_PIPE_LISTENING* = 000000218H;
    ERROR_EA_ACCESS_DENIED* = 0000003E2H;
    ERROR_OPERATION_ABORTED* = 0000003E3H;
    ERROR_IO_INCOMPLETE* = 0000003E4H;
    ERROR_IO_PENDING* = 0000003E5H;
    ERROR_NOACCESS* = 0000003E6H;
    ERROR_SWAPERROR* = 0000003E7H;
    ERROR_STACK_OVERFLOW* = 0000003E9H;
    ERROR_INVALID_MESSAGE* = 0000003EAH;
    ERROR_CAN_NOT_COMPLETE* = 0000003EBH;
    ERROR_INVALID_FLAGS* = 0000003ECH;
    ERROR_UNRECOGNIZED_VOLUME* = 0000003EDH;
    ERROR_FILE_INVALID* = 0000003EEH;
    ERROR_FULLSCREEN_MODE* = 0000003EFH;
    ERROR_NO_TOKEN* = 0000003F0H;
    ERROR_BADDB* = 0000003F1H;
    ERROR_BADKEY* = 0000003F2H;
    ERROR_CANTOPEN* = 0000003F3H;
    ERROR_CANTREAD* = 0000003F4H;
    ERROR_CANTWRITE* = 0000003F5H;
    ERROR_REGISTRY_RECOVERED* = 0000003F6H;
    ERROR_REGISTRY_CORRUPT* = 0000003F7H;
    ERROR_REGISTRY_IO_FAILED* = 0000003F8H;
    ERROR_NOT_REGISTRY_FILE* = 0000003F9H;
    ERROR_KEY_DELETED* = 0000003FAH;
    ERROR_NO_LOG_SPACE* = 0000003FBH;
    ERROR_KEY_HAS_CHILDREN* = 0000003FCH;
    ERROR_CHILD_MUST_BE_VOLATILE* = 0000003FDH;
    ERROR_NOTIFY_ENUM_DIR* = 0000003FEH;
    ERROR_DEPENDENT_SERVICES_RUNNING* = 00000041BH;
    ERROR_INVALID_SERVICE_CONTROL* = 00000041CH;
    ERROR_SERVICE_REQUEST_TIMEOUT* = 00000041DH;
    ERROR_SERVICE_NO_THREAD* = 00000041EH;
    ERROR_SERVICE_DATABASE_LOCKED* = 00000041FH;
    ERROR_SERVICE_ALREADY_RUNNING* = 000000420H;
    ERROR_INVALID_SERVICE_ACCOUNT* = 000000421H;
    ERROR_SERVICE_DISABLED* = 000000422H;
    ERROR_CIRCULAR_DEPENDENCY* = 000000423H;
    ERROR_SERVICE_DOES_NOT_EXIST* = 000000424H;
    ERROR_SERVICE_CANNOT_ACCEPT_CTRL* = 000000425H;
    ERROR_SERVICE_NOT_ACTIVE* = 000000426H;
    ERROR_FAILED_SERVICE_CONTROLLER_CONNECT* = 000000427H;
    ERROR_EXCEPTION_IN_SERVICE* = 000000428H;
    ERROR_DATABASE_DOES_NOT_EXIST* = 000000429H;
    ERROR_SERVICE_SPECIFIC_ERROR* = 00000042AH;
    ERROR_PROCESS_ABORTED* = 00000042BH;
    ERROR_SERVICE_DEPENDENCY_FAIL* = 00000042CH;
    ERROR_SERVICE_LOGON_FAILED* = 00000042DH;
    ERROR_SERVICE_START_HANG* = 00000042EH;
    ERROR_INVALID_SERVICE_LOCK* = 00000042FH;
    ERROR_SERVICE_MARKED_FOR_DELETE* = 000000430H;
    ERROR_SERVICE_EXISTS* = 000000431H;
    ERROR_ALREADY_RUNNING_LKG* = 000000432H;
    ERROR_SERVICE_DEPENDENCY_DELETED* = 000000433H;
    ERROR_BOOT_ALREADY_ACCEPTED* = 000000434H;
    ERROR_SERVICE_NEVER_STARTED* = 000000435H;
    ERROR_DUPLICATE_SERVICE_NAME* = 000000436H;
    ERROR_DIFFERENT_SERVICE_ACCOUNT* = 000000437H;
    ERROR_CANNOT_DETECT_DRIVER_FAILURE* = 000000438H;
    ERROR_CANNOT_DETECT_PROCESS_ABORT* = 000000439H;
    ERROR_NO_RECOVERY_PROGRAM* = 00000043AH;
    ERROR_END_OF_MEDIA* = 00000044CH;
    ERROR_FILEMARK_DETECTED* = 00000044DH;
    ERROR_BEGINNING_OF_MEDIA* = 00000044EH;
    ERROR_SETMARK_DETECTED* = 00000044FH;
    ERROR_NO_DATA_DETECTED* = 000000450H;
    ERROR_PARTITION_FAILURE* = 000000451H;
    ERROR_INVALID_BLOCK_LENGTH* = 000000452H;
    ERROR_DEVICE_NOT_PARTITIONED* = 000000453H;
    ERROR_UNABLE_TO_LOCK_MEDIA* = 000000454H;
    ERROR_UNABLE_TO_UNLOAD_MEDIA* = 000000455H;
    ERROR_MEDIA_CHANGED* = 000000456H;
    ERROR_BUS_RESET* = 000000457H;
    ERROR_NO_MEDIA_IN_DRIVE* = 000000458H;
    ERROR_NO_UNICODE_TRANSLATION* = 000000459H;
    ERROR_DLL_INIT_FAILED* = 00000045AH;
    ERROR_SHUTDOWN_IN_PROGRESS* = 00000045BH;
    ERROR_NO_SHUTDOWN_IN_PROGRESS* = 00000045CH;
    ERROR_IO_DEVICE* = 00000045DH;
    ERROR_SERIAL_NO_DEVICE* = 00000045EH;
    ERROR_IRQ_BUSY* = 00000045FH;
    ERROR_MORE_WRITES* = 000000460H;
    ERROR_COUNTER_TIMEOUT* = 000000461H;
    ERROR_FLOPPY_ID_MARK_NOT_FOUND* = 000000462H;
    ERROR_FLOPPY_WRONG_CYLINDER* = 000000463H;
    ERROR_FLOPPY_UNKNOWN_ERROR* = 000000464H;
    ERROR_FLOPPY_BAD_REGISTERS* = 000000465H;
    ERROR_DISK_RECALIBRATE_FAILED* = 000000466H;
    ERROR_DISK_OPERATION_FAILED* = 000000467H;
    ERROR_DISK_RESET_FAILED* = 000000468H;
    ERROR_EOM_OVERFLOW* = 000000469H;
    ERROR_NOT_ENOUGH_SERVER_MEMORY* = 00000046AH;
    ERROR_POSSIBLE_DEADLOCK* = 00000046BH;
    ERROR_MAPPED_ALIGNMENT* = 00000046CH;
    ERROR_SET_POWER_STATE_VETOED* = 000000474H;
    ERROR_SET_POWER_STATE_FAILED* = 000000475H;
    ERROR_TOO_MANY_LINKS* = 000000476H;
    ERROR_OLD_WIN_VERSION* = 00000047EH;
    ERROR_APP_WRONG_OS* = 00000047FH;
    ERROR_SINGLE_INSTANCE_APP* = 000000480H;
    ERROR_RMODE_APP* = 000000481H;
    ERROR_INVALID_DLL* = 000000482H;
    ERROR_NO_ASSOCIATION* = 000000483H;
    ERROR_DDE_FAIL* = 000000484H;
    ERROR_DLL_NOT_FOUND* = 000000485H;
    ERROR_NO_MORE_USER_HANDLES* = 000000486H;
    ERROR_MESSAGE_SYNC_ONLY* = 000000487H;
    ERROR_SOURCE_ELEMENT_EMPTY* = 000000488H;
    ERROR_DESTINATION_ELEMENT_FULL* = 000000489H;
    ERROR_ILLEGAL_ELEMENT_ADDRESS* = 00000048AH;
    ERROR_MAGAZINE_NOT_PRESENT* = 00000048BH;
    ERROR_DEVICE_REINITIALIZATION_NEEDED* = 00000048CH;
    ERROR_DEVICE_REQUIRES_CLEANING* = 00000048DH;
    ERROR_DEVICE_DOOR_OPEN* = 00000048EH;
    ERROR_DEVICE_NOT_CONNECTED* = 00000048FH;
    ERROR_NOT_FOUND* = 000000490H;
    ERROR_NO_MATCH* = 000000491H;
    ERROR_SET_NOT_FOUND* = 000000492H;
    ERROR_POINT_NOT_FOUND* = 000000493H;
    ERROR_NO_TRACKING_SERVICE* = 000000494H;
    ERROR_NO_VOLUME_ID* = 000000495H;
    ERROR_CONNECTED_OTHER_PASSWORD* = 00000083CH;
    ERROR_BAD_USERNAME* = 00000089AH;
    ERROR_NOT_CONNECTED* = 0000008CAH;
    ERROR_OPEN_FILES* = 000000961H;
    ERROR_ACTIVE_CONNECTIONS* = 000000962H;
    ERROR_DEVICE_IN_USE* = 000000964H;
    ERROR_BAD_DEVICE* = 0000004B0H;
    ERROR_CONNECTION_UNAVAIL* = 0000004B1H;
    ERROR_DEVICE_ALREADY_REMEMBERED* = 0000004B2H;
    ERROR_NO_NET_OR_BAD_PATH* = 0000004B3H;
    ERROR_BAD_PROVIDER* = 0000004B4H;
    ERROR_CANNOT_OPEN_PROFILE* = 0000004B5H;
    ERROR_BAD_PROFILE* = 0000004B6H;
    ERROR_NOT_CONTAINER* = 0000004B7H;
    ERROR_EXTENDED_ERROR* = 0000004B8H;
    ERROR_INVALID_GROUPNAME* = 0000004B9H;
    ERROR_INVALID_COMPUTERNAME* = 0000004BAH;
    ERROR_INVALID_EVENTNAME* = 0000004BBH;
    ERROR_INVALID_DOMAINNAME* = 0000004BCH;
    ERROR_INVALID_SERVICENAME* = 0000004BDH;
    ERROR_INVALID_NETNAME* = 0000004BEH;
    ERROR_INVALID_SHARENAME* = 0000004BFH;
    ERROR_INVALID_PASSWORDNAME* = 0000004C0H;
    ERROR_INVALID_MESSAGENAME* = 0000004C1H;
    ERROR_INVALID_MESSAGEDEST* = 0000004C2H;
    ERROR_SESSION_CREDENTIAL_CONFLICT* = 0000004C3H;
    ERROR_REMOTE_SESSION_LIMIT_EXCEEDED* = 0000004C4H;
    ERROR_DUP_DOMAINNAME* = 0000004C5H;
    ERROR_NO_NETWORK* = 0000004C6H;
    ERROR_CANCELLED* = 0000004C7H;
    ERROR_USER_MAPPED_FILE* = 0000004C8H;
    ERROR_CONNECTION_REFUSED* = 0000004C9H;
    ERROR_GRACEFUL_DISCONNECT* = 0000004CAH;
    ERROR_ADDRESS_ALREADY_ASSOCIATED* = 0000004CBH;
    ERROR_ADDRESS_NOT_ASSOCIATED* = 0000004CCH;
    ERROR_CONNECTION_INVALID* = 0000004CDH;
    ERROR_CONNECTION_ACTIVE* = 0000004CEH;
    ERROR_NETWORK_UNREACHABLE* = 0000004CFH;
    ERROR_HOST_UNREACHABLE* = 0000004D0H;
    ERROR_PROTOCOL_UNREACHABLE* = 0000004D1H;
    ERROR_PORT_UNREACHABLE* = 0000004D2H;
    ERROR_REQUEST_ABORTED* = 0000004D3H;
    ERROR_CONNECTION_ABORTED* = 0000004D4H;
    ERROR_RETRY* = 0000004D5H;
    ERROR_CONNECTION_COUNT_LIMIT* = 0000004D6H;
    ERROR_LOGIN_TIME_RESTRICTION* = 0000004D7H;
    ERROR_LOGIN_WKSTA_RESTRICTION* = 0000004D8H;
    ERROR_INCORRECT_ADDRESS* = 0000004D9H;
    ERROR_ALREADY_REGISTERED* = 0000004DAH;
    ERROR_SERVICE_NOT_FOUND* = 0000004DBH;
    ERROR_NOT_AUTHENTICATED* = 0000004DCH;
    ERROR_NOT_LOGGED_ON* = 0000004DDH;
    ERROR_CONTINUE* = 0000004DEH;
    ERROR_ALREADY_INITIALIZED* = 0000004DFH;
    ERROR_NO_MORE_DEVICES* = 0000004E0H;
    ERROR_NO_SUCH_SITE* = 0000004E1H;
    ERROR_DOMAIN_CONTROLLER_EXISTS* = 0000004E2H;
    ERROR_DS_NOT_INSTALLED* = 0000004E3H;
    ERROR_NOT_ALL_ASSIGNED* = 000000514H;
    ERROR_SOME_NOT_MAPPED* = 000000515H;
    ERROR_NO_QUOTAS_FOR_ACCOUNT* = 000000516H;
    ERROR_LOCAL_USER_SESSION_KEY* = 000000517H;
    ERROR_NULL_LM_PASSWORD* = 000000518H;
    ERROR_UNKNOWN_REVISION* = 000000519H;
    ERROR_REVISION_MISMATCH* = 00000051AH;
    ERROR_INVALID_OWNER* = 00000051BH;
    ERROR_INVALID_PRIMARY_GROUP* = 00000051CH;
    ERROR_NO_IMPERSONATION_TOKEN* = 00000051DH;
    ERROR_CANT_DISABLE_MANDATORY* = 00000051EH;
    ERROR_NO_LOGON_SERVERS* = 00000051FH;
    ERROR_NO_SUCH_LOGON_SESSION* = 000000520H;
    ERROR_NO_SUCH_PRIVILEGE* = 000000521H;
    ERROR_PRIVILEGE_NOT_HELD* = 000000522H;
    ERROR_INVALID_ACCOUNT_NAME* = 000000523H;
    ERROR_USER_EXISTS* = 000000524H;
    ERROR_NO_SUCH_USER* = 000000525H;
    ERROR_GROUP_EXISTS* = 000000526H;
    ERROR_NO_SUCH_GROUP* = 000000527H;
    ERROR_MEMBER_IN_GROUP* = 000000528H;
    ERROR_MEMBER_NOT_IN_GROUP* = 000000529H;
    ERROR_LAST_ADMIN* = 00000052AH;
    ERROR_WRONG_PASSWORD* = 00000052BH;
    ERROR_ILL_FORMED_PASSWORD* = 00000052CH;
    ERROR_PASSWORD_RESTRICTION* = 00000052DH;
    ERROR_LOGON_FAILURE* = 00000052EH;
    ERROR_ACCOUNT_RESTRICTION* = 00000052FH;
    ERROR_INVALID_LOGON_HOURS* = 000000530H;
    ERROR_INVALID_WORKSTATION* = 000000531H;
    ERROR_PASSWORD_EXPIRED* = 000000532H;
    ERROR_ACCOUNT_DISABLED* = 000000533H;
    ERROR_NONE_MAPPED* = 000000534H;
    ERROR_TOO_MANY_LUIDS_REQUESTED* = 000000535H;
    ERROR_LUIDS_EXHAUSTED* = 000000536H;
    ERROR_INVALID_SUB_AUTHORITY* = 000000537H;
    ERROR_INVALID_ACL* = 000000538H;
    ERROR_INVALID_SID* = 000000539H;
    ERROR_INVALID_SECURITY_DESCR* = 00000053AH;
    ERROR_BAD_INHERITANCE_ACL* = 00000053CH;
    ERROR_SERVER_DISABLED* = 00000053DH;
    ERROR_SERVER_NOT_DISABLED* = 00000053EH;
    ERROR_INVALID_ID_AUTHORITY* = 00000053FH;
    ERROR_ALLOTTED_SPACE_EXCEEDED* = 000000540H;
    ERROR_INVALID_GROUP_ATTRIBUTES* = 000000541H;
    ERROR_BAD_IMPERSONATION_LEVEL* = 000000542H;
    ERROR_CANT_OPEN_ANONYMOUS* = 000000543H;
    ERROR_BAD_VALIDATION_CLASS* = 000000544H;
    ERROR_BAD_TOKEN_TYPE* = 000000545H;
    ERROR_NO_SECURITY_ON_OBJECT* = 000000546H;
    ERROR_CANT_ACCESS_DOMAIN_INFO* = 000000547H;
    ERROR_INVALID_SERVER_STATE* = 000000548H;
    ERROR_INVALID_DOMAIN_STATE* = 000000549H;
    ERROR_INVALID_DOMAIN_ROLE* = 00000054AH;
    ERROR_NO_SUCH_DOMAIN* = 00000054BH;
    ERROR_DOMAIN_EXISTS* = 00000054CH;
    ERROR_DOMAIN_LIMIT_EXCEEDED* = 00000054DH;
    ERROR_INTERNAL_DB_CORRUPTION* = 00000054EH;
    ERROR_INTERNAL_ERROR* = 00000054FH;
    ERROR_GENERIC_NOT_MAPPED* = 000000550H;
    ERROR_BAD_DESCRIPTOR_FORMAT* = 000000551H;
    ERROR_NOT_LOGON_PROCESS* = 000000552H;
    ERROR_LOGON_SESSION_EXISTS* = 000000553H;
    ERROR_NO_SUCH_PACKAGE* = 000000554H;
    ERROR_BAD_LOGON_SESSION_STATE* = 000000555H;
    ERROR_LOGON_SESSION_COLLISION* = 000000556H;
    ERROR_INVALID_LOGON_TYPE* = 000000557H;
    ERROR_CANNOT_IMPERSONATE* = 000000558H;
    ERROR_RXACT_INVALID_STATE* = 000000559H;
    ERROR_RXACT_COMMIT_FAILURE* = 00000055AH;
    ERROR_SPECIAL_ACCOUNT* = 00000055BH;
    ERROR_SPECIAL_GROUP* = 00000055CH;
    ERROR_SPECIAL_USER* = 00000055DH;
    ERROR_MEMBERS_PRIMARY_GROUP* = 00000055EH;
    ERROR_TOKEN_ALREADY_IN_USE* = 00000055FH;
    ERROR_NO_SUCH_ALIAS* = 000000560H;
    ERROR_MEMBER_NOT_IN_ALIAS* = 000000561H;
    ERROR_MEMBER_IN_ALIAS* = 000000562H;
    ERROR_ALIAS_EXISTS* = 000000563H;
    ERROR_LOGON_NOT_GRANTED* = 000000564H;
    ERROR_TOO_MANY_SECRETS* = 000000565H;
    ERROR_SECRET_TOO_LONG* = 000000566H;
    ERROR_INTERNAL_DB_ERROR* = 000000567H;
    ERROR_TOO_MANY_CONTEXT_IDS* = 000000568H;
    ERROR_LOGON_TYPE_NOT_GRANTED* = 000000569H;
    ERROR_NT_CROSS_ENCRYPTION_REQUIRED* = 00000056AH;
    ERROR_NO_SUCH_MEMBER* = 00000056BH;
    ERROR_INVALID_MEMBER* = 00000056CH;
    ERROR_TOO_MANY_SIDS* = 00000056DH;
    ERROR_LM_CROSS_ENCRYPTION_REQUIRED* = 00000056EH;
    ERROR_NO_INHERITANCE* = 00000056FH;
    ERROR_FILE_CORRUPT* = 000000570H;
    ERROR_DISK_CORRUPT* = 000000571H;
    ERROR_NO_USER_SESSION_KEY* = 000000572H;
    ERROR_LICENSE_QUOTA_EXCEEDED* = 000000573H;
    ERROR_INVALID_WINDOW_HANDLE* = 000000578H;
    ERROR_INVALID_MENU_HANDLE* = 000000579H;
    ERROR_INVALID_CURSOR_HANDLE* = 00000057AH;
    ERROR_INVALID_ACCEL_HANDLE* = 00000057BH;
    ERROR_INVALID_HOOK_HANDLE* = 00000057CH;
    ERROR_INVALID_DWP_HANDLE* = 00000057DH;
    ERROR_TLW_WITH_WSCHILD* = 00000057EH;
    ERROR_CANNOT_FIND_WND_CLASS* = 00000057FH;
    ERROR_WINDOW_OF_OTHER_THREAD* = 000000580H;
    ERROR_HOTKEY_ALREADY_REGISTERED* = 000000581H;
    ERROR_CLASS_ALREADY_EXISTS* = 000000582H;
    ERROR_CLASS_DOES_NOT_EXIST* = 000000583H;
    ERROR_CLASS_HAS_WINDOWS* = 000000584H;
    ERROR_INVALID_INDEX* = 000000585H;
    ERROR_INVALID_ICON_HANDLE* = 000000586H;
    ERROR_PRIVATE_DIALOG_INDEX* = 000000587H;
    ERROR_LISTBOX_ID_NOT_FOUND* = 000000588H;
    ERROR_NO_WILDCARD_CHARACTERS* = 000000589H;
    ERROR_CLIPBOARD_NOT_OPEN* = 00000058AH;
    ERROR_HOTKEY_NOT_REGISTERED* = 00000058BH;
    ERROR_WINDOW_NOT_DIALOG* = 00000058CH;
    ERROR_CONTROL_ID_NOT_FOUND* = 00000058DH;
    ERROR_INVALID_COMBOBOX_MESSAGE* = 00000058EH;
    ERROR_WINDOW_NOT_COMBOBOX* = 00000058FH;
    ERROR_INVALID_EDIT_HEIGHT* = 000000590H;
    ERROR_DC_NOT_FOUND* = 000000591H;
    ERROR_INVALID_HOOK_FILTER* = 000000592H;
    ERROR_INVALID_FILTER_PROC* = 000000593H;
    ERROR_HOOK_NEEDS_HMOD* = 000000594H;
    ERROR_GLOBAL_ONLY_HOOK* = 000000595H;
    ERROR_JOURNAL_HOOK_SET* = 000000596H;
    ERROR_HOOK_NOT_INSTALLED* = 000000597H;
    ERROR_INVALID_LB_MESSAGE* = 000000598H;
    ERROR_SETCOUNT_ON_BAD_LB* = 000000599H;
    ERROR_LB_WITHOUT_TABSTOPS* = 00000059AH;
    ERROR_DESTROY_OBJECT_OF_OTHER_THREAD* = 00000059BH;
    ERROR_CHILD_WINDOW_MENU* = 00000059CH;
    ERROR_NO_SYSTEM_MENU* = 00000059DH;
    ERROR_INVALID_MSGBOX_STYLE* = 00000059EH;
    ERROR_INVALID_SPI_VALUE* = 00000059FH;
    ERROR_SCREEN_ALREADY_LOCKED* = 0000005A0H;
    ERROR_HWNDS_HAVE_DIFF_PARENT* = 0000005A1H;
    ERROR_NOT_CHILD_WINDOW* = 0000005A2H;
    ERROR_INVALID_GW_COMMAND* = 0000005A3H;
    ERROR_INVALID_THREAD_ID* = 0000005A4H;
    ERROR_NON_MDICHILD_WINDOW* = 0000005A5H;
    ERROR_POPUP_ALREADY_ACTIVE* = 0000005A6H;
    ERROR_NO_SCROLLBARS* = 0000005A7H;
    ERROR_INVALID_SCROLLBAR_RANGE* = 0000005A8H;
    ERROR_INVALID_SHOWWIN_COMMAND* = 0000005A9H;
    ERROR_NO_SYSTEM_RESOURCES* = 0000005AAH;
    ERROR_NONPAGED_SYSTEM_RESOURCES* = 0000005ABH;
    ERROR_PAGED_SYSTEM_RESOURCES* = 0000005ACH;
    ERROR_WORKING_SET_QUOTA* = 0000005ADH;
    ERROR_PAGEFILE_QUOTA* = 0000005AEH;
    ERROR_COMMITMENT_LIMIT* = 0000005AFH;
    ERROR_MENU_ITEM_NOT_FOUND* = 0000005B0H;
    ERROR_INVALID_KEYBOARD_HANDLE* = 0000005B1H;
    ERROR_HOOK_TYPE_NOT_ALLOWED* = 0000005B2H;
    ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION* = 0000005B3H;
    ERROR_TIMEOUT* = 0000005B4H;
    ERROR_INVALID_MONITOR_HANDLE* = 0000005B5H;
    ERROR_EVENTLOG_FILE_CORRUPT* = 0000005DCH;
    ERROR_EVENTLOG_CANT_START* = 0000005DDH;
    ERROR_LOG_FILE_FULL* = 0000005DEH;
    ERROR_EVENTLOG_FILE_CHANGED* = 0000005DFH;
    ERROR_INSTALL_SERVICE* = 000000641H;
    ERROR_INSTALL_USEREXIT* = 000000642H;
    ERROR_INSTALL_FAILURE* = 000000643H;
    ERROR_INSTALL_SUSPEND* = 000000644H;
    ERROR_UNKNOWN_PRODUCT* = 000000645H;
    ERROR_UNKNOWN_FEATURE* = 000000646H;
    ERROR_UNKNOWN_COMPONENT* = 000000647H;
    ERROR_UNKNOWN_PROPERTY* = 000000648H;
    ERROR_INVALID_HANDLE_STATE* = 000000649H;
    ERROR_BAD_CONFIGURATION* = 00000064AH;
    ERROR_INDEX_ABSENT* = 00000064BH;
    ERROR_INSTALL_SOURCE_ABSENT* = 00000064CH;
    ERROR_BAD_DATABASE_VERSION* = 00000064DH;
    ERROR_PRODUCT_UNINSTALLED* = 00000064EH;
    ERROR_BAD_QUERY_SYNTAX* = 00000064FH;
    ERROR_INVALID_FIELD* = 000000650H;
    RPC_S_INVALID_STRING_BINDING* = 0000006A4H;
    RPC_S_WRONG_KIND_OF_BINDING* = 0000006A5H;
    RPC_S_INVALID_BINDING* = 0000006A6H;
    RPC_S_PROTSEQ_NOT_SUPPORTED* = 0000006A7H;
    RPC_S_INVALID_RPC_PROTSEQ* = 0000006A8H;
    RPC_S_INVALID_STRING_UUID* = 0000006A9H;
    RPC_S_INVALID_ENDPOINT_FORMAT* = 0000006AAH;
    RPC_S_INVALID_NET_ADDR* = 0000006ABH;
    RPC_S_NO_ENDPOINT_FOUND* = 0000006ACH;
    RPC_S_INVALID_TIMEOUT* = 0000006ADH;
    RPC_S_OBJECT_NOT_FOUND* = 0000006AEH;
    RPC_S_ALREADY_REGISTERED* = 0000006AFH;
    RPC_S_TYPE_ALREADY_REGISTERED* = 0000006B0H;
    RPC_S_ALREADY_LISTENING* = 0000006B1H;
    RPC_S_NO_PROTSEQS_REGISTERED* = 0000006B2H;
    RPC_S_NOT_LISTENING* = 0000006B3H;
    RPC_S_UNKNOWN_MGR_TYPE* = 0000006B4H;
    RPC_S_UNKNOWN_IF* = 0000006B5H;
    RPC_S_NO_BINDINGS* = 0000006B6H;
    RPC_S_NO_PROTSEQS* = 0000006B7H;
    RPC_S_CANT_CREATE_ENDPOINT* = 0000006B8H;
    RPC_S_OUT_OF_RESOURCES* = 0000006B9H;
    RPC_S_SERVER_UNAVAILABLE* = 0000006BAH;
    RPC_S_SERVER_TOO_BUSY* = 0000006BBH;
    RPC_S_INVALID_NETWORK_OPTIONS* = 0000006BCH;
    RPC_S_NO_CALL_ACTIVE* = 0000006BDH;
    RPC_S_CALL_FAILED* = 0000006BEH;
    RPC_S_CALL_FAILED_DNE* = 0000006BFH;
    RPC_S_PROTOCOL_ERROR* = 0000006C0H;
    RPC_S_UNSUPPORTED_TRANS_SYN* = 0000006C2H;
    RPC_S_UNSUPPORTED_TYPE* = 0000006C4H;
    RPC_S_INVALID_TAG* = 0000006C5H;
    RPC_S_INVALID_BOUND* = 0000006C6H;
    RPC_S_NO_ENTRY_NAME* = 0000006C7H;
    RPC_S_INVALID_NAME_SYNTAX* = 0000006C8H;
    RPC_S_UNSUPPORTED_NAME_SYNTAX* = 0000006C9H;
    RPC_S_UUID_NO_ADDRESS* = 0000006CBH;
    RPC_S_DUPLICATE_ENDPOINT* = 0000006CCH;
    RPC_S_UNKNOWN_AUTHN_TYPE* = 0000006CDH;
    RPC_S_MAX_CALLS_TOO_SMALL* = 0000006CEH;
    RPC_S_STRING_TOO_LONG* = 0000006CFH;
    RPC_S_PROTSEQ_NOT_FOUND* = 0000006D0H;
    RPC_S_PROCNUM_OUT_OF_RANGE* = 0000006D1H;
    RPC_S_BINDING_HAS_NO_AUTH* = 0000006D2H;
    RPC_S_UNKNOWN_AUTHN_SERVICE* = 0000006D3H;
    RPC_S_UNKNOWN_AUTHN_LEVEL* = 0000006D4H;
    RPC_S_INVALID_AUTH_IDENTITY* = 0000006D5H;
    RPC_S_UNKNOWN_AUTHZ_SERVICE* = 0000006D6H;
    EPT_S_INVALID_ENTRY* = 0000006D7H;
    EPT_S_CANT_PERFORM_OP* = 0000006D8H;
    EPT_S_NOT_REGISTERED* = 0000006D9H;
    RPC_S_NOTHING_TO_EXPORT* = 0000006DAH;
    RPC_S_INCOMPLETE_NAME* = 0000006DBH;
    RPC_S_INVALID_VERS_OPTION* = 0000006DCH;
    RPC_S_NO_MORE_MEMBERS* = 0000006DDH;
    RPC_S_NOT_ALL_OBJS_UNEXPORTED* = 0000006DEH;
    RPC_S_INTERFACE_NOT_FOUND* = 0000006DFH;
    RPC_S_ENTRY_ALREADY_EXISTS* = 0000006E0H;
    RPC_S_ENTRY_NOT_FOUND* = 0000006E1H;
    RPC_S_NAME_SERVICE_UNAVAILABLE* = 0000006E2H;
    RPC_S_INVALID_NAF_ID* = 0000006E3H;
    RPC_S_CANNOT_SUPPORT* = 0000006E4H;
    RPC_S_NO_CONTEXT_AVAILABLE* = 0000006E5H;
    RPC_S_INTERNAL_ERROR* = 0000006E6H;
    RPC_S_ZERO_DIVIDE* = 0000006E7H;
    RPC_S_ADDRESS_ERROR* = 0000006E8H;
    RPC_S_FP_DIV_ZERO* = 0000006E9H;
    RPC_S_FP_UNDERFLOW* = 0000006EAH;
    RPC_S_FP_OVERFLOW* = 0000006EBH;
    RPC_X_NO_MORE_ENTRIES* = 0000006ECH;
    RPC_X_SS_CHAR_TRANS_OPEN_FAIL* = 0000006EDH;
    RPC_X_SS_CHAR_TRANS_SHORT_FILE* = 0000006EEH;
    RPC_X_SS_IN_NULL_CONTEXT* = 0000006EFH;
    RPC_X_SS_CONTEXT_DAMAGED* = 0000006F1H;
    RPC_X_SS_HANDLES_MISMATCH* = 0000006F2H;
    RPC_X_SS_CANNOT_GET_CALL_HANDLE* = 0000006F3H;
    RPC_X_NULL_REF_POINTER* = 0000006F4H;
    RPC_X_ENUM_VALUE_OUT_OF_RANGE* = 0000006F5H;
    RPC_X_BYTE_COUNT_TOO_SMALL* = 0000006F6H;
    RPC_X_BAD_STUB_DATA* = 0000006F7H;
    ERROR_INVALID_USER_BUFFER* = 0000006F8H;
    ERROR_UNRECOGNIZED_MEDIA* = 0000006F9H;
    ERROR_NO_TRUST_LSA_SECRET* = 0000006FAH;
    ERROR_NO_TRUST_SAM_ACCOUNT* = 0000006FBH;
    ERROR_TRUSTED_DOMAIN_FAILURE* = 0000006FCH;
    ERROR_TRUSTED_RELATIONSHIP_FAILURE* = 0000006FDH;
    ERROR_TRUST_FAILURE* = 0000006FEH;
    RPC_S_CALL_IN_PROGRESS* = 0000006FFH;
    ERROR_NETLOGON_NOT_STARTED* = 000000700H;
    ERROR_ACCOUNT_EXPIRED* = 000000701H;
    ERROR_REDIRECTOR_HAS_OPEN_HANDLES* = 000000702H;
    ERROR_PRINTER_DRIVER_ALREADY_INSTALLED* = 000000703H;
    ERROR_UNKNOWN_PORT* = 000000704H;
    ERROR_UNKNOWN_PRINTER_DRIVER* = 000000705H;
    ERROR_UNKNOWN_PRINTPROCESSOR* = 000000706H;
    ERROR_INVALID_SEPARATOR_FILE* = 000000707H;
    ERROR_INVALID_PRIORITY* = 000000708H;
    ERROR_INVALID_PRINTER_NAME* = 000000709H;
    ERROR_PRINTER_ALREADY_EXISTS* = 00000070AH;
    ERROR_INVALID_PRINTER_COMMAND* = 00000070BH;
    ERROR_INVALID_DATATYPE* = 00000070CH;
    ERROR_INVALID_ENVIRONMENT* = 00000070DH;
    RPC_S_NO_MORE_BINDINGS* = 00000070EH;
    ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT* = 00000070FH;
    ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT* = 000000710H;
    ERROR_NOLOGON_SERVER_TRUST_ACCOUNT* = 000000711H;
    ERROR_DOMAIN_TRUST_INCONSISTENT* = 000000712H;
    ERROR_SERVER_HAS_OPEN_HANDLES* = 000000713H;
    ERROR_RESOURCE_DATA_NOT_FOUND* = 000000714H;
    ERROR_RESOURCE_TYPE_NOT_FOUND* = 000000715H;
    ERROR_RESOURCE_NAME_NOT_FOUND* = 000000716H;
    ERROR_RESOURCE_LANG_NOT_FOUND* = 000000717H;
    ERROR_NOT_ENOUGH_QUOTA* = 000000718H;
    RPC_S_NO_INTERFACES* = 000000719H;
    RPC_S_CALL_CANCELLED* = 00000071AH;
    RPC_S_BINDING_INCOMPLETE* = 00000071BH;
    RPC_S_COMM_FAILURE* = 00000071CH;
    RPC_S_UNSUPPORTED_AUTHN_LEVEL* = 00000071DH;
    RPC_S_NO_PRINC_NAME* = 00000071EH;
    RPC_S_NOT_RPC_ERROR* = 00000071FH;
    RPC_S_UUID_LOCAL_ONLY* = 000000720H;
    RPC_S_SEC_PKG_ERROR* = 000000721H;
    RPC_S_NOT_CANCELLED* = 000000722H;
    RPC_X_INVALID_ES_ACTION* = 000000723H;
    RPC_X_WRONG_ES_VERSION* = 000000724H;
    RPC_X_WRONG_STUB_VERSION* = 000000725H;
    RPC_X_INVALID_PIPE_OBJECT* = 000000726H;
    RPC_X_WRONG_PIPE_ORDER* = 000000727H;
    RPC_X_WRONG_PIPE_VERSION* = 000000728H;
    RPC_S_GROUP_MEMBER_NOT_FOUND* = 00000076AH;
    EPT_S_CANT_CREATE* = 00000076BH;
    RPC_S_INVALID_OBJECT* = 00000076CH;
    ERROR_INVALID_TIME* = 00000076DH;
    ERROR_INVALID_FORM_NAME* = 00000076EH;
    ERROR_INVALID_FORM_SIZE* = 00000076FH;
    ERROR_ALREADY_WAITING* = 000000770H;
    ERROR_PRINTER_DELETED* = 000000771H;
    ERROR_INVALID_PRINTER_STATE* = 000000772H;
    ERROR_PASSWORD_MUST_CHANGE* = 000000773H;
    ERROR_DOMAIN_CONTROLLER_NOT_FOUND* = 000000774H;
    ERROR_ACCOUNT_LOCKED_OUT* = 000000775H;
    OR_INVALID_OXID* = 000000776H;
    OR_INVALID_OID* = 000000777H;
    OR_INVALID_SET* = 000000778H;
    RPC_S_SEND_INCOMPLETE* = 000000779H;
    RPC_S_INVALID_ASYNC_HANDLE* = 00000077AH;
    RPC_S_INVALID_ASYNC_CALL* = 00000077BH;
    RPC_X_PIPE_CLOSED* = 00000077CH;
    RPC_X_PIPE_DISCIPLINE_ERROR* = 00000077DH;
    RPC_X_PIPE_EMPTY* = 00000077EH;
    ERROR_NO_SITENAME* = 00000077FH;
    ERROR_CANT_ACCESS_FILE* = 000000780H;
    ERROR_CANT_RESOLVE_FILENAME* = 000000781H;
    ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY* = 000000782H;
    ERROR_DS_NO_ATTRIBUTE_OR_VALUE* = 000000783H;
    ERROR_DS_INVALID_ATTRIBUTE_SYNTAX* = 000000784H;
    ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED* = 000000785H;
    ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS* = 000000786H;
    ERROR_DS_BUSY* = 000000787H;
    ERROR_DS_UNAVAILABLE* = 000000788H;
    ERROR_DS_NO_RIDS_ALLOCATED* = 000000789H;
    ERROR_DS_NO_MORE_RIDS* = 00000078AH;
    ERROR_DS_INCORRECT_ROLE_OWNER* = 00000078BH;
    ERROR_DS_RIDMGR_INIT_ERROR* = 00000078CH;
    ERROR_DS_OBJ_CLASS_VIOLATION* = 00000078DH;
    ERROR_DS_CANT_ON_NON_LEAF* = 00000078EH;
    ERROR_DS_CANT_ON_RDN* = 00000078FH;
    ERROR_DS_CANT_MOD_OBJ_CLASS* = 000000790H;
    ERROR_DS_CROSS_DOM_MOVE_ERROR* = 000000791H;
    ERROR_DS_GC_NOT_AVAILABLE* = 000000792H;
    ERROR_NO_BROWSER_SERVERS_FOUND* = 0000017E6H;
    ERROR_INVALID_PIXEL_FORMAT* = 0000007D0H;
    ERROR_BAD_DRIVER* = 0000007D1H;
    ERROR_INVALID_WINDOW_STYLE* = 0000007D2H;
    ERROR_METAFILE_NOT_SUPPORTED* = 0000007D3H;
    ERROR_TRANSFORM_NOT_SUPPORTED* = 0000007D4H;
    ERROR_CLIPPING_NOT_SUPPORTED* = 0000007D5H;
    ERROR_INVALID_CMM* = 0000008FCH;
    ERROR_INVALID_PROFILE* = 0000008FDH;
    ERROR_TAG_NOT_FOUND* = 0000008FEH;
    ERROR_TAG_NOT_PRESENT* = 0000008FFH;
    ERROR_DUPLICATE_TAG* = 000000900H;
    ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE* = 000000901H;
    ERROR_PROFILE_NOT_FOUND* = 000000902H;
    ERROR_INVALID_COLORSPACE* = 000000903H;
    ERROR_ICM_NOT_ENABLED* = 000000904H;
    ERROR_DELETING_ICM_XFORM* = 000000905H;
    ERROR_INVALID_TRANSFORM* = 000000906H;
    ERROR_UNKNOWN_PRINT_MONITOR* = 000000BB8H;
    ERROR_PRINTER_DRIVER_IN_USE* = 000000BB9H;
    ERROR_SPOOL_FILE_NOT_FOUND* = 000000BBAH;
    ERROR_SPL_NO_STARTDOC* = 000000BBBH;
    ERROR_SPL_NO_ADDJOB* = 000000BBCH;
    ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED* = 000000BBDH;
    ERROR_PRINT_MONITOR_ALREADY_INSTALLED* = 000000BBEH;
    ERROR_INVALID_PRINT_MONITOR* = 000000BBFH;
    ERROR_PRINT_MONITOR_IN_USE* = 000000BC0H;
    ERROR_PRINTER_HAS_JOBS_QUEUED* = 000000BC1H;
    ERROR_SUCCESS_REBOOT_REQUIRED* = 000000BC2H;
    ERROR_SUCCESS_RESTART_REQUIRED* = 000000BC3H;
    ERROR_WINS_INTERNAL* = 000000FA0H;
    ERROR_CAN_NOT_DEL_LOCAL_WINS* = 000000FA1H;
    ERROR_STATIC_INIT* = 000000FA2H;
    ERROR_INC_BACKUP* = 000000FA3H;
    ERROR_FULL_BACKUP* = 000000FA4H;
    ERROR_REC_NON_EXISTENT* = 000000FA5H;
    ERROR_RPL_NOT_ALLOWED* = 000000FA6H;
    ERROR_DHCP_ADDRESS_CONFLICT* = 000001004H;
    ERROR_WMI_GUID_NOT_FOUND* = 000001068H;
    ERROR_WMI_INSTANCE_NOT_FOUND* = 000001069H;
    ERROR_WMI_ITEMID_NOT_FOUND* = 00000106AH;
    ERROR_WMI_TRY_AGAIN* = 00000106BH;
    ERROR_WMI_DP_NOT_FOUND* = 00000106CH;
    ERROR_WMI_UNRESOLVED_INSTANCE_REF* = 00000106DH;
    ERROR_WMI_ALREADY_ENABLED* = 00000106EH;
    ERROR_WMI_GUID_DISCONNECTED* = 00000106FH;
    ERROR_WMI_SERVER_UNAVAILABLE* = 000001070H;
    ERROR_WMI_DP_FAILED* = 000001071H;
    ERROR_WMI_INVALID_MOF* = 000001072H;
    ERROR_WMI_INVALID_REGINFO* = 000001073H;
    ERROR_INVALID_MEDIA* = 0000010CCH;
    ERROR_INVALID_LIBRARY* = 0000010CDH;
    ERROR_INVALID_MEDIA_POOL* = 0000010CEH;
    ERROR_DRIVE_MEDIA_MISMATCH* = 0000010CFH;
    ERROR_MEDIA_OFFLINE* = 0000010D0H;
    ERROR_LIBRARY_OFFLINE* = 0000010D1H;
    ERROR_EMPTY* = 0000010D2H;
    ERROR_NOT_EMPTY* = 0000010D3H;
    ERROR_MEDIA_UNAVAILABLE* = 0000010D4H;
    ERROR_RESOURCE_DISABLED* = 0000010D5H;
    ERROR_INVALID_CLEANER* = 0000010D6H;
    ERROR_UNABLE_TO_CLEAN* = 0000010D7H;
    ERROR_OBJECT_NOT_FOUND* = 0000010D8H;
    ERROR_DATABASE_FAILURE* = 0000010D9H;
    ERROR_DATABASE_FULL* = 0000010DAH;
    ERROR_MEDIA_INCOMPATIBLE* = 0000010DBH;
    ERROR_RESOURCE_NOT_PRESENT* = 0000010DCH;
    ERROR_INVALID_OPERATION* = 0000010DDH;
    ERROR_MEDIA_NOT_AVAILABLE* = 0000010DEH;
    ERROR_DEVICE_NOT_AVAILABLE* = 0000010DFH;
    ERROR_REQUEST_REFUSED* = 0000010E0H;
    ERROR_FILE_OFFLINE* = 0000010FEH;
    ERROR_REMOTE_STORAGE_NOT_ACTIVE* = 0000010FFH;
    ERROR_REMOTE_STORAGE_MEDIA_ERROR* = 000001100H;
    ERROR_NOT_A_REPARSE_POINT* = 000001126H;
    ERROR_REPARSE_ATTRIBUTE_CONFLICT* = 000001127H;
    ERROR_DEPENDENT_RESOURCE_EXISTS* = 000001389H;
    ERROR_DEPENDENCY_NOT_FOUND* = 00000138AH;
    ERROR_DEPENDENCY_ALREADY_EXISTS* = 00000138BH;
    ERROR_RESOURCE_NOT_ONLINE* = 00000138CH;
    ERROR_HOST_NODE_NOT_AVAILABLE* = 00000138DH;
    ERROR_RESOURCE_NOT_AVAILABLE* = 00000138EH;
    ERROR_RESOURCE_NOT_FOUND* = 00000138FH;
    ERROR_SHUTDOWN_CLUSTER* = 000001390H;
    ERROR_CANT_EVICT_ACTIVE_NODE* = 000001391H;
    ERROR_OBJECT_ALREADY_EXISTS* = 000001392H;
    ERROR_OBJECT_IN_LIST* = 000001393H;
    ERROR_GROUP_NOT_AVAILABLE* = 000001394H;
    ERROR_GROUP_NOT_FOUND* = 000001395H;
    ERROR_GROUP_NOT_ONLINE* = 000001396H;
    ERROR_HOST_NODE_NOT_RESOURCE_OWNER* = 000001397H;
    ERROR_HOST_NODE_NOT_GROUP_OWNER* = 000001398H;
    ERROR_RESMON_CREATE_FAILED* = 000001399H;
    ERROR_RESMON_ONLINE_FAILED* = 00000139AH;
    ERROR_RESOURCE_ONLINE* = 00000139BH;
    ERROR_QUORUM_RESOURCE* = 00000139CH;
    ERROR_NOT_QUORUM_CAPABLE* = 00000139DH;
    ERROR_CLUSTER_SHUTTING_DOWN* = 00000139EH;
    ERROR_INVALID_STATE* = 00000139FH;
    ERROR_RESOURCE_PROPERTIES_STORED* = 0000013A0H;
    ERROR_NOT_QUORUM_CLASS* = 0000013A1H;
    ERROR_CORE_RESOURCE* = 0000013A2H;
    ERROR_QUORUM_RESOURCE_ONLINE_FAILED* = 0000013A3H;
    ERROR_QUORUMLOG_OPEN_FAILED* = 0000013A4H;
    ERROR_CLUSTERLOG_CORRUPT* = 0000013A5H;
    ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE* = 0000013A6H;
    ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE* = 0000013A7H;
    ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND* = 0000013A8H;
    ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE* = 0000013A9H;
    ERROR_ENCRYPTION_FAILED* = 000001770H;
    ERROR_DECRYPTION_FAILED* = 000001771H;
    ERROR_FILE_ENCRYPTED* = 000001772H;
    ERROR_NO_RECOVERY_POLICY* = 000001773H;
    ERROR_NO_EFS* = 000001774H;
    ERROR_WRONG_EFS* = 000001775H;
    ERROR_NO_USER_KEYS* = 000001776H;
    ERROR_FILE_NOT_ENCRYPTED* = 000001777H;
    ERROR_NOT_EXPORT_FORMAT* = 000001778H;
    SEVERITY_SUCCESS* = 000000000H;
    SEVERITY_ERROR* = 000000001H;
    FACILITY_NT_BIT* = 010000000H;
    NOERROR* = 000000000H;
    E_UNEXPECTED* = 08000FFFFH;
    E_NOTIMPL* = 080004001H;
    E_OUTOFMEMORY* = 08007000EH;
    E_INVALIDARG* = 080070057H;
    E_NOINTERFACE* = 080004002H;
    E_POINTER* = 080004003H;
    E_HANDLE* = 080070006H;
    E_ABORT* = 080004004H;
    E_FAIL* = 080004005H;
    E_ACCESSDENIED* = 080070005H;
    E_PENDING* = 08000000AH;
    CO_E_INIT_TLS* = 080004006H;
    CO_E_INIT_SHARED_ALLOCATOR* = 080004007H;
    CO_E_INIT_MEMORY_ALLOCATOR* = 080004008H;
    CO_E_INIT_CLASS_CACHE* = 080004009H;
    CO_E_INIT_RPC_CHANNEL* = 08000400AH;
    CO_E_INIT_TLS_SET_CHANNEL_CONTROL* = 08000400BH;
    CO_E_INIT_TLS_CHANNEL_CONTROL* = 08000400CH;
    CO_E_INIT_UNACCEPTED_USER_ALLOCATOR* = 08000400DH;
    CO_E_INIT_SCM_MUTEX_EXISTS* = 08000400EH;
    CO_E_INIT_SCM_FILE_MAPPING_EXISTS* = 08000400FH;
    CO_E_INIT_SCM_MAP_VIEW_OF_FILE* = 080004010H;
    CO_E_INIT_SCM_EXEC_FAILURE* = 080004011H;
    CO_E_INIT_ONLY_SINGLE_THREADED* = 080004012H;
    CO_E_CANT_REMOTE* = 080004013H;
    CO_E_BAD_SERVER_NAME* = 080004014H;
    CO_E_WRONG_SERVER_IDENTITY* = 080004015H;
    CO_E_OLE1DDE_DISABLED* = 080004016H;
    CO_E_RUNAS_SYNTAX* = 080004017H;
    CO_E_CREATEPROCESS_FAILURE* = 080004018H;
    CO_E_RUNAS_CREATEPROCESS_FAILURE* = 080004019H;
    CO_E_RUNAS_LOGON_FAILURE* = 08000401AH;
    CO_E_LAUNCH_PERMSSION_DENIED* = 08000401BH;
    CO_E_START_SERVICE_FAILURE* = 08000401CH;
    CO_E_REMOTE_COMMUNICATION_FAILURE* = 08000401DH;
    CO_E_SERVER_START_TIMEOUT* = 08000401EH;
    CO_E_CLSREG_INCONSISTENT* = 08000401FH;
    CO_E_IIDREG_INCONSISTENT* = 080004020H;
    CO_E_NOT_SUPPORTED* = 080004021H;
    CO_E_RELOAD_DLL* = 080004022H;
    CO_E_MSI_ERROR* = 080004023H;
    S_OK* = 000000000H;
    S_FALSE* = 000000001H;
    OLE_E_FIRST* = 080040000H;
    OLE_E_LAST* = 0800400FFH;
    OLE_S_FIRST* = 000040000H;
    OLE_S_LAST* = 0000400FFH;
    OLE_E_OLEVERB* = 080040000H;
    OLE_E_ADVF* = 080040001H;
    OLE_E_ENUM_NOMORE* = 080040002H;
    OLE_E_ADVISENOTSUPPORTED* = 080040003H;
    OLE_E_NOCONNECTION* = 080040004H;
    OLE_E_NOTRUNNING* = 080040005H;
    OLE_E_NOCACHE* = 080040006H;
    OLE_E_BLANK* = 080040007H;
    OLE_E_CLASSDIFF* = 080040008H;
    OLE_E_CANT_GETMONIKER* = 080040009H;
    OLE_E_CANT_BINDTOSOURCE* = 08004000AH;
    OLE_E_STATIC* = 08004000BH;
    OLE_E_PROMPTSAVECANCELLED* = 08004000CH;
    OLE_E_INVALIDRECT* = 08004000DH;
    OLE_E_WRONGCOMPOBJ* = 08004000EH;
    OLE_E_INVALIDHWND* = 08004000FH;
    OLE_E_NOT_INPLACEACTIVE* = 080040010H;
    OLE_E_CANTCONVERT* = 080040011H;
    OLE_E_NOSTORAGE* = 080040012H;
    DV_E_FORMATETC* = 080040064H;
    DV_E_DVTARGETDEVICE* = 080040065H;
    DV_E_STGMEDIUM* = 080040066H;
    DV_E_STATDATA* = 080040067H;
    DV_E_LINDEX* = 080040068H;
    DV_E_TYMED* = 080040069H;
    DV_E_CLIPFORMAT* = 08004006AH;
    DV_E_DVASPECT* = 08004006BH;
    DV_E_DVTARGETDEVICE_SIZE* = 08004006CH;
    DV_E_NOIVIEWOBJECT* = 08004006DH;
    DRAGDROP_E_FIRST* = 080040100H;
    DRAGDROP_E_LAST* = 08004010FH;
    DRAGDROP_S_FIRST* = 000040100H;
    DRAGDROP_S_LAST* = 00004010FH;
    DRAGDROP_E_NOTREGISTERED* = 080040100H;
    DRAGDROP_E_ALREADYREGISTERED* = 080040101H;
    DRAGDROP_E_INVALIDHWND* = 080040102H;
    CLASSFACTORY_E_FIRST* = 080040110H;
    CLASSFACTORY_E_LAST* = 08004011FH;
    CLASSFACTORY_S_FIRST* = 000040110H;
    CLASSFACTORY_S_LAST* = 00004011FH;
    CLASS_E_NOAGGREGATION* = 080040110H;
    CLASS_E_CLASSNOTAVAILABLE* = 080040111H;
    CLASS_E_NOTLICENSED* = 080040112H;
    MARSHAL_E_FIRST* = 080040120H;
    MARSHAL_E_LAST* = 08004012FH;
    MARSHAL_S_FIRST* = 000040120H;
    MARSHAL_S_LAST* = 00004012FH;
    DATA_E_FIRST* = 080040130H;
    DATA_E_LAST* = 08004013FH;
    DATA_S_FIRST* = 000040130H;
    DATA_S_LAST* = 00004013FH;
    VIEW_E_FIRST* = 080040140H;
    VIEW_E_LAST* = 08004014FH;
    VIEW_S_FIRST* = 000040140H;
    VIEW_S_LAST* = 00004014FH;
    VIEW_E_DRAW* = 080040140H;
    REGDB_E_FIRST* = 080040150H;
    REGDB_E_LAST* = 08004015FH;
    REGDB_S_FIRST* = 000040150H;
    REGDB_S_LAST* = 00004015FH;
    REGDB_E_READREGDB* = 080040150H;
    REGDB_E_WRITEREGDB* = 080040151H;
    REGDB_E_KEYMISSING* = 080040152H;
    REGDB_E_INVALIDVALUE* = 080040153H;
    REGDB_E_CLASSNOTREG* = 080040154H;
    REGDB_E_IIDNOTREG* = 080040155H;
    CAT_E_FIRST* = 080040160H;
    CAT_E_LAST* = 080040161H;
    CAT_E_CATIDNOEXIST* = 080040160H;
    CAT_E_NODESCRIPTION* = 080040161H;
    CS_E_FIRST* = 080040164H;
    CS_E_LAST* = 080040168H;
    CS_E_PACKAGE_NOTFOUND* = 080040164H;
    CS_E_NOT_DELETABLE* = 080040165H;
    CS_E_CLASS_NOTFOUND* = 080040166H;
    CS_E_INVALID_VERSION* = 080040167H;
    CS_E_NO_CLASSSTORE* = 080040168H;
    CACHE_E_FIRST* = 080040170H;
    CACHE_E_LAST* = 08004017FH;
    CACHE_S_FIRST* = 000040170H;
    CACHE_S_LAST* = 00004017FH;
    CACHE_E_NOCACHE_UPDATED* = 080040170H;
    OLEOBJ_E_FIRST* = 080040180H;
    OLEOBJ_E_LAST* = 08004018FH;
    OLEOBJ_S_FIRST* = 000040180H;
    OLEOBJ_S_LAST* = 00004018FH;
    OLEOBJ_E_NOVERBS* = 080040180H;
    OLEOBJ_E_INVALIDVERB* = 080040181H;
    CLIENTSITE_E_FIRST* = 080040190H;
    CLIENTSITE_E_LAST* = 08004019FH;
    CLIENTSITE_S_FIRST* = 000040190H;
    CLIENTSITE_S_LAST* = 00004019FH;
    INPLACE_E_NOTUNDOABLE* = 0800401A0H;
    INPLACE_E_NOTOOLSPACE* = 0800401A1H;
    INPLACE_E_FIRST* = 0800401A0H;
    INPLACE_E_LAST* = 0800401AFH;
    INPLACE_S_FIRST* = 0000401A0H;
    INPLACE_S_LAST* = 0000401AFH;
    ENUM_E_FIRST* = 0800401B0H;
    ENUM_E_LAST* = 0800401BFH;
    ENUM_S_FIRST* = 0000401B0H;
    ENUM_S_LAST* = 0000401BFH;
    CONVERT10_E_FIRST* = 0800401C0H;
    CONVERT10_E_LAST* = 0800401CFH;
    CONVERT10_S_FIRST* = 0000401C0H;
    CONVERT10_S_LAST* = 0000401CFH;
    CONVERT10_E_OLESTREAM_GET* = 0800401C0H;
    CONVERT10_E_OLESTREAM_PUT* = 0800401C1H;
    CONVERT10_E_OLESTREAM_FMT* = 0800401C2H;
    CONVERT10_E_OLESTREAM_BITMAP_TO_DIB* = 0800401C3H;
    CONVERT10_E_STG_FMT* = 0800401C4H;
    CONVERT10_E_STG_NO_STD_STREAM* = 0800401C5H;
    CONVERT10_E_STG_DIB_TO_BITMAP* = 0800401C6H;
    CLIPBRD_E_FIRST* = 0800401D0H;
    CLIPBRD_E_LAST* = 0800401DFH;
    CLIPBRD_S_FIRST* = 0000401D0H;
    CLIPBRD_S_LAST* = 0000401DFH;
    CLIPBRD_E_CANT_OPEN* = 0800401D0H;
    CLIPBRD_E_CANT_EMPTY* = 0800401D1H;
    CLIPBRD_E_CANT_SET* = 0800401D2H;
    CLIPBRD_E_BAD_DATA* = 0800401D3H;
    CLIPBRD_E_CANT_CLOSE* = 0800401D4H;
    MK_E_FIRST* = 0800401E0H;
    MK_E_LAST* = 0800401EFH;
    MK_S_FIRST* = 0000401E0H;
    MK_S_LAST* = 0000401EFH;
    MK_E_CONNECTMANUALLY* = 0800401E0H;
    MK_E_EXCEEDEDDEADLINE* = 0800401E1H;
    MK_E_NEEDGENERIC* = 0800401E2H;
    MK_E_UNAVAILABLE* = 0800401E3H;
    MK_E_SYNTAX* = 0800401E4H;
    MK_E_NOOBJECT* = 0800401E5H;
    MK_E_INVALIDEXTENSION* = 0800401E6H;
    MK_E_INTERMEDIATEINTERFACENOTSUPPORTED* = 0800401E7H;
    MK_E_NOTBINDABLE* = 0800401E8H;
    MK_E_NOTBOUND* = 0800401E9H;
    MK_E_CANTOPENFILE* = 0800401EAH;
    MK_E_MUSTBOTHERUSER* = 0800401EBH;
    MK_E_NOINVERSE* = 0800401ECH;
    MK_E_NOSTORAGE* = 0800401EDH;
    MK_E_NOPREFIX* = 0800401EEH;
    MK_E_ENUMERATION_FAILED* = 0800401EFH;
    CO_E_FIRST* = 0800401F0H;
    CO_E_LAST* = 0800401FFH;
    CO_S_FIRST* = 0000401F0H;
    CO_S_LAST* = 0000401FFH;
    CO_E_NOTINITIALIZED* = 0800401F0H;
    CO_E_ALREADYINITIALIZED* = 0800401F1H;
    CO_E_CANTDETERMINECLASS* = 0800401F2H;
    CO_E_CLASSSTRING* = 0800401F3H;
    CO_E_IIDSTRING* = 0800401F4H;
    CO_E_APPNOTFOUND* = 0800401F5H;
    CO_E_APPSINGLEUSE* = 0800401F6H;
    CO_E_ERRORINAPP* = 0800401F7H;
    CO_E_DLLNOTFOUND* = 0800401F8H;
    CO_E_ERRORINDLL* = 0800401F9H;
    CO_E_WRONGOSFORAPP* = 0800401FAH;
    CO_E_OBJNOTREG* = 0800401FBH;
    CO_E_OBJISREG* = 0800401FCH;
    CO_E_OBJNOTCONNECTED* = 0800401FDH;
    CO_E_APPDIDNTREG* = 0800401FEH;
    CO_E_RELEASED* = 0800401FFH;
    CO_E_FAILEDTOIMPERSONATE* = 080040200H;
    CO_E_FAILEDTOGETSECCTX* = 080040201H;
    CO_E_FAILEDTOOPENTHREADTOKEN* = 080040202H;
    CO_E_FAILEDTOGETTOKENINFO* = 080040203H;
    CO_E_TRUSTEEDOESNTMATCHCLIENT* = 080040204H;
    CO_E_FAILEDTOQUERYCLIENTBLANKET* = 080040205H;
    CO_E_FAILEDTOSETDACL* = 080040206H;
    CO_E_ACCESSCHECKFAILED* = 080040207H;
    CO_E_NETACCESSAPIFAILED* = 080040208H;
    CO_E_WRONGTRUSTEENAMESYNTAX* = 080040209H;
    CO_E_INVALIDSID* = 08004020AH;
    CO_E_CONVERSIONFAILED* = 08004020BH;
    CO_E_NOMATCHINGSIDFOUND* = 08004020CH;
    CO_E_LOOKUPACCSIDFAILED* = 08004020DH;
    CO_E_NOMATCHINGNAMEFOUND* = 08004020EH;
    CO_E_LOOKUPACCNAMEFAILED* = 08004020FH;
    CO_E_SETSERLHNDLFAILED* = 080040210H;
    CO_E_FAILEDTOGETWINDIR* = 080040211H;
    CO_E_PATHTOOLONG* = 080040212H;
    CO_E_FAILEDTOGENUUID* = 080040213H;
    CO_E_FAILEDTOCREATEFILE* = 080040214H;
    CO_E_FAILEDTOCLOSEHANDLE* = 080040215H;
    CO_E_EXCEEDSYSACLLIMIT* = 080040216H;
    CO_E_ACESINWRONGORDER* = 080040217H;
    CO_E_INCOMPATIBLESTREAMVERSION* = 080040218H;
    CO_E_FAILEDTOOPENPROCESSTOKEN* = 080040219H;
    CO_E_DECODEFAILED* = 08004021AH;
    CO_E_ACNOTINITIALIZED* = 08004021BH;
    OLE_S_USEREG* = 000040000H;
    OLE_S_STATIC* = 000040001H;
    OLE_S_MAC_CLIPFORMAT* = 000040002H;
    DRAGDROP_S_DROP* = 000040100H;
    DRAGDROP_S_CANCEL* = 000040101H;
    DRAGDROP_S_USEDEFAULTCURSORS* = 000040102H;
    DATA_S_SAMEFORMATETC* = 000040130H;
    VIEW_S_ALREADY_FROZEN* = 000040140H;
    CACHE_S_FORMATETC_NOTSUPPORTED* = 000040170H;
    CACHE_S_SAMECACHE* = 000040171H;
    CACHE_S_SOMECACHES_NOTUPDATED* = 000040172H;
    OLEOBJ_S_INVALIDVERB* = 000040180H;
    OLEOBJ_S_CANNOT_DOVERB_NOW* = 000040181H;
    OLEOBJ_S_INVALIDHWND* = 000040182H;
    INPLACE_S_TRUNCATED* = 0000401A0H;
    CONVERT10_S_NO_PRESENTATION* = 0000401C0H;
    MK_S_REDUCED_TO_SELF* = 0000401E2H;
    MK_S_ME* = 0000401E4H;
    MK_S_HIM* = 0000401E5H;
    MK_S_US* = 0000401E6H;
    MK_S_MONIKERALREADYREGISTERED* = 0000401E7H;
    CO_E_CLASS_CREATE_FAILED* = 080080001H;
    CO_E_SCM_ERROR* = 080080002H;
    CO_E_SCM_RPC_FAILURE* = 080080003H;
    CO_E_BAD_PATH* = 080080004H;
    CO_E_SERVER_EXEC_FAILURE* = 080080005H;
    CO_E_OBJSRV_RPC_FAILURE* = 080080006H;
    MK_E_NO_NORMALIZED* = 080080007H;
    CO_E_SERVER_STOPPING* = 080080008H;
    MEM_E_INVALID_ROOT* = 080080009H;
    MEM_E_INVALID_LINK* = 080080010H;
    MEM_E_INVALID_SIZE* = 080080011H;
    CO_S_NOTALLINTERFACES* = 000080012H;
    DISP_E_UNKNOWNINTERFACE* = 080020001H;
    DISP_E_MEMBERNOTFOUND* = 080020003H;
    DISP_E_PARAMNOTFOUND* = 080020004H;
    DISP_E_TYPEMISMATCH* = 080020005H;
    DISP_E_UNKNOWNNAME* = 080020006H;
    DISP_E_NONAMEDARGS* = 080020007H;
    DISP_E_BADVARTYPE* = 080020008H;
    DISP_E_EXCEPTION* = 080020009H;
    DISP_E_OVERFLOW* = 08002000AH;
    DISP_E_BADINDEX* = 08002000BH;
    DISP_E_UNKNOWNLCID* = 08002000CH;
    DISP_E_ARRAYISLOCKED* = 08002000DH;
    DISP_E_BADPARAMCOUNT* = 08002000EH;
    DISP_E_PARAMNOTOPTIONAL* = 08002000FH;
    DISP_E_BADCALLEE* = 080020010H;
    DISP_E_NOTACOLLECTION* = 080020011H;
    DISP_E_DIVBYZERO* = 080020012H;
    TYPE_E_BUFFERTOOSMALL* = 080028016H;
    TYPE_E_FIELDNOTFOUND* = 080028017H;
    TYPE_E_INVDATAREAD* = 080028018H;
    TYPE_E_UNSUPFORMAT* = 080028019H;
    TYPE_E_REGISTRYACCESS* = 08002801CH;
    TYPE_E_LIBNOTREGISTERED* = 08002801DH;
    TYPE_E_UNDEFINEDTYPE* = 080028027H;
    TYPE_E_QUALIFIEDNAMEDISALLOWED* = 080028028H;
    TYPE_E_INVALIDSTATE* = 080028029H;
    TYPE_E_WRONGTYPEKIND* = 08002802AH;
    TYPE_E_ELEMENTNOTFOUND* = 08002802BH;
    TYPE_E_AMBIGUOUSNAME* = 08002802CH;
    TYPE_E_NAMECONFLICT* = 08002802DH;
    TYPE_E_UNKNOWNLCID* = 08002802EH;
    TYPE_E_DLLFUNCTIONNOTFOUND* = 08002802FH;
    TYPE_E_BADMODULEKIND* = 0800288BDH;
    TYPE_E_SIZETOOBIG* = 0800288C5H;
    TYPE_E_DUPLICATEID* = 0800288C6H;
    TYPE_E_INVALIDID* = 0800288CFH;
    TYPE_E_TYPEMISMATCH* = 080028CA0H;
    TYPE_E_OUTOFBOUNDS* = 080028CA1H;
    TYPE_E_IOERROR* = 080028CA2H;
    TYPE_E_CANTCREATETMPFILE* = 080028CA3H;
    TYPE_E_CANTLOADLIBRARY* = 080029C4AH;
    TYPE_E_INCONSISTENTPROPFUNCS* = 080029C83H;
    TYPE_E_CIRCULARTYPE* = 080029C84H;
    STG_E_INVALIDFUNCTION* = 080030001H;
    STG_E_FILENOTFOUND* = 080030002H;
    STG_E_PATHNOTFOUND* = 080030003H;
    STG_E_TOOMANYOPENFILES* = 080030004H;
    STG_E_ACCESSDENIED* = 080030005H;
    STG_E_INVALIDHANDLE* = 080030006H;
    STG_E_INSUFFICIENTMEMORY* = 080030008H;
    STG_E_INVALIDPOINTER* = 080030009H;
    STG_E_NOMOREFILES* = 080030012H;
    STG_E_DISKISWRITEPROTECTED* = 080030013H;
    STG_E_SEEKERROR* = 080030019H;
    STG_E_WRITEFAULT* = 08003001DH;
    STG_E_READFAULT* = 08003001EH;
    STG_E_SHAREVIOLATION* = 080030020H;
    STG_E_LOCKVIOLATION* = 080030021H;
    STG_E_FILEALREADYEXISTS* = 080030050H;
    STG_E_INVALIDPARAMETER* = 080030057H;
    STG_E_MEDIUMFULL* = 080030070H;
    STG_E_PROPSETMISMATCHED* = 0800300F0H;
    STG_E_ABNORMALAPIEXIT* = 0800300FAH;
    STG_E_INVALIDHEADER* = 0800300FBH;
    STG_E_INVALIDNAME* = 0800300FCH;
    STG_E_UNKNOWN* = 0800300FDH;
    STG_E_UNIMPLEMENTEDFUNCTION* = 0800300FEH;
    STG_E_INVALIDFLAG* = 0800300FFH;
    STG_E_INUSE* = 080030100H;
    STG_E_NOTCURRENT* = 080030101H;
    STG_E_REVERTED* = 080030102H;
    STG_E_CANTSAVE* = 080030103H;
    STG_E_OLDFORMAT* = 080030104H;
    STG_E_OLDDLL* = 080030105H;
    STG_E_SHAREREQUIRED* = 080030106H;
    STG_E_NOTFILEBASEDSTORAGE* = 080030107H;
    STG_E_EXTANTMARSHALLINGS* = 080030108H;
    STG_E_DOCFILECORRUPT* = 080030109H;
    STG_E_BADBASEADDRESS* = 080030110H;
    STG_E_INCOMPLETE* = 080030201H;
    STG_E_TERMINATED* = 080030202H;
    STG_S_CONVERTED* = 000030200H;
    STG_S_BLOCK* = 000030201H;
    STG_S_RETRYNOW* = 000030202H;
    STG_S_MONITORING* = 000030203H;
    STG_S_MULTIPLEOPENS* = 000030204H;
    STG_S_CONSOLIDATIONFAILED* = 000030205H;
    STG_S_CANNOTCONSOLIDATE* = 000030206H;
    RPC_E_CALL_REJECTED* = 080010001H;
    RPC_E_CALL_CANCELED* = 080010002H;
    RPC_E_CANTPOST_INSENDCALL* = 080010003H;
    RPC_E_CANTCALLOUT_INASYNCCALL* = 080010004H;
    RPC_E_CANTCALLOUT_INEXTERNALCALL* = 080010005H;
    RPC_E_CONNECTION_TERMINATED* = 080010006H;
    RPC_E_SERVER_DIED* = 080010007H;
    RPC_E_CLIENT_DIED* = 080010008H;
    RPC_E_INVALID_DATAPACKET* = 080010009H;
    RPC_E_CANTTRANSMIT_CALL* = 08001000AH;
    RPC_E_CLIENT_CANTMARSHAL_DATA* = 08001000BH;
    RPC_E_CLIENT_CANTUNMARSHAL_DATA* = 08001000CH;
    RPC_E_SERVER_CANTMARSHAL_DATA* = 08001000DH;
    RPC_E_SERVER_CANTUNMARSHAL_DATA* = 08001000EH;
    RPC_E_INVALID_DATA* = 08001000FH;
    RPC_E_INVALID_PARAMETER* = 080010010H;
    RPC_E_CANTCALLOUT_AGAIN* = 080010011H;
    RPC_E_SERVER_DIED_DNE* = 080010012H;
    RPC_E_SYS_CALL_FAILED* = 080010100H;
    RPC_E_OUT_OF_RESOURCES* = 080010101H;
    RPC_E_ATTEMPTED_MULTITHREAD* = 080010102H;
    RPC_E_NOT_REGISTERED* = 080010103H;
    RPC_E_FAULT* = 080010104H;
    RPC_E_SERVERFAULT* = 080010105H;
    RPC_E_CHANGED_MODE* = 080010106H;
    RPC_E_INVALIDMETHOD* = 080010107H;
    RPC_E_DISCONNECTED* = 080010108H;
    RPC_E_RETRY* = 080010109H;
    RPC_E_SERVERCALL_RETRYLATER* = 08001010AH;
    RPC_E_SERVERCALL_REJECTED* = 08001010BH;
    RPC_E_INVALID_CALLDATA* = 08001010CH;
    RPC_E_CANTCALLOUT_ININPUTSYNCCALL* = 08001010DH;
    RPC_E_WRONG_THREAD* = 08001010EH;
    RPC_E_THREAD_NOT_INIT* = 08001010FH;
    RPC_E_VERSION_MISMATCH* = 080010110H;
    RPC_E_INVALID_HEADER* = 080010111H;
    RPC_E_INVALID_EXTENSION* = 080010112H;
    RPC_E_INVALID_IPID* = 080010113H;
    RPC_E_INVALID_OBJECT* = 080010114H;
    RPC_S_CALLPENDING* = 080010115H;
    RPC_S_WAITONTIMER* = 080010116H;
    RPC_E_CALL_COMPLETE* = 080010117H;
    RPC_E_UNSECURE_CALL* = 080010118H;
    RPC_E_TOO_LATE* = 080010119H;
    RPC_E_NO_GOOD_SECURITY_PACKAGES* = 08001011AH;
    RPC_E_ACCESS_DENIED* = 08001011BH;
    RPC_E_REMOTE_DISABLED* = 08001011CH;
    RPC_E_INVALID_OBJREF* = 08001011DH;
    RPC_E_NO_CONTEXT* = 08001011EH;
    RPC_E_TIMEOUT* = 08001011FH;
    RPC_E_NO_SYNC* = 080010120H;
    RPC_E_UNEXPECTED* = 08001FFFFH;
    NTE_BAD_UID* = 080090001H;
    NTE_BAD_HASH* = 080090002H;
    NTE_BAD_KEY* = 080090003H;
    NTE_BAD_LEN* = 080090004H;
    NTE_BAD_DATA* = 080090005H;
    NTE_BAD_SIGNATURE* = 080090006H;
    NTE_BAD_VER* = 080090007H;
    NTE_BAD_ALGID* = 080090008H;
    NTE_BAD_FLAGS* = 080090009H;
    NTE_BAD_TYPE* = 08009000AH;
    NTE_BAD_KEY_STATE* = 08009000BH;
    NTE_BAD_HASH_STATE* = 08009000CH;
    NTE_NO_KEY* = 08009000DH;
    NTE_NO_MEMORY* = 08009000EH;
    NTE_EXISTS* = 08009000FH;
    NTE_PERM* = 080090010H;
    NTE_NOT_FOUND* = 080090011H;
    NTE_DOUBLE_ENCRYPT* = 080090012H;
    NTE_BAD_PROVIDER* = 080090013H;
    NTE_BAD_PROV_TYPE* = 080090014H;
    NTE_BAD_PUBLIC_KEY* = 080090015H;
    NTE_BAD_KEYSET* = 080090016H;
    NTE_PROV_TYPE_NOT_DEF* = 080090017H;
    NTE_PROV_TYPE_ENTRY_BAD* = 080090018H;
    NTE_KEYSET_NOT_DEF* = 080090019H;
    NTE_KEYSET_ENTRY_BAD* = 08009001AH;
    NTE_PROV_TYPE_NO_MATCH* = 08009001BH;
    NTE_SIGNATURE_FILE_BAD* = 08009001CH;
    NTE_PROVIDER_DLL_FAIL* = 08009001DH;
    NTE_PROV_DLL_NOT_FOUND* = 08009001EH;
    NTE_BAD_KEYSET_PARAM* = 08009001FH;
    NTE_FAIL* = 080090020H;
    NTE_SYS_ERR* = 080090021H;
    CRYPT_E_MSG_ERROR* = 080091001H;
    CRYPT_E_UNKNOWN_ALGO* = 080091002H;
    CRYPT_E_OID_FORMAT* = 080091003H;
    CRYPT_E_INVALID_MSG_TYPE* = 080091004H;
    CRYPT_E_UNEXPECTED_ENCODING* = 080091005H;
    CRYPT_E_AUTH_ATTR_MISSING* = 080091006H;
    CRYPT_E_HASH_VALUE* = 080091007H;
    CRYPT_E_INVALID_INDEX* = 080091008H;
    CRYPT_E_ALREADY_DECRYPTED* = 080091009H;
    CRYPT_E_NOT_DECRYPTED* = 08009100AH;
    CRYPT_E_RECIPIENT_NOT_FOUND* = 08009100BH;
    CRYPT_E_CONTROL_TYPE* = 08009100CH;
    CRYPT_E_ISSUER_SERIALNUMBER* = 08009100DH;
    CRYPT_E_SIGNER_NOT_FOUND* = 08009100EH;
    CRYPT_E_ATTRIBUTES_MISSING* = 08009100FH;
    CRYPT_E_STREAM_MSG_NOT_READY* = 080091010H;
    CRYPT_E_STREAM_INSUFFICIENT_DATA* = 080091011H;
    CRYPT_E_BAD_LEN* = 080092001H;
    CRYPT_E_BAD_ENCODE* = 080092002H;
    CRYPT_E_FILE_ERROR* = 080092003H;
    CRYPT_E_NOT_FOUND* = 080092004H;
    CRYPT_E_EXISTS* = 080092005H;
    CRYPT_E_NO_PROVIDER* = 080092006H;
    CRYPT_E_SELF_SIGNED* = 080092007H;
    CRYPT_E_DELETED_PREV* = 080092008H;
    CRYPT_E_NO_MATCH* = 080092009H;
    CRYPT_E_UNEXPECTED_MSG_TYPE* = 08009200AH;
    CRYPT_E_NO_KEY_PROPERTY* = 08009200BH;
    CRYPT_E_NO_DECRYPT_CERT* = 08009200CH;
    CRYPT_E_BAD_MSG* = 08009200DH;
    CRYPT_E_NO_SIGNER* = 08009200EH;
    CRYPT_E_PENDING_CLOSE* = 08009200FH;
    CRYPT_E_REVOKED* = 080092010H;
    CRYPT_E_NO_REVOCATION_DLL* = 080092011H;
    CRYPT_E_NO_REVOCATION_CHECK* = 080092012H;
    CRYPT_E_REVOCATION_OFFLINE* = 080092013H;
    CRYPT_E_NOT_IN_REVOCATION_DATABASE* = 080092014H;
    CRYPT_E_INVALID_NUMERIC_STRING* = 080092020H;
    CRYPT_E_INVALID_PRINTABLE_STRING* = 080092021H;
    CRYPT_E_INVALID_IA5_STRING* = 080092022H;
    CRYPT_E_INVALID_X500_STRING* = 080092023H;
    CRYPT_E_NOT_CHAR_STRING* = 080092024H;
    CRYPT_E_FILERESIZED* = 080092025H;
    CRYPT_E_SECURITY_SETTINGS* = 080092026H;
    CRYPT_E_NO_VERIFY_USAGE_DLL* = 080092027H;
    CRYPT_E_NO_VERIFY_USAGE_CHECK* = 080092028H;
    CRYPT_E_VERIFY_USAGE_OFFLINE* = 080092029H;
    CRYPT_E_NOT_IN_CTL* = 08009202AH;
    CRYPT_E_NO_TRUSTED_SIGNER* = 08009202BH;
    CRYPT_E_OSS_ERROR* = 080093000H;
    CERTSRV_E_BAD_REQUESTSUBJECT* = 080094001H;
    CERTSRV_E_NO_REQUEST* = 080094002H;
    CERTSRV_E_BAD_REQUESTSTATUS* = 080094003H;
    CERTSRV_E_PROPERTY_EMPTY* = 080094004H;
    CERTDB_E_JET_ERROR* = 080095000H;
    TRUST_E_SYSTEM_ERROR* = 080096001H;
    TRUST_E_NO_SIGNER_CERT* = 080096002H;
    TRUST_E_COUNTER_SIGNER* = 080096003H;
    TRUST_E_CERT_SIGNATURE* = 080096004H;
    TRUST_E_TIME_STAMP* = 080096005H;
    TRUST_E_BAD_DIGEST* = 080096010H;
    TRUST_E_BASIC_CONSTRAINTS* = 080096019H;
    TRUST_E_FINANCIAL_CRITERIA* = 08009601EH;
    NTE_OP_OK* = 000000000H;
    TRUST_E_PROVIDER_UNKNOWN* = 0800B0001H;
    TRUST_E_ACTION_UNKNOWN* = 0800B0002H;
    TRUST_E_SUBJECT_FORM_UNKNOWN* = 0800B0003H;
    TRUST_E_SUBJECT_NOT_TRUSTED* = 0800B0004H;
    DIGSIG_E_ENCODE* = 0800B0005H;
    DIGSIG_E_DECODE* = 0800B0006H;
    DIGSIG_E_EXTENSIBILITY* = 0800B0007H;
    DIGSIG_E_CRYPTO* = 0800B0008H;
    PERSIST_E_SIZEDEFINITE* = 0800B0009H;
    PERSIST_E_SIZEINDEFINITE* = 0800B000AH;
    PERSIST_E_NOTSELFSIZING* = 0800B000BH;
    TRUST_E_NOSIGNATURE* = 0800B0100H;
    CERT_E_EXPIRED* = 0800B0101H;
    CERT_E_VALIDITYPERIODNESTING* = 0800B0102H;
    CERT_E_ROLE* = 0800B0103H;
    CERT_E_PATHLENCONST* = 0800B0104H;
    CERT_E_CRITICAL* = 0800B0105H;
    CERT_E_PURPOSE* = 0800B0106H;
    CERT_E_ISSUERCHAINING* = 0800B0107H;
    CERT_E_MALFORMED* = 0800B0108H;
    CERT_E_UNTRUSTEDROOT* = 0800B0109H;
    CERT_E_CHAINING* = 0800B010AH;
    TRUST_E_FAIL* = 0800B010BH;
    CERT_E_REVOKED* = 0800B010CH;
    CERT_E_UNTRUSTEDTESTROOT* = 0800B010DH;
    CERT_E_REVOCATION_FAILURE* = 0800B010EH;
    CERT_E_CN_NO_MATCH* = 0800B010FH;
    CERT_E_WRONG_USAGE* = 0800B0110H;
    SPAPI_E_EXPECTED_SECTION_NAME* = 0800F0000H;
    SPAPI_E_BAD_SECTION_NAME_LINE* = 0800F0001H;
    SPAPI_E_SECTION_NAME_TOO_LONG* = 0800F0002H;
    SPAPI_E_GENERAL_SYNTAX* = 0800F0003H;
    SPAPI_E_WRONG_INF_STYLE* = 0800F0100H;
    SPAPI_E_SECTION_NOT_FOUND* = 0800F0101H;
    SPAPI_E_LINE_NOT_FOUND* = 0800F0102H;
    SPAPI_E_NO_ASSOCIATED_CLASS* = 0800F0200H;
    SPAPI_E_CLASS_MISMATCH* = 0800F0201H;
    SPAPI_E_DUPLICATE_FOUND* = 0800F0202H;
    SPAPI_E_NO_DRIVER_SELECTED* = 0800F0203H;
    SPAPI_E_KEY_DOES_NOT_EXIST* = 0800F0204H;
    SPAPI_E_INVALID_DEVINST_NAME* = 0800F0205H;
    SPAPI_E_INVALID_CLASS* = 0800F0206H;
    SPAPI_E_DEVINST_ALREADY_EXISTS* = 0800F0207H;
    SPAPI_E_DEVINFO_NOT_REGISTERED* = 0800F0208H;
    SPAPI_E_INVALID_REG_PROPERTY* = 0800F0209H;
    SPAPI_E_NO_INF* = 0800F020AH;
    SPAPI_E_NO_SUCH_DEVINST* = 0800F020BH;
    SPAPI_E_CANT_LOAD_CLASS_ICON* = 0800F020CH;
    SPAPI_E_INVALID_CLASS_INSTALLER* = 0800F020DH;
    SPAPI_E_DI_DO_DEFAULT* = 0800F020EH;
    SPAPI_E_DI_NOFILECOPY* = 0800F020FH;
    SPAPI_E_INVALID_HWPROFILE* = 0800F0210H;
    SPAPI_E_NO_DEVICE_SELECTED* = 0800F0211H;
    SPAPI_E_DEVINFO_LIST_LOCKED* = 0800F0212H;
    SPAPI_E_DEVINFO_DATA_LOCKED* = 0800F0213H;
    SPAPI_E_DI_BAD_PATH* = 0800F0214H;
    SPAPI_E_NO_CLASSINSTALL_PARAMS* = 0800F0215H;
    SPAPI_E_FILEQUEUE_LOCKED* = 0800F0216H;
    SPAPI_E_BAD_SERVICE_INSTALLSECT* = 0800F0217H;
    SPAPI_E_NO_CLASS_DRIVER_LIST* = 0800F0218H;
    SPAPI_E_NO_ASSOCIATED_SERVICE* = 0800F0219H;
    SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE* = 0800F021AH;
    SPAPI_E_DEVICE_INTERFACE_ACTIVE* = 0800F021BH;
    SPAPI_E_DEVICE_INTERFACE_REMOVED* = 0800F021CH;
    SPAPI_E_BAD_INTERFACE_INSTALLSECT* = 0800F021DH;
    SPAPI_E_NO_SUCH_INTERFACE_CLASS* = 0800F021EH;
    SPAPI_E_INVALID_REFERENCE_STRING* = 0800F021FH;
    SPAPI_E_INVALID_MACHINENAME* = 0800F0220H;
    SPAPI_E_REMOTE_COMM_FAILURE* = 0800F0221H;
    SPAPI_E_MACHINE_UNAVAILABLE* = 0800F0222H;
    SPAPI_E_NO_CONFIGMGR_SERVICES* = 0800F0223H;
    SPAPI_E_INVALID_PROPPAGE_PROVIDER* = 0800F0224H;
    SPAPI_E_NO_SUCH_DEVICE_INTERFACE* = 0800F0225H;
    SPAPI_E_DI_POSTPROCESSING_REQUIRED* = 0800F0226H;
    SPAPI_E_INVALID_COINSTALLER* = 0800F0227H;
    SPAPI_E_NO_COMPAT_DRIVERS* = 0800F0228H;
    SPAPI_E_NO_DEVICE_ICON* = 0800F0229H;
    SPAPI_E_INVALID_INF_LOGCONFIG* = 0800F022AH;
    SPAPI_E_DI_DONT_INSTALL* = 0800F022BH;
    SPAPI_E_INVALID_FILTER_DRIVER* = 0800F022CH;
    SPAPI_E_ERROR_NOT_INSTALLED* = 0800F1000H;
    TC_NORMAL* = 000000000H;
    TC_HARDERR* = 000000001H;
    TC_GP_TRAP* = 000000002H;
    TC_SIGNAL* = 000000003H;
    AC_LINE_OFFLINE* = 000000000H;
    AC_LINE_ONLINE* = 000000001H;
    AC_LINE_BACKUP_POWER* = 000000002H;
    AC_LINE_UNKNOWN* = 0000000FFH;
    BATTERY_FLAG_HIGH* = 000000001H;
    BATTERY_FLAG_LOW* = 000000002H;
    BATTERY_FLAG_CRITICAL* = 000000004H;
    BATTERY_FLAG_CHARGING* = 000000008H;
    BATTERY_FLAG_NO_BATTERY* = 000000080H;
    BATTERY_FLAG_UNKNOWN* = 0000000FFH;
    BATTERY_PERCENTAGE_UNKNOWN* = 0000000FFH;
    BATTERY_LIFE_UNKNOWN* = 0FFFFFFFFH;
    WIN_CERT_REVISION_1_0* = 000000100H;
    WIN_CERT_REVISION_2_0* = 000000200H;
    WIN_CERT_TYPE_X509* = 000000001H;
    WIN_CERT_TYPE_PKCS_SIGNED_DATA* = 000000002H;
    WIN_CERT_TYPE_RESERVED_1* = 000000003H;
    R2_BLACK* = 000000001H;
    R2_NOTMERGEPEN* = 000000002H;
    R2_MASKNOTPEN* = 000000003H;
    R2_NOTCOPYPEN* = 000000004H;
    R2_MASKPENNOT* = 000000005H;
    R2_NOT* = 000000006H;
    R2_XORPEN* = 000000007H;
    R2_NOTMASKPEN* = 000000008H;
    R2_MASKPEN* = 000000009H;
    R2_NOTXORPEN* = 00000000AH;
    R2_NOP* = 00000000BH;
    R2_MERGENOTPEN* = 00000000CH;
    R2_COPYPEN* = 00000000DH;
    R2_MERGEPENNOT* = 00000000EH;
    R2_MERGEPEN* = 00000000FH;
    R2_WHITE* = 000000010H;
    R2_LAST* = 000000010H;
    SRCCOPY* = 000CC0020H;
    SRCPAINT* = 000EE0086H;
    SRCAND* = 0008800C6H;
    SRCINVERT* = 000660046H;
    SRCERASE* = 000440328H;
    NOTSRCCOPY* = 000330008H;
    NOTSRCERASE* = 0001100A6H;
    MERGECOPY* = 000C000CAH;
    MERGEPAINT* = 000BB0226H;
    PATCOPY* = 000F00021H;
    PATPAINT* = 000FB0A09H;
    PATINVERT* = 0005A0049H;
    DSTINVERT* = 000550009H;
    BLACKNESS* = 000000042H;
    WHITENESS* = 000FF0062H;
    GDI_ERROR* = 0FFFFFFFFH;
    HGDI_ERROR* = 0FFFFFFFFH;
    ERROR* = 000000000H;
    NULLREGION* = 000000001H;
    SIMPLEREGION* = 000000002H;
    COMPLEXREGION* = 000000003H;
    RGN_ERROR* = 000000000H;
    RGN_AND* = 000000001H;
    RGN_OR* = 000000002H;
    RGN_XOR* = 000000003H;
    RGN_DIFF* = 000000004H;
    RGN_COPY* = 000000005H;
    RGN_MIN* = 000000001H;
    RGN_MAX* = 000000005H;
    BLACKONWHITE* = 000000001H;
    WHITEONBLACK* = 000000002H;
    COLORONCOLOR* = 000000003H;
    HALFTONE* = 000000004H;
    MAXSTRETCHBLTMODE* = 000000004H;
    STRETCH_ANDSCANS* = 000000001H;
    STRETCH_ORSCANS* = 000000002H;
    STRETCH_DELETESCANS* = 000000003H;
    STRETCH_HALFTONE* = 000000004H;
    ALTERNATE* = 000000001H;
    WINDING* = 000000002H;
    POLYFILL_LAST* = 000000002H;
    TA_NOUPDATECP* = 000000000H;
    TA_UPDATECP* = 000000001H;
    TA_LEFT* = 000000000H;
    TA_RIGHT* = 000000002H;
    TA_CENTER* = 000000006H;
    TA_TOP* = 000000000H;
    TA_BOTTOM* = 000000008H;
    TA_BASELINE* = 000000018H;
    TA_RTLREADING* = 000000100H;
    TA_MASK* = 00000011FH;
    VTA_BASELINE* = 000000018H;
    VTA_LEFT* = 000000008H;
    VTA_RIGHT* = 000000000H;
    VTA_CENTER* = 000000006H;
    VTA_BOTTOM* = 000000002H;
    VTA_TOP* = 000000000H;
    ETO_OPAQUE* = 000000002H;
    ETO_CLIPPED* = 000000004H;
    ETO_GLYPH_INDEX* = 000000010H;
    ETO_RTLREADING* = 000000080H;
    ETO_NUMERICSLOCAL* = 000000400H;
    ETO_NUMERICSLATIN* = 000000800H;
    ETO_IGNORELANGUAGE* = 000001000H;
    ASPECT_FILTERING* = 000000001H;
    DCB_RESET* = 000000001H;
    DCB_ACCUMULATE* = 000000002H;
    DCB_DIRTY* = 000000002H;
    DCB_SET* = 000000003H;
    DCB_ENABLE* = 000000004H;
    DCB_DISABLE* = 000000008H;
    META_SETBKCOLOR* = 000000201H;
    META_SETBKMODE* = 000000102H;
    META_SETMAPMODE* = 000000103H;
    META_SETROP2* = 000000104H;
    META_SETRELABS* = 000000105H;
    META_SETPOLYFILLMODE* = 000000106H;
    META_SETSTRETCHBLTMODE* = 000000107H;
    META_SETTEXTCHAREXTRA* = 000000108H;
    META_SETTEXTCOLOR* = 000000209H;
    META_SETTEXTJUSTIFICATION* = 00000020AH;
    META_SETWINDOWORG* = 00000020BH;
    META_SETWINDOWEXT* = 00000020CH;
    META_SETVIEWPORTORG* = 00000020DH;
    META_SETVIEWPORTEXT* = 00000020EH;
    META_OFFSETWINDOWORG* = 00000020FH;
    META_SCALEWINDOWEXT* = 000000410H;
    META_OFFSETVIEWPORTORG* = 000000211H;
    META_SCALEVIEWPORTEXT* = 000000412H;
    META_LINETO* = 000000213H;
    META_MOVETO* = 000000214H;
    META_EXCLUDECLIPRECT* = 000000415H;
    META_INTERSECTCLIPRECT* = 000000416H;
    META_ARC* = 000000817H;
    META_ELLIPSE* = 000000418H;
    META_FLOODFILL* = 000000419H;
    META_PIE* = 00000081AH;
    META_RECTANGLE* = 00000041BH;
    META_ROUNDRECT* = 00000061CH;
    META_PATBLT* = 00000061DH;
    META_SAVEDC* = 00000001EH;
    META_SETPIXEL* = 00000041FH;
    META_OFFSETCLIPRGN* = 000000220H;
    META_TEXTOUT* = 000000521H;
    META_BITBLT* = 000000922H;
    META_STRETCHBLT* = 000000B23H;
    META_POLYGON* = 000000324H;
    META_POLYLINE* = 000000325H;
    META_ESCAPE* = 000000626H;
    META_RESTOREDC* = 000000127H;
    META_FILLREGION* = 000000228H;
    META_FRAMEREGION* = 000000429H;
    META_INVERTREGION* = 00000012AH;
    META_PAINTREGION* = 00000012BH;
    META_SELECTCLIPREGION* = 00000012CH;
    META_SELECTOBJECT* = 00000012DH;
    META_SETTEXTALIGN* = 00000012EH;
    META_CHORD* = 000000830H;
    META_SETMAPPERFLAGS* = 000000231H;
    META_EXTTEXTOUT* = 000000A32H;
    META_SETDIBTODEV* = 000000D33H;
    META_SELECTPALETTE* = 000000234H;
    META_REALIZEPALETTE* = 000000035H;
    META_ANIMATEPALETTE* = 000000436H;
    META_SETPALENTRIES* = 000000037H;
    META_POLYPOLYGON* = 000000538H;
    META_RESIZEPALETTE* = 000000139H;
    META_DIBBITBLT* = 000000940H;
    META_DIBSTRETCHBLT* = 000000B41H;
    META_DIBCREATEPATTERNBRUSH* = 000000142H;
    META_STRETCHDIB* = 000000F43H;
    META_EXTFLOODFILL* = 000000548H;
    META_DELETEOBJECT* = 0000001F0H;
    META_CREATEPALETTE* = 0000000F7H;
    META_CREATEPATTERNBRUSH* = 0000001F9H;
    META_CREATEPENINDIRECT* = 0000002FAH;
    META_CREATEFONTINDIRECT* = 0000002FBH;
    META_CREATEBRUSHINDIRECT* = 0000002FCH;
    META_CREATEREGION* = 0000006FFH;
    NEWFRAME* = 000000001H;
    ABORTDOC* = 000000002H;
    NEXTBAND* = 000000003H;
    SETCOLORTABLE* = 000000004H;
    GETCOLORTABLE* = 000000005H;
    FLUSHOUTPUT* = 000000006H;
    DRAFTMODE* = 000000007H;
    QUERYESCSUPPORT* = 000000008H;
    SETABORTPROC* = 000000009H;
    STARTDOC* = 00000000AH;
    ENDDOC* = 00000000BH;
    GETPHYSPAGESIZE* = 00000000CH;
    GETPRINTINGOFFSET* = 00000000DH;
    GETSCALINGFACTOR* = 00000000EH;
    MFCOMMENT* = 00000000FH;
    GETPENWIDTH* = 000000010H;
    SETCOPYCOUNT* = 000000011H;
    SELECTPAPERSOURCE* = 000000012H;
    DEVICEDATA* = 000000013H;
    PASSTHROUGH* = 000000013H;
    GETTECHNOLGY* = 000000014H;
    GETTECHNOLOGY* = 000000014H;
    SETLINECAP* = 000000015H;
    SETLINEJOIN* = 000000016H;
    SETMITERLIMIT* = 000000017H;
    BANDINFO* = 000000018H;
    DRAWPATTERNRECT* = 000000019H;
    GETVECTORPENSIZE* = 00000001AH;
    GETVECTORBRUSHSIZE* = 00000001BH;
    ENABLEDUPLEX* = 00000001CH;
    GETSETPAPERBINS* = 00000001DH;
    GETSETPRINTORIENT* = 00000001EH;
    ENUMPAPERBINS* = 00000001FH;
    SETDIBSCALING* = 000000020H;
    EPSPRINTING* = 000000021H;
    ENUMPAPERMETRICS* = 000000022H;
    GETSETPAPERMETRICS* = 000000023H;
    POSTSCRIPT_DATA* = 000000025H;
    POSTSCRIPT_IGNORE* = 000000026H;
    MOUSETRAILS* = 000000027H;
    GETDEVICEUNITS* = 00000002AH;
    GETEXTENDEDTEXTMETRICS* = 000000100H;
    GETEXTENTTABLE* = 000000101H;
    GETPAIRKERNTABLE* = 000000102H;
    GETTRACKKERNTABLE* = 000000103H;
    EXTTEXTOUT* = 000000200H;
    GETFACENAME* = 000000201H;
    DOWNLOADFACE* = 000000202H;
    ENABLERELATIVEWIDTHS* = 000000300H;
    ENABLEPAIRKERNING* = 000000301H;
    SETKERNTRACK* = 000000302H;
    SETALLJUSTVALUES* = 000000303H;
    SETCHARSET* = 000000304H;
    STRETCHBLT* = 000000800H;
    GETSETSCREENPARAMS* = 000000C00H;
    QUERYDIBSUPPORT* = 000000C01H;
    BEGIN_PATH* = 000001000H;
    CLIP_TO_PATH* = 000001001H;
    END_PATH* = 000001002H;
    EXT_DEVICE_CAPS* = 000001003H;
    RESTORE_CTM* = 000001004H;
    SAVE_CTM* = 000001005H;
    SET_ARC_DIRECTION* = 000001006H;
    SET_BACKGROUND_COLOR* = 000001007H;
    SET_POLY_MODE* = 000001008H;
    SET_SCREEN_ANGLE* = 000001009H;
    SET_SPREAD* = 00000100AH;
    TRANSFORM_CTM* = 00000100BH;
    SET_CLIP_BOX* = 00000100CH;
    SET_BOUNDS* = 00000100DH;
    SET_MIRROR_MODE* = 00000100EH;
    OPENCHANNEL* = 00000100EH;
    DOWNLOADHEADER* = 00000100FH;
    CLOSECHANNEL* = 000001010H;
    POSTSCRIPT_PASSTHROUGH* = 000001013H;
    ENCAPSULATED_POSTSCRIPT* = 000001014H;
    POSTSCRIPT_IDENTIFY* = 000001015H;
    POSTSCRIPT_INJECTION* = 000001016H;
    PSIDENT_GDICENTRIC* = 000000000H;
    PSIDENT_PSCENTRIC* = 000000001H;
    PSINJECT_APPEND* = 000000000H;
    PSINJECT_REPLACE* = 000000001H;
    PSINJECT_BEGINSTREAM* = 000000000H;
    PSINJECT_PSADOBE* = 000000001H;
    PSINJECT_COMMENTS* = 000000002H;
    PSINJECT_BEGINDEFAULTS* = 000000003H;
    PSINJECT_ENDDEFAULTS* = 000000004H;
    PSINJECT_BEGINPROLOG* = 000000005H;
    PSINJECT_ENDPROLOG* = 000000006H;
    PSINJECT_BEGINSETUP* = 000000007H;
    PSINJECT_ENDSETUP* = 000000008H;
    PSINJECT_ENDPAGECOMMENTS* = 000000009H;
    PSINJECT_BEGINPAGESETUP* = 00000000AH;
    PSINJECT_ENDPAGESETUP* = 00000000BH;
    PSINJECT_SHOWPAGE* = 00000000CH;
    PSINJECT_PAGETRAILER* = 00000000DH;
    PSINJECT_TRAILER* = 00000000EH;
    PSINJECT_EOF* = 00000000FH;
    PSINJECT_ENDSTREAM* = 000000010H;
    PSINJECT_VMSAVE* = 000000011H;
    PSINJECT_VMRESTORE* = 000000012H;
    PSINJECT_DOCNEEDEDRES* = 000000013H;
    PSINJECT_DOCSUPPLIEDRES* = 000000014H;
    PSINJECT_PAGES* = 000000015H;
    PSINJECT_PAGEORDER* = 000000016H;
    PSINJECT_ORIENTATION* = 000000017H;
    PSINJECT_BOUNDINGBOX* = 000000018H;
    PSINJECT_PAGENUMBER* = 000000019H;
    PSINJECT_PAGEBBOX* = 00000001AH;
    PSINJECT_MAX* = 00000001BH;
    QDI_SETDIBITS* = 000000001H;
    QDI_GETDIBITS* = 000000002H;
    QDI_DIBTOSCREEN* = 000000004H;
    QDI_STRETCHDIB* = 000000008H;
    SP_NOTREPORTED* = 000004000H;
    SP_ERROR* = 0FFFFFFFFH;
    SP_APPABORT* = 0FFFFFFFEH;
    SP_USERABORT* = 0FFFFFFFDH;
    SP_OUTOFDISK* = 0FFFFFFFCH;
    SP_OUTOFMEMORY* = 0FFFFFFFBH;
    PR_JOBSTATUS* = 000000000H;
    OBJ_PEN* = 000000001H;
    OBJ_BRUSH* = 000000002H;
    OBJ_DC* = 000000003H;
    OBJ_METADC* = 000000004H;
    OBJ_PAL* = 000000005H;
    OBJ_FONT* = 000000006H;
    OBJ_BITMAP* = 000000007H;
    OBJ_REGION* = 000000008H;
    OBJ_METAFILE* = 000000009H;
    OBJ_MEMDC* = 00000000AH;
    OBJ_EXTPEN* = 00000000BH;
    OBJ_ENHMETADC* = 00000000CH;
    OBJ_ENHMETAFILE* = 00000000DH;
    MWT_IDENTITY* = 000000001H;
    MWT_LEFTMULTIPLY* = 000000002H;
    MWT_RIGHTMULTIPLY* = 000000003H;
    MWT_MIN* = 000000001H;
    MWT_MAX* = 000000003H;
    CS_ENABLE* = 000000001H;
    CS_DISABLE* = 000000002H;
    CS_DELETE_TRANSFORM* = 000000003H;
    LCS_CALIBRATED_RGB* = 000000000H;
    LCS_DEVICE_RGB* = 000000001H;
    LCS_DEVICE_CMYK* = 000000002H;
    LCS_GM_BUSINESS* = 000000001H;
    LCS_GM_GRAPHICS* = 000000002H;
    LCS_GM_IMAGES* = 000000004H;
    LCS_GM_ABS_COLORIMETRIC* = 000000008H;
    CM_OUT_OF_GAMUT* = 0000000FFH;
    CM_IN_GAMUT* = 000000000H;
    ICM_ADDPROFILE* = 000000001H;
    ICM_DELETEPROFILE* = 000000002H;
    ICM_QUERYPROFILE* = 000000003H;
    ICM_SETDEFAULTPROFILE* = 000000004H;
    ICM_REGISTERICMATCHER* = 000000005H;
    ICM_UNREGISTERICMATCHER* = 000000006H;
    ICM_QUERYMATCH* = 000000007H;
    BI_RGB* = 000000000H;
    BI_RLE8* = 000000001H;
    BI_RLE4* = 000000002H;
    BI_BITFIELDS* = 000000003H;
    TCI_SRCCHARSET* = 000000001H;
    TCI_SRCCODEPAGE* = 000000002H;
    TCI_SRCFONTSIG* = 000000003H;
    TMPF_FIXED_PITCH* = 000000001H;
    TMPF_VECTOR* = 000000002H;
    TMPF_DEVICE* = 000000008H;
    TMPF_TRUETYPE* = 000000004H;
    NTM_REGULAR* = 000000040H;
    NTM_BOLD* = 000000020H;
    NTM_ITALIC* = 000000001H;
    NTM_NONNEGATIVE_AC* = 000010000H;
    NTM_OPENTYPE* = 000020000H;
    NTM_MULTIPLEMASTER* = 000040000H;
    NTM_MM_INSTANCE* = 000080000H;
    NTM_TYPE1* = 000100000H;
    NTM_DSIG* = 000200000H;
    LF_FACESIZE* = 000000020H;
    LF_FULLFACESIZE* = 000000040H;
    OUT_DEFAULT_PRECIS* = 000000000H;
    OUT_STRING_PRECIS* = 000000001H;
    OUT_CHARACTER_PRECIS* = 000000002H;
    OUT_STROKE_PRECIS* = 000000003H;
    OUT_TT_PRECIS* = 000000004H;
    OUT_DEVICE_PRECIS* = 000000005H;
    OUT_RASTER_PRECIS* = 000000006H;
    OUT_TT_ONLY_PRECIS* = 000000007H;
    OUT_OUTLINE_PRECIS* = 000000008H;
    OUT_SCREEN_OUTLINE_PRECIS* = 000000009H;
    CLIP_DEFAULT_PRECIS* = 000000000H;
    CLIP_CHARACTER_PRECIS* = 000000001H;
    CLIP_STROKE_PRECIS* = 000000002H;
    CLIP_MASK* = 00000000FH;
    CLIP_LH_ANGLES* = 000000010H;
    CLIP_TT_ALWAYS* = 000000020H;
    CLIP_EMBEDDED* = 000000080H;
    DEFAULT_QUALITY* = 000000000H;
    DRAFT_QUALITY* = 000000001H;
    PROOF_QUALITY* = 000000002H;
    NONANTIALIASED_QUALITY* = 000000003H;
    ANTIALIASED_QUALITY* = 000000004H;
    DEFAULT_PITCH* = 000000000H;
    FIXED_PITCH* = 000000001H;
    VARIABLE_PITCH* = 000000002H;
    MONO_FONT* = 000000008H;
    ANSI_CHARSET* = 000000000H;
    DEFAULT_CHARSET* = 000000001H;
    SYMBOL_CHARSET* = 000000002H;
    SHIFTJIS_CHARSET* = 000000080H;
    HANGEUL_CHARSET* = 000000081H;
    HANGUL_CHARSET* = 000000081H;
    GB2312_CHARSET* = 000000086H;
    CHINESEBIG5_CHARSET* = 000000088H;
    OEM_CHARSET* = 0000000FFH;
    JOHAB_CHARSET* = 000000082H;
    HEBREW_CHARSET* = 0000000B1H;
    ARABIC_CHARSET* = 0000000B2H;
    GREEK_CHARSET* = 0000000A1H;
    TURKISH_CHARSET* = 0000000A2H;
    VIETNAMESE_CHARSET* = 0000000A3H;
    THAI_CHARSET* = 0000000DEH;
    EASTEUROPE_CHARSET* = 0000000EEH;
    RUSSIAN_CHARSET* = 0000000CCH;
    MAC_CHARSET* = 00000004DH;
    BALTIC_CHARSET* = 0000000BAH;
    FS_LATIN1* = 000000001H;
    FS_LATIN2* = 000000002H;
    FS_CYRILLIC* = 000000004H;
    FS_GREEK* = 000000008H;
    FS_TURKISH* = 000000010H;
    FS_HEBREW* = 000000020H;
    FS_ARABIC* = 000000040H;
    FS_BALTIC* = 000000080H;
    FS_VIETNAMESE* = 000000100H;
    FS_THAI* = 000010000H;
    FS_JISJAPAN* = 000020000H;
    FS_CHINESESIMP* = 000040000H;
    FS_WANSUNG* = 000080000H;
    FS_CHINESETRAD* = 000100000H;
    FS_JOHAB* = 000200000H;
    FS_SYMBOL* = 080000000H;
    FF_DONTCARE* = 000000000H;
    FF_ROMAN* = 000000010H;
    FF_SWISS* = 000000020H;
    FF_MODERN* = 000000030H;
    FF_SCRIPT* = 000000040H;
    FF_DECORATIVE* = 000000050H;
    FW_DONTCARE* = 000000000H;
    FW_THIN* = 000000064H;
    FW_EXTRALIGHT* = 0000000C8H;
    FW_LIGHT* = 00000012CH;
    FW_NORMAL* = 000000190H;
    FW_MEDIUM* = 0000001F4H;
    FW_SEMIBOLD* = 000000258H;
    FW_BOLD* = 0000002BCH;
    FW_EXTRABOLD* = 000000320H;
    FW_HEAVY* = 000000384H;
    FW_ULTRALIGHT* = 0000000C8H;
    FW_REGULAR* = 000000190H;
    FW_DEMIBOLD* = 000000258H;
    FW_ULTRABOLD* = 000000320H;
    FW_BLACK* = 000000384H;
    PANOSE_COUNT* = 00000000AH;
    PAN_FAMILYTYPE_INDEX* = 000000000H;
    PAN_SERIFSTYLE_INDEX* = 000000001H;
    PAN_WEIGHT_INDEX* = 000000002H;
    PAN_PROPORTION_INDEX* = 000000003H;
    PAN_CONTRAST_INDEX* = 000000004H;
    PAN_STROKEVARIATION_INDEX* = 000000005H;
    PAN_ARMSTYLE_INDEX* = 000000006H;
    PAN_LETTERFORM_INDEX* = 000000007H;
    PAN_MIDLINE_INDEX* = 000000008H;
    PAN_XHEIGHT_INDEX* = 000000009H;
    PAN_CULTURE_LATIN* = 000000000H;
    PAN_ANY* = 000000000H;
    PAN_NO_FIT* = 000000001H;
    PAN_FAMILY_TEXT_DISPLAY* = 000000002H;
    PAN_FAMILY_SCRIPT* = 000000003H;
    PAN_FAMILY_DECORATIVE* = 000000004H;
    PAN_FAMILY_PICTORIAL* = 000000005H;
    PAN_SERIF_COVE* = 000000002H;
    PAN_SERIF_OBTUSE_COVE* = 000000003H;
    PAN_SERIF_SQUARE_COVE* = 000000004H;
    PAN_SERIF_OBTUSE_SQUARE_COVE* = 000000005H;
    PAN_SERIF_SQUARE* = 000000006H;
    PAN_SERIF_THIN* = 000000007H;
    PAN_SERIF_BONE* = 000000008H;
    PAN_SERIF_EXAGGERATED* = 000000009H;
    PAN_SERIF_TRIANGLE* = 00000000AH;
    PAN_SERIF_NORMAL_SANS* = 00000000BH;
    PAN_SERIF_OBTUSE_SANS* = 00000000CH;
    PAN_SERIF_PERP_SANS* = 00000000DH;
    PAN_SERIF_FLARED* = 00000000EH;
    PAN_SERIF_ROUNDED* = 00000000FH;
    PAN_WEIGHT_VERY_LIGHT* = 000000002H;
    PAN_WEIGHT_LIGHT* = 000000003H;
    PAN_WEIGHT_THIN* = 000000004H;
    PAN_WEIGHT_BOOK* = 000000005H;
    PAN_WEIGHT_MEDIUM* = 000000006H;
    PAN_WEIGHT_DEMI* = 000000007H;
    PAN_WEIGHT_BOLD* = 000000008H;
    PAN_WEIGHT_HEAVY* = 000000009H;
    PAN_WEIGHT_BLACK* = 00000000AH;
    PAN_WEIGHT_NORD* = 00000000BH;
    PAN_PROP_OLD_STYLE* = 000000002H;
    PAN_PROP_MODERN* = 000000003H;
    PAN_PROP_EVEN_WIDTH* = 000000004H;
    PAN_PROP_EXPANDED* = 000000005H;
    PAN_PROP_CONDENSED* = 000000006H;
    PAN_PROP_VERY_EXPANDED* = 000000007H;
    PAN_PROP_VERY_CONDENSED* = 000000008H;
    PAN_PROP_MONOSPACED* = 000000009H;
    PAN_CONTRAST_NONE* = 000000002H;
    PAN_CONTRAST_VERY_LOW* = 000000003H;
    PAN_CONTRAST_LOW* = 000000004H;
    PAN_CONTRAST_MEDIUM_LOW* = 000000005H;
    PAN_CONTRAST_MEDIUM* = 000000006H;
    PAN_CONTRAST_MEDIUM_HIGH* = 000000007H;
    PAN_CONTRAST_HIGH* = 000000008H;
    PAN_CONTRAST_VERY_HIGH* = 000000009H;
    PAN_STROKE_GRADUAL_DIAG* = 000000002H;
    PAN_STROKE_GRADUAL_TRAN* = 000000003H;
    PAN_STROKE_GRADUAL_VERT* = 000000004H;
    PAN_STROKE_GRADUAL_HORZ* = 000000005H;
    PAN_STROKE_RAPID_VERT* = 000000006H;
    PAN_STROKE_RAPID_HORZ* = 000000007H;
    PAN_STROKE_INSTANT_VERT* = 000000008H;
    PAN_STRAIGHT_ARMS_HORZ* = 000000002H;
    PAN_STRAIGHT_ARMS_WEDGE* = 000000003H;
    PAN_STRAIGHT_ARMS_VERT* = 000000004H;
    PAN_STRAIGHT_ARMS_SINGLE_SERIF* = 000000005H;
    PAN_STRAIGHT_ARMS_DOUBLE_SERIF* = 000000006H;
    PAN_BENT_ARMS_HORZ* = 000000007H;
    PAN_BENT_ARMS_WEDGE* = 000000008H;
    PAN_BENT_ARMS_VERT* = 000000009H;
    PAN_BENT_ARMS_SINGLE_SERIF* = 00000000AH;
    PAN_BENT_ARMS_DOUBLE_SERIF* = 00000000BH;
    PAN_LETT_NORMAL_CONTACT* = 000000002H;
    PAN_LETT_NORMAL_WEIGHTED* = 000000003H;
    PAN_LETT_NORMAL_BOXED* = 000000004H;
    PAN_LETT_NORMAL_FLATTENED* = 000000005H;
    PAN_LETT_NORMAL_ROUNDED* = 000000006H;
    PAN_LETT_NORMAL_OFF_CENTER* = 000000007H;
    PAN_LETT_NORMAL_SQUARE* = 000000008H;
    PAN_LETT_OBLIQUE_CONTACT* = 000000009H;
    PAN_LETT_OBLIQUE_WEIGHTED* = 00000000AH;
    PAN_LETT_OBLIQUE_BOXED* = 00000000BH;
    PAN_LETT_OBLIQUE_FLATTENED* = 00000000CH;
    PAN_LETT_OBLIQUE_ROUNDED* = 00000000DH;
    PAN_LETT_OBLIQUE_OFF_CENTER* = 00000000EH;
    PAN_LETT_OBLIQUE_SQUARE* = 00000000FH;
    PAN_MIDLINE_STANDARD_TRIMMED* = 000000002H;
    PAN_MIDLINE_STANDARD_POINTED* = 000000003H;
    PAN_MIDLINE_STANDARD_SERIFED* = 000000004H;
    PAN_MIDLINE_HIGH_TRIMMED* = 000000005H;
    PAN_MIDLINE_HIGH_POINTED* = 000000006H;
    PAN_MIDLINE_HIGH_SERIFED* = 000000007H;
    PAN_MIDLINE_CONSTANT_TRIMMED* = 000000008H;
    PAN_MIDLINE_CONSTANT_POINTED* = 000000009H;
    PAN_MIDLINE_CONSTANT_SERIFED* = 00000000AH;
    PAN_MIDLINE_LOW_TRIMMED* = 00000000BH;
    PAN_MIDLINE_LOW_POINTED* = 00000000CH;
    PAN_MIDLINE_LOW_SERIFED* = 00000000DH;
    PAN_XHEIGHT_CONSTANT_SMALL* = 000000002H;
    PAN_XHEIGHT_CONSTANT_STD* = 000000003H;
    PAN_XHEIGHT_CONSTANT_LARGE* = 000000004H;
    PAN_XHEIGHT_DUCKING_SMALL* = 000000005H;
    PAN_XHEIGHT_DUCKING_STD* = 000000006H;
    PAN_XHEIGHT_DUCKING_LARGE* = 000000007H;
    ELF_VENDOR_SIZE* = 000000004H;
    ELF_VERSION* = 000000000H;
    ELF_CULTURE_LATIN* = 000000000H;
    RASTER_FONTTYPE* = 000000001H;
    DEVICE_FONTTYPE* = 000000002H;
    TRUETYPE_FONTTYPE* = 000000004H;
    PC_RESERVED* = 000000001H;
    PC_EXPLICIT* = 000000002H;
    PC_NOCOLLAPSE* = 000000004H;
    TRANSPARENT* = 000000001H;
    OPAQUE* = 000000002H;
    BKMODE_LAST* = 000000002H;
    GM_COMPATIBLE* = 000000001H;
    GM_ADVANCED* = 000000002H;
    GM_LAST* = 000000002H;
    PT_CLOSEFIGURE* = 000000001H;
    PT_LINETO* = 000000002H;
    PT_BEZIERTO* = 000000004H;
    PT_MOVETO* = 000000006H;
    MM_TEXT* = 000000001H;
    MM_LOMETRIC* = 000000002H;
    MM_HIMETRIC* = 000000003H;
    MM_LOENGLISH* = 000000004H;
    MM_HIENGLISH* = 000000005H;
    MM_TWIPS* = 000000006H;
    MM_ISOTROPIC* = 000000007H;
    MM_ANISOTROPIC* = 000000008H;
    MM_MIN* = 000000001H;
    MM_MAX* = 000000008H;
    MM_MAX_FIXEDSCALE* = 000000006H;
    ABSOLUTE* = 000000001H;
    RELATIVE* = 000000002H;
    WHITE_BRUSH* = 000000000H;
    LTGRAY_BRUSH* = 000000001H;
    GRAY_BRUSH* = 000000002H;
    DKGRAY_BRUSH* = 000000003H;
    BLACK_BRUSH* = 000000004H;
    NULL_BRUSH* = 000000005H;
    HOLLOW_BRUSH* = 000000005H;
    WHITE_PEN* = 000000006H;
    BLACK_PEN* = 000000007H;
    NULL_PEN* = 000000008H;
    OEM_FIXED_FONT* = 00000000AH;
    ANSI_FIXED_FONT* = 00000000BH;
    ANSI_VAR_FONT* = 00000000CH;
    SYSTEM_FONT* = 00000000DH;
    DEVICE_DEFAULT_FONT* = 00000000EH;
    DEFAULT_PALETTE* = 00000000FH;
    SYSTEM_FIXED_FONT* = 000000010H;
    DEFAULT_GUI_FONT* = 000000011H;
    STOCK_LAST* = 000000011H;
    CLR_INVALID* = 0FFFFFFFFH;
    BS_SOLID* = 000000000H;
    BS_NULL* = 000000001H;
    BS_HOLLOW* = 000000001H;
    BS_HATCHED* = 000000002H;
    BS_PATTERN* = 000000003H;
    BS_INDEXED* = 000000004H;
    BS_DIBPATTERN* = 000000005H;
    BS_DIBPATTERNPT* = 000000006H;
    BS_PATTERN8X8* = 000000007H;
    BS_DIBPATTERN8X8* = 000000008H;
    BS_MONOPATTERN* = 000000009H;
    HS_HORIZONTAL* = 000000000H;
    HS_VERTICAL* = 000000001H;
    HS_FDIAGONAL* = 000000002H;
    HS_BDIAGONAL* = 000000003H;
    HS_CROSS* = 000000004H;
    HS_DIAGCROSS* = 000000005H;
    PS_SOLID* = 000000000H;
    PS_DASH* = 000000001H;
    PS_DOT* = 000000002H;
    PS_DASHDOT* = 000000003H;
    PS_DASHDOTDOT* = 000000004H;
    PS_NULL* = 000000005H;
    PS_INSIDEFRAME* = 000000006H;
    PS_USERSTYLE* = 000000007H;
    PS_ALTERNATE* = 000000008H;
    PS_STYLE_MASK* = 00000000FH;
    PS_ENDCAP_ROUND* = 000000000H;
    PS_ENDCAP_SQUARE* = 000000100H;
    PS_ENDCAP_FLAT* = 000000200H;
    PS_ENDCAP_MASK* = 000000F00H;
    PS_JOIN_ROUND* = 000000000H;
    PS_JOIN_BEVEL* = 000001000H;
    PS_JOIN_MITER* = 000002000H;
    PS_JOIN_MASK* = 00000F000H;
    PS_COSMETIC* = 000000000H;
    PS_GEOMETRIC* = 000010000H;
    PS_TYPE_MASK* = 0000F0000H;
    AD_COUNTERCLOCKWISE* = 000000001H;
    AD_CLOCKWISE* = 000000002H;
    DRIVERVERSION* = 000000000H;
    TECHNOLOGY* = 000000002H;
    HORZSIZE* = 000000004H;
    VERTSIZE* = 000000006H;
    HORZRES* = 000000008H;
    VERTRES* = 00000000AH;
    BITSPIXEL* = 00000000CH;
    PLANES* = 00000000EH;
    NUMBRUSHES* = 000000010H;
    NUMPENS* = 000000012H;
    NUMMARKERS* = 000000014H;
    NUMFONTS* = 000000016H;
    NUMCOLORS* = 000000018H;
    PDEVICESIZE* = 00000001AH;
    CURVECAPS* = 00000001CH;
    LINECAPS* = 00000001EH;
    POLYGONALCAPS* = 000000020H;
    TEXTCAPS* = 000000022H;
    CLIPCAPS* = 000000024H;
    RASTERCAPS* = 000000026H;
    ASPECTX* = 000000028H;
    ASPECTY* = 00000002AH;
    ASPECTXY* = 00000002CH;
    LOGPIXELSX* = 000000058H;
    LOGPIXELSY* = 00000005AH;
    SIZEPALETTE* = 000000068H;
    NUMRESERVED* = 00000006AH;
    COLORRES* = 00000006CH;
    PHYSICALWIDTH* = 00000006EH;
    PHYSICALHEIGHT* = 00000006FH;
    PHYSICALOFFSETX* = 000000070H;
    PHYSICALOFFSETY* = 000000071H;
    SCALINGFACTORX* = 000000072H;
    SCALINGFACTORY* = 000000073H;
    VREFRESH* = 000000074H;
    DESKTOPVERTRES* = 000000075H;
    DESKTOPHORZRES* = 000000076H;
    BLTALIGNMENT* = 000000077H;
    DT_PLOTTER* = 000000000H;
    DT_RASDISPLAY* = 000000001H;
    DT_RASPRINTER* = 000000002H;
    DT_RASCAMERA* = 000000003H;
    DT_CHARSTREAM* = 000000004H;
    DT_METAFILE* = 000000005H;
    DT_DISPFILE* = 000000006H;
    CC_NONE* = 000000000H;
    CC_CIRCLES* = 000000001H;
    CC_PIE* = 000000002H;
    CC_CHORD* = 000000004H;
    CC_ELLIPSES* = 000000008H;
    CC_WIDE* = 000000010H;
    CC_STYLED* = 000000020H;
    CC_WIDESTYLED* = 000000040H;
    CC_INTERIORS* = 000000080H;
    CC_ROUNDRECT* = 000000100H;
    LC_NONE* = 000000000H;
    LC_POLYLINE* = 000000002H;
    LC_MARKER* = 000000004H;
    LC_POLYMARKER* = 000000008H;
    LC_WIDE* = 000000010H;
    LC_STYLED* = 000000020H;
    LC_WIDESTYLED* = 000000040H;
    LC_INTERIORS* = 000000080H;
    PC_NONE* = 000000000H;
    PC_POLYGON* = 000000001H;
    PC_RECTANGLE* = 000000002H;
    PC_WINDPOLYGON* = 000000004H;
    PC_TRAPEZOID* = 000000004H;
    PC_SCANLINE* = 000000008H;
    PC_WIDE* = 000000010H;
    PC_STYLED* = 000000020H;
    PC_WIDESTYLED* = 000000040H;
    PC_INTERIORS* = 000000080H;
    PC_POLYPOLYGON* = 000000100H;
    PC_PATHS* = 000000200H;
    CP_NONE* = 000000000H;
    CP_RECTANGLE* = 000000001H;
    CP_REGION* = 000000002H;
    TC_OP_CHARACTER* = 000000001H;
    TC_OP_STROKE* = 000000002H;
    TC_CP_STROKE* = 000000004H;
    TC_CR_90* = 000000008H;
    TC_CR_ANY* = 000000010H;
    TC_SF_X_YINDEP* = 000000020H;
    TC_SA_DOUBLE* = 000000040H;
    TC_SA_INTEGER* = 000000080H;
    TC_SA_CONTIN* = 000000100H;
    TC_EA_DOUBLE* = 000000200H;
    TC_IA_ABLE* = 000000400H;
    TC_UA_ABLE* = 000000800H;
    TC_SO_ABLE* = 000001000H;
    TC_RA_ABLE* = 000002000H;
    TC_VA_ABLE* = 000004000H;
    TC_RESERVED* = 000008000H;
    TC_SCROLLBLT* = 000010000H;
    RC_BITBLT* = 000000001H;
    RC_BANDING* = 000000002H;
    RC_SCALING* = 000000004H;
    RC_BITMAP64* = 000000008H;
    RC_GDI20_OUTPUT* = 000000010H;
    RC_GDI20_STATE* = 000000020H;
    RC_SAVEBITMAP* = 000000040H;
    RC_DI_BITMAP* = 000000080H;
    RC_PALETTE* = 000000100H;
    RC_DIBTODEV* = 000000200H;
    RC_BIGFONT* = 000000400H;
    RC_STRETCHBLT* = 000000800H;
    RC_FLOODFILL* = 000001000H;
    RC_STRETCHDIB* = 000002000H;
    RC_OP_DX_OUTPUT* = 000004000H;
    RC_DEVBITS* = 000008000H;
    DIB_RGB_COLORS* = 000000000H;
    DIB_PAL_COLORS* = 000000001H;
    SYSPAL_ERROR* = 000000000H;
    SYSPAL_STATIC* = 000000001H;
    SYSPAL_NOSTATIC* = 000000002H;
    SYSPAL_NOSTATIC256* = 000000003H;
    CBM_INIT* = 000000004H;
    FLOODFILLBORDER* = 000000000H;
    FLOODFILLSURFACE* = 000000001H;
    CCHDEVICENAME* = 000000020H;
    CCHFORMNAME* = 000000020H;
    DM_SPECVERSION* = 000000401H;
    DM_ORIENTATION* = 000000001H;
    DM_PAPERSIZE* = 000000002H;
    DM_PAPERLENGTH* = 000000004H;
    DM_PAPERWIDTH* = 000000008H;
    DM_SCALE* = 000000010H;
    DM_COPIES* = 000000100H;
    DM_DEFAULTSOURCE* = 000000200H;
    DM_PRINTQUALITY* = 000000400H;
    DM_COLOR* = 000000800H;
    DM_DUPLEX* = 000001000H;
    DM_YRESOLUTION* = 000002000H;
    DM_TTOPTION* = 000004000H;
    DM_COLLATE* = 000008000H;
    DM_FORMNAME* = 000010000H;
    DM_LOGPIXELS* = 000020000H;
    DM_BITSPERPEL* = 000040000H;
    DM_PELSWIDTH* = 000080000H;
    DM_PELSHEIGHT* = 000100000H;
    DM_DISPLAYFLAGS* = 000200000H;
    DM_DISPLAYFREQUENCY* = 000400000H;
    DM_ICMMETHOD* = 000800000H;
    DM_ICMINTENT* = 001000000H;
    DM_MEDIATYPE* = 002000000H;
    DM_DITHERTYPE* = 004000000H;
    DM_PANNINGWIDTH* = 008000000H;
    DM_PANNINGHEIGHT* = 010000000H;
    DMORIENT_PORTRAIT* = 000000001H;
    DMORIENT_LANDSCAPE* = 000000002H;
    DMPAPER_FIRST* = 000000001H;
    DMPAPER_LETTER* = 000000001H;
    DMPAPER_LETTERSMALL* = 000000002H;
    DMPAPER_TABLOID* = 000000003H;
    DMPAPER_LEDGER* = 000000004H;
    DMPAPER_LEGAL* = 000000005H;
    DMPAPER_STATEMENT* = 000000006H;
    DMPAPER_EXECUTIVE* = 000000007H;
    DMPAPER_A3* = 000000008H;
    DMPAPER_A4* = 000000009H;
    DMPAPER_A4SMALL* = 00000000AH;
    DMPAPER_A5* = 00000000BH;
    DMPAPER_B4* = 00000000CH;
    DMPAPER_B5* = 00000000DH;
    DMPAPER_FOLIO* = 00000000EH;
    DMPAPER_QUARTO* = 00000000FH;
    DMPAPER_10X14* = 000000010H;
    DMPAPER_11X17* = 000000011H;
    DMPAPER_NOTE* = 000000012H;
    DMPAPER_ENV_9* = 000000013H;
    DMPAPER_ENV_10* = 000000014H;
    DMPAPER_ENV_11* = 000000015H;
    DMPAPER_ENV_12* = 000000016H;
    DMPAPER_ENV_14* = 000000017H;
    DMPAPER_CSHEET* = 000000018H;
    DMPAPER_DSHEET* = 000000019H;
    DMPAPER_ESHEET* = 00000001AH;
    DMPAPER_ENV_DL* = 00000001BH;
    DMPAPER_ENV_C5* = 00000001CH;
    DMPAPER_ENV_C3* = 00000001DH;
    DMPAPER_ENV_C4* = 00000001EH;
    DMPAPER_ENV_C6* = 00000001FH;
    DMPAPER_ENV_C65* = 000000020H;
    DMPAPER_ENV_B4* = 000000021H;
    DMPAPER_ENV_B5* = 000000022H;
    DMPAPER_ENV_B6* = 000000023H;
    DMPAPER_ENV_ITALY* = 000000024H;
    DMPAPER_ENV_MONARCH* = 000000025H;
    DMPAPER_ENV_PERSONAL* = 000000026H;
    DMPAPER_FANFOLD_US* = 000000027H;
    DMPAPER_FANFOLD_STD_GERMAN* = 000000028H;
    DMPAPER_FANFOLD_LGL_GERMAN* = 000000029H;
    DMPAPER_ISO_B4* = 00000002AH;
    DMPAPER_JAPANESE_POSTCARD* = 00000002BH;
    DMPAPER_9X11* = 00000002CH;
    DMPAPER_10X11* = 00000002DH;
    DMPAPER_15X11* = 00000002EH;
    DMPAPER_ENV_INVITE* = 00000002FH;
    DMPAPER_RESERVED_48* = 000000030H;
    DMPAPER_RESERVED_49* = 000000031H;
    DMPAPER_LETTER_EXTRA* = 000000032H;
    DMPAPER_LEGAL_EXTRA* = 000000033H;
    DMPAPER_TABLOID_EXTRA* = 000000034H;
    DMPAPER_A4_EXTRA* = 000000035H;
    DMPAPER_LETTER_TRANSVERSE* = 000000036H;
    DMPAPER_A4_TRANSVERSE* = 000000037H;
    DMPAPER_LETTER_EXTRA_TRANSVERSE* = 000000038H;
    DMPAPER_A_PLUS* = 000000039H;
    DMPAPER_B_PLUS* = 00000003AH;
    DMPAPER_LETTER_PLUS* = 00000003BH;
    DMPAPER_A4_PLUS* = 00000003CH;
    DMPAPER_A5_TRANSVERSE* = 00000003DH;
    DMPAPER_B5_TRANSVERSE* = 00000003EH;
    DMPAPER_A3_EXTRA* = 00000003FH;
    DMPAPER_A5_EXTRA* = 000000040H;
    DMPAPER_B5_EXTRA* = 000000041H;
    DMPAPER_A2* = 000000042H;
    DMPAPER_A3_TRANSVERSE* = 000000043H;
    DMPAPER_A3_EXTRA_TRANSVERSE* = 000000044H;
    DMPAPER_LAST* = 000000044H;
    DMPAPER_USER* = 000000100H;
    DMBIN_FIRST* = 000000001H;
    DMBIN_UPPER* = 000000001H;
    DMBIN_ONLYONE* = 000000001H;
    DMBIN_LOWER* = 000000002H;
    DMBIN_MIDDLE* = 000000003H;
    DMBIN_MANUAL* = 000000004H;
    DMBIN_ENVELOPE* = 000000005H;
    DMBIN_ENVMANUAL* = 000000006H;
    DMBIN_AUTO* = 000000007H;
    DMBIN_TRACTOR* = 000000008H;
    DMBIN_SMALLFMT* = 000000009H;
    DMBIN_LARGEFMT* = 00000000AH;
    DMBIN_LARGECAPACITY* = 00000000BH;
    DMBIN_CASSETTE* = 00000000EH;
    DMBIN_FORMSOURCE* = 00000000FH;
    DMBIN_LAST* = 00000000FH;
    DMBIN_USER* = 000000100H;
    DMRES_DRAFT* = 0FFFFFFFFH;
    DMRES_LOW* = 0FFFFFFFEH;
    DMRES_MEDIUM* = 0FFFFFFFDH;
    DMRES_HIGH* = 0FFFFFFFCH;
    DMCOLOR_MONOCHROME* = 000000001H;
    DMCOLOR_COLOR* = 000000002H;
    DMDUP_SIMPLEX* = 000000001H;
    DMDUP_VERTICAL* = 000000002H;
    DMDUP_HORIZONTAL* = 000000003H;
    DMTT_BITMAP* = 000000001H;
    DMTT_DOWNLOAD* = 000000002H;
    DMTT_SUBDEV* = 000000003H;
    DMTT_DOWNLOAD_OUTLINE* = 000000004H;
    DMCOLLATE_FALSE* = 000000000H;
    DMCOLLATE_TRUE* = 000000001H;
    DMDISPLAYFLAGS_TEXTMODE* = 000000004H;
    DMICMMETHOD_NONE* = 000000001H;
    DMICMMETHOD_SYSTEM* = 000000002H;
    DMICMMETHOD_DRIVER* = 000000003H;
    DMICMMETHOD_DEVICE* = 000000004H;
    DMICMMETHOD_USER* = 000000100H;
    DMICM_SATURATE* = 000000001H;
    DMICM_CONTRAST* = 000000002H;
    DMICM_COLORIMETRIC* = 000000003H;
    DMICM_ABS_COLORIMETRIC* = 000000004H;
    DMICM_USER* = 000000100H;
    DMMEDIA_STANDARD* = 000000001H;
    DMMEDIA_TRANSPARENCY* = 000000002H;
    DMMEDIA_GLOSSY* = 000000003H;
    DMMEDIA_USER* = 000000100H;
    DMDITHER_NONE* = 000000001H;
    DMDITHER_COARSE* = 000000002H;
    DMDITHER_FINE* = 000000003H;
    DMDITHER_LINEART* = 000000004H;
    DMDITHER_ERRORDIFFUSION* = 000000005H;
    DMDITHER_RESERVED6* = 000000006H;
    DMDITHER_RESERVED7* = 000000007H;
    DMDITHER_RESERVED8* = 000000008H;
    DMDITHER_RESERVED9* = 000000009H;
    DMDITHER_GRAYSCALE* = 00000000AH;
    DMDITHER_USER* = 000000100H;
    DISPLAY_DEVICE_ATTACHED_TO_DESKTOP* = 000000001H;
    DISPLAY_DEVICE_MULTI_DRIVER* = 000000002H;
    DISPLAY_DEVICE_PRIMARY_DEVICE* = 000000004H;
    DISPLAY_DEVICE_MIRRORING_DRIVER* = 000000008H;
    DISPLAY_DEVICE_VGA_COMPATIBLE* = 000000010H;
    RDH_RECTANGLES* = 000000001H;
    GGO_METRICS* = 000000000H;
    GGO_BITMAP* = 000000001H;
    GGO_NATIVE* = 000000002H;
    GGO_BEZIER* = 000000003H;
    GGO_GRAY2_BITMAP* = 000000004H;
    GGO_GRAY4_BITMAP* = 000000005H;
    GGO_GRAY8_BITMAP* = 000000006H;
    GGO_GLYPH_INDEX* = 000000080H;
    TT_POLYGON_TYPE* = 000000018H;
    TT_PRIM_LINE* = 000000001H;
    TT_PRIM_QSPLINE* = 000000002H;
    TT_PRIM_CSPLINE* = 000000003H;
    GCP_DBCS* = 000000001H;
    GCP_REORDER* = 000000002H;
    GCP_USEKERNING* = 000000008H;
    GCP_GLYPHSHAPE* = 000000010H;
    GCP_LIGATE* = 000000020H;
    GCP_DIACRITIC* = 000000100H;
    GCP_KASHIDA* = 000000400H;
    GCP_ERROR* = 000008000H;
    FLI_MASK* = 00000103BH;
    GCP_JUSTIFY* = 000010000H;
    FLI_GLYPHS* = 000040000H;
    GCP_CLASSIN* = 000080000H;
    GCP_MAXEXTENT* = 000100000H;
    GCP_JUSTIFYIN* = 000200000H;
    GCP_DISPLAYZWG* = 000400000H;
    GCP_SYMSWAPOFF* = 000800000H;
    GCP_NUMERICOVERRIDE* = 001000000H;
    GCP_NEUTRALOVERRIDE* = 002000000H;
    GCP_NUMERICSLATIN* = 004000000H;
    GCP_NUMERICSLOCAL* = 008000000H;
    GCPCLASS_LATIN* = 000000001H;
    GCPCLASS_HEBREW* = 000000002H;
    GCPCLASS_ARABIC* = 000000002H;
    GCPCLASS_NEUTRAL* = 000000003H;
    GCPCLASS_LOCALNUMBER* = 000000004H;
    GCPCLASS_LATINNUMBER* = 000000005H;
    GCPCLASS_LATINNUMERICTERMINATOR* = 000000006H;
    GCPCLASS_LATINNUMERICSEPARATOR* = 000000007H;
    GCPCLASS_NUMERICSEPARATOR* = 000000008H;
    GCPCLASS_PREBOUNDLTR* = 000000080H;
    GCPCLASS_PREBOUNDRTL* = 000000040H;
    GCPCLASS_POSTBOUNDLTR* = 000000020H;
    GCPCLASS_POSTBOUNDRTL* = 000000010H;
    GCPGLYPH_LINKBEFORE* = 000008000H;
    GCPGLYPH_LINKAFTER* = 000004000H;
    TT_AVAILABLE* = 000000001H;
    TT_ENABLED* = 000000002H;
    PFD_TYPE_RGBA* = 000000000H;
    PFD_TYPE_COLORINDEX* = 000000001H;
    PFD_MAIN_PLANE* = 000000000H;
    PFD_OVERLAY_PLANE* = 000000001H;
    PFD_UNDERLAY_PLANE* = 0FFFFFFFFH;
    PFD_DOUBLEBUFFER* = 000000001H;
    PFD_STEREO* = 000000002H;
    PFD_DRAW_TO_WINDOW* = 000000004H;
    PFD_DRAW_TO_BITMAP* = 000000008H;
    PFD_SUPPORT_GDI* = 000000010H;
    PFD_SUPPORT_OPENGL* = 000000020H;
    PFD_GENERIC_FORMAT* = 000000040H;
    PFD_NEED_PALETTE* = 000000080H;
    PFD_NEED_SYSTEM_PALETTE* = 000000100H;
    PFD_SWAP_EXCHANGE* = 000000200H;
    PFD_SWAP_COPY* = 000000400H;
    PFD_SWAP_LAYER_BUFFERS* = 000000800H;
    PFD_GENERIC_ACCELERATED* = 000001000H;
    PFD_SUPPORT_DIRECTDRAW* = 000002000H;
    PFD_DEPTH_DONTCARE* = 020000000H;
    PFD_DOUBLEBUFFER_DONTCARE* = 040000000H;
    PFD_STEREO_DONTCARE* = 080000000H;
    DC_BINADJUST* = 000000013H;
    DC_EMF_COMPLIANT* = 000000014H;
    DC_DATATYPE_PRODUCED* = 000000015H;
    DC_COLLATE* = 000000016H;
    DC_MANUFACTURER* = 000000017H;
    DC_MODEL* = 000000018H;
    DCTT_BITMAP* = 000000001H;
    DCTT_DOWNLOAD* = 000000002H;
    DCTT_SUBDEV* = 000000004H;
    DCTT_DOWNLOAD_OUTLINE* = 000000008H;
    DCBA_FACEUPNONE* = 000000000H;
    DCBA_FACEUPCENTER* = 000000001H;
    DCBA_FACEUPLEFT* = 000000002H;
    DCBA_FACEUPRIGHT* = 000000003H;
    DCBA_FACEDOWNNONE* = 000000100H;
    DCBA_FACEDOWNCENTER* = 000000101H;
    DCBA_FACEDOWNLEFT* = 000000102H;
    DCBA_FACEDOWNRIGHT* = 000000103H;
    AC_SRC_OVER* = 000000000H;
    AC_SRC_NO_PREMULT_ALPHA* = 000000001H;
    AC_SRC_NO_ALPHA* = 000000002H;
    AC_DST_NO_PREMULT_ALPHA* = 000000010H;
    AC_DST_NO_ALPHA* = 000000020H;
    GRADIENT_FILL_RECT_H* = 000000000H;
    GRADIENT_FILL_RECT_V* = 000000001H;
    GRADIENT_FILL_TRIANGLE* = 000000002H;
    GRADIENT_FILL_OP_FLAG* = 0000000FFH;
    CA_NEGATIVE* = 000000001H;
    CA_LOG_FILTER* = 000000002H;
    ILLUMINANT_DEVICE_DEFAULT* = 000000000H;
    ILLUMINANT_A* = 000000001H;
    ILLUMINANT_B* = 000000002H;
    ILLUMINANT_C* = 000000003H;
    ILLUMINANT_D50* = 000000004H;
    ILLUMINANT_D55* = 000000005H;
    ILLUMINANT_D65* = 000000006H;
    ILLUMINANT_D75* = 000000007H;
    ILLUMINANT_F2* = 000000008H;
    ILLUMINANT_MAX_INDEX* = 000000008H;
    ILLUMINANT_TUNGSTEN* = 000000001H;
    ILLUMINANT_DAYLIGHT* = 000000003H;
    ILLUMINANT_FLUORESCENT* = 000000008H;
    ILLUMINANT_NTSC* = 000000003H;
    RGB_GAMMA_MIN* = 000000540H;
    RGB_GAMMA_MAX* = 00000FDE8H;
    REFERENCE_WHITE_MIN* = 000001770H;
    REFERENCE_WHITE_MAX* = 000002710H;
    REFERENCE_BLACK_MIN* = 000000000H;
    REFERENCE_BLACK_MAX* = 000000FA0H;
    COLOR_ADJ_MIN* = 0FFFFFF9CH;
    COLOR_ADJ_MAX* = 000000064H;
    DI_APPBANDING* = 000000001H;
    DI_ROPS_READ_DESTINATION* = 000000002H;
    FONTMAPPER_MAX* = 00000000AH;
    ICM_OFF* = 000000001H;
    ICM_ON* = 000000002H;
    ICM_QUERY* = 000000003H;
    ICM_DONE_OUTSIDEDC* = 000000004H;
    ENHMETA_SIGNATURE* = 0464D4520H;
    ENHMETA_STOCK_OBJECT* = 080000000H;
    EMR_HEADER* = 000000001H;
    EMR_POLYBEZIER* = 000000002H;
    EMR_POLYGON* = 000000003H;
    EMR_POLYLINE* = 000000004H;
    EMR_POLYBEZIERTO* = 000000005H;
    EMR_POLYLINETO* = 000000006H;
    EMR_POLYPOLYLINE* = 000000007H;
    EMR_POLYPOLYGON* = 000000008H;
    EMR_SETWINDOWEXTEX* = 000000009H;
    EMR_SETWINDOWORGEX* = 00000000AH;
    EMR_SETVIEWPORTEXTEX* = 00000000BH;
    EMR_SETVIEWPORTORGEX* = 00000000CH;
    EMR_SETBRUSHORGEX* = 00000000DH;
    EMR_EOF* = 00000000EH;
    EMR_SETPIXELV* = 00000000FH;
    EMR_SETMAPPERFLAGS* = 000000010H;
    EMR_SETMAPMODE* = 000000011H;
    EMR_SETBKMODE* = 000000012H;
    EMR_SETPOLYFILLMODE* = 000000013H;
    EMR_SETROP2* = 000000014H;
    EMR_SETSTRETCHBLTMODE* = 000000015H;
    EMR_SETTEXTALIGN* = 000000016H;
    EMR_SETCOLORADJUSTMENT* = 000000017H;
    EMR_SETTEXTCOLOR* = 000000018H;
    EMR_SETBKCOLOR* = 000000019H;
    EMR_OFFSETCLIPRGN* = 00000001AH;
    EMR_MOVETOEX* = 00000001BH;
    EMR_SETMETARGN* = 00000001CH;
    EMR_EXCLUDECLIPRECT* = 00000001DH;
    EMR_INTERSECTCLIPRECT* = 00000001EH;
    EMR_SCALEVIEWPORTEXTEX* = 00000001FH;
    EMR_SCALEWINDOWEXTEX* = 000000020H;
    EMR_SAVEDC* = 000000021H;
    EMR_RESTOREDC* = 000000022H;
    EMR_SETWORLDTRANSFORM* = 000000023H;
    EMR_MODIFYWORLDTRANSFORM* = 000000024H;
    EMR_SELECTOBJECT* = 000000025H;
    EMR_CREATEPEN* = 000000026H;
    EMR_CREATEBRUSHINDIRECT* = 000000027H;
    EMR_DELETEOBJECT* = 000000028H;
    EMR_ANGLEARC* = 000000029H;
    EMR_ELLIPSE* = 00000002AH;
    EMR_RECTANGLE* = 00000002BH;
    EMR_ROUNDRECT* = 00000002CH;
    EMR_ARC* = 00000002DH;
    EMR_CHORD* = 00000002EH;
    EMR_PIE* = 00000002FH;
    EMR_SELECTPALETTE* = 000000030H;
    EMR_CREATEPALETTE* = 000000031H;
    EMR_SETPALETTEENTRIES* = 000000032H;
    EMR_RESIZEPALETTE* = 000000033H;
    EMR_REALIZEPALETTE* = 000000034H;
    EMR_EXTFLOODFILL* = 000000035H;
    EMR_LINETO* = 000000036H;
    EMR_ARCTO* = 000000037H;
    EMR_POLYDRAW* = 000000038H;
    EMR_SETARCDIRECTION* = 000000039H;
    EMR_SETMITERLIMIT* = 00000003AH;
    EMR_BEGINPATH* = 00000003BH;
    EMR_ENDPATH* = 00000003CH;
    EMR_CLOSEFIGURE* = 00000003DH;
    EMR_FILLPATH* = 00000003EH;
    EMR_STROKEANDFILLPATH* = 00000003FH;
    EMR_STROKEPATH* = 000000040H;
    EMR_FLATTENPATH* = 000000041H;
    EMR_WIDENPATH* = 000000042H;
    EMR_SELECTCLIPPATH* = 000000043H;
    EMR_ABORTPATH* = 000000044H;
    EMR_GDICOMMENT* = 000000046H;
    EMR_FILLRGN* = 000000047H;
    EMR_FRAMERGN* = 000000048H;
    EMR_INVERTRGN* = 000000049H;
    EMR_PAINTRGN* = 00000004AH;
    EMR_EXTSELECTCLIPRGN* = 00000004BH;
    EMR_BITBLT* = 00000004CH;
    EMR_STRETCHBLT* = 00000004DH;
    EMR_MASKBLT* = 00000004EH;
    EMR_PLGBLT* = 00000004FH;
    EMR_SETDIBITSTODEVICE* = 000000050H;
    EMR_STRETCHDIBITS* = 000000051H;
    EMR_EXTCREATEFONTINDIRECTW* = 000000052H;
    EMR_EXTTEXTOUTA* = 000000053H;
    EMR_EXTTEXTOUTW* = 000000054H;
    EMR_POLYBEZIER16* = 000000055H;
    EMR_POLYGON16* = 000000056H;
    EMR_POLYLINE16* = 000000057H;
    EMR_POLYBEZIERTO16* = 000000058H;
    EMR_POLYLINETO16* = 000000059H;
    EMR_POLYPOLYLINE16* = 00000005AH;
    EMR_POLYPOLYGON16* = 00000005BH;
    EMR_POLYDRAW16* = 00000005CH;
    EMR_CREATEMONOBRUSH* = 00000005DH;
    EMR_CREATEDIBPATTERNBRUSHPT* = 00000005EH;
    EMR_EXTCREATEPEN* = 00000005FH;
    EMR_POLYTEXTOUTA* = 000000060H;
    EMR_POLYTEXTOUTW* = 000000061H;
    EMR_SETICMMODE* = 000000062H;
    EMR_CREATECOLORSPACE* = 000000063H;
    EMR_SETCOLORSPACE* = 000000064H;
    EMR_DELETECOLORSPACE* = 000000065H;
    EMR_GLSRECORD* = 000000066H;
    EMR_GLSBOUNDEDRECORD* = 000000067H;
    EMR_PIXELFORMAT* = 000000068H;
    EMR_MIN* = 000000001H;
    EMR_MAX* = 000000068H;
    SETICMPROFILE_EMBEDED* = 000000001H;
    GDICOMMENT_IDENTIFIER* = 043494447H;
    GDICOMMENT_WINDOWS_METAFILE* = 080000001H;
    GDICOMMENT_BEGINGROUP* = 000000002H;
    GDICOMMENT_ENDGROUP* = 000000003H;
    GDICOMMENT_MULTIFORMATS* = 040000004H;
    EPS_SIGNATURE* = 046535045H;
    WGL_FONT_LINES* = 000000000H;
    WGL_FONT_POLYGONS* = 000000001H;
    LPD_DOUBLEBUFFER* = 000000001H;
    LPD_STEREO* = 000000002H;
    LPD_SUPPORT_GDI* = 000000010H;
    LPD_SUPPORT_OPENGL* = 000000020H;
    LPD_SHARE_DEPTH* = 000000040H;
    LPD_SHARE_STENCIL* = 000000080H;
    LPD_SHARE_ACCUM* = 000000100H;
    LPD_SWAP_EXCHANGE* = 000000200H;
    LPD_SWAP_COPY* = 000000400H;
    LPD_TRANSPARENT* = 000001000H;
    LPD_TYPE_RGBA* = 000000000H;
    LPD_TYPE_COLORINDEX* = 000000001H;
    WGL_SWAP_MAIN_PLANE* = 000000001H;
    WGL_SWAP_OVERLAY1* = 000000002H;
    WGL_SWAP_OVERLAY2* = 000000004H;
    WGL_SWAP_OVERLAY3* = 000000008H;
    WGL_SWAP_OVERLAY4* = 000000010H;
    WGL_SWAP_OVERLAY5* = 000000020H;
    WGL_SWAP_OVERLAY6* = 000000040H;
    WGL_SWAP_OVERLAY7* = 000000080H;
    WGL_SWAP_OVERLAY8* = 000000100H;
    WGL_SWAP_OVERLAY9* = 000000200H;
    WGL_SWAP_OVERLAY10* = 000000400H;
    WGL_SWAP_OVERLAY11* = 000000800H;
    WGL_SWAP_OVERLAY12* = 000001000H;
    WGL_SWAP_OVERLAY13* = 000002000H;
    WGL_SWAP_OVERLAY14* = 000004000H;
    WGL_SWAP_OVERLAY15* = 000008000H;
    WGL_SWAP_UNDERLAY1* = 000010000H;
    WGL_SWAP_UNDERLAY2* = 000020000H;
    WGL_SWAP_UNDERLAY3* = 000040000H;
    WGL_SWAP_UNDERLAY4* = 000080000H;
    WGL_SWAP_UNDERLAY5* = 000100000H;
    WGL_SWAP_UNDERLAY6* = 000200000H;
    WGL_SWAP_UNDERLAY7* = 000400000H;
    WGL_SWAP_UNDERLAY8* = 000800000H;
    WGL_SWAP_UNDERLAY9* = 001000000H;
    WGL_SWAP_UNDERLAY10* = 002000000H;
    WGL_SWAP_UNDERLAY11* = 004000000H;
    WGL_SWAP_UNDERLAY12* = 008000000H;
    WGL_SWAP_UNDERLAY13* = 010000000H;
    WGL_SWAP_UNDERLAY14* = 020000000H;
    WGL_SWAP_UNDERLAY15* = 040000000H;
    RT_CURSOR* = 000000001H;
    RT_BITMAP* = 000000002H;
    RT_ICON* = 000000003H;
    RT_MENU* = 000000004H;
    RT_DIALOG* = 000000005H;
    RT_STRING* = 000000006H;
    RT_FONTDIR* = 000000007H;
    RT_FONT* = 000000008H;
    RT_ACCELERATOR* = 000000009H;
    RT_RCDATA* = 00000000AH;
    RT_MESSAGETABLE* = 00000000BH;
    DIFFERENCE* = 00000000BH;
    RT_GROUP_CURSOR* = 00000000CH;
    RT_GROUP_ICON* = 00000000EH;
    RT_VERSION* = 000000010H;
    RT_DLGINCLUDE* = 000000011H;
    RT_PLUGPLAY* = 000000013H;
    RT_VXD* = 000000014H;
    RT_ANICURSOR* = 000000015H;
    RT_ANIICON* = 000000016H;
    RT_HTML* = 000000017H;
    SB_HORZ* = 000000000H;
    SB_VERT* = 000000001H;
    SB_CTL* = 000000002H;
    SB_BOTH* = 000000003H;
    SB_LINEUP* = 000000000H;
    SB_LINELEFT* = 000000000H;
    SB_LINEDOWN* = 000000001H;
    SB_LINERIGHT* = 000000001H;
    SB_PAGEUP* = 000000002H;
    SB_PAGELEFT* = 000000002H;
    SB_PAGEDOWN* = 000000003H;
    SB_PAGERIGHT* = 000000003H;
    SB_THUMBPOSITION* = 000000004H;
    SB_THUMBTRACK* = 000000005H;
    SB_TOP* = 000000006H;
    SB_LEFT* = 000000006H;
    SB_BOTTOM* = 000000007H;
    SB_RIGHT* = 000000007H;
    SB_ENDSCROLL* = 000000008H;
    SW_HIDE* = 000000000H;
    SW_SHOWNORMAL* = 000000001H;
    SW_NORMAL* = 000000001H;
    SW_SHOWMINIMIZED* = 000000002H;
    SW_SHOWMAXIMIZED* = 000000003H;
    SW_MAXIMIZE* = 000000003H;
    SW_SHOWNOACTIVATE* = 000000004H;
    SW_SHOW* = 000000005H;
    SW_MINIMIZE* = 000000006H;
    SW_SHOWMINNOACTIVE* = 000000007H;
    SW_SHOWNA* = 000000008H;
    SW_RESTORE* = 000000009H;
    SW_SHOWDEFAULT* = 00000000AH;
    SW_FORCEMINIMIZE* = 00000000BH;
    SW_MAX* = 00000000BH;
    HIDE_WINDOW* = 000000000H;
    SHOW_OPENWINDOW* = 000000001H;
    SHOW_ICONWINDOW* = 000000002H;
    SHOW_FULLSCREEN* = 000000003H;
    SHOW_OPENNOACTIVATE* = 000000004H;
    SW_PARENTCLOSING* = 000000001H;
    SW_OTHERZOOM* = 000000002H;
    SW_PARENTOPENING* = 000000003H;
    SW_OTHERUNZOOM* = 000000004H;
    KF_EXTENDED* = 000000100H;
    KF_DLGMODE* = 000000800H;
    KF_MENUMODE* = 000001000H;
    KF_ALTDOWN* = 000002000H;
    KF_REPEAT* = 000004000H;
    KF_UP* = 000008000H;
    VK_LBUTTON* = 000000001H;
    VK_RBUTTON* = 000000002H;
    VK_CANCEL* = 000000003H;
    VK_MBUTTON* = 000000004H;
    VK_BACK* = 000000008H;
    VK_TAB* = 000000009H;
    VK_CLEAR* = 00000000CH;
    VK_RETURN* = 00000000DH;
    VK_SHIFT* = 000000010H;
    VK_CONTROL* = 000000011H;
    VK_MENU* = 000000012H;
    VK_PAUSE* = 000000013H;
    VK_CAPITAL* = 000000014H;
    VK_KANA* = 000000015H;
    VK_HANGEUL* = 000000015H;
    VK_HANGUL* = 000000015H;
    VK_JUNJA* = 000000017H;
    VK_FINAL* = 000000018H;
    VK_HANJA* = 000000019H;
    VK_KANJI* = 000000019H;
    VK_ESCAPE* = 00000001BH;
    VK_CONVERT* = 00000001CH;
    VK_NONCONVERT* = 00000001DH;
    VK_ACCEPT* = 00000001EH;
    VK_MODECHANGE* = 00000001FH;
    VK_SPACE* = 000000020H;
    VK_PRIOR* = 000000021H;
    VK_NEXT* = 000000022H;
    VK_END* = 000000023H;
    VK_HOME* = 000000024H;
    VK_LEFT* = 000000025H;
    VK_UP* = 000000026H;
    VK_RIGHT* = 000000027H;
    VK_DOWN* = 000000028H;
    VK_SELECT* = 000000029H;
    VK_PRINT* = 00000002AH;
    VK_EXECUTE* = 00000002BH;
    VK_SNAPSHOT* = 00000002CH;
    VK_INSERT* = 00000002DH;
    VK_DELETE* = 00000002EH;
    VK_HELP* = 00000002FH;
    VK_LWIN* = 00000005BH;
    VK_RWIN* = 00000005CH;
    VK_APPS* = 00000005DH;
    VK_NUMPAD0* = 000000060H;
    VK_NUMPAD1* = 000000061H;
    VK_NUMPAD2* = 000000062H;
    VK_NUMPAD3* = 000000063H;
    VK_NUMPAD4* = 000000064H;
    VK_NUMPAD5* = 000000065H;
    VK_NUMPAD6* = 000000066H;
    VK_NUMPAD7* = 000000067H;
    VK_NUMPAD8* = 000000068H;
    VK_NUMPAD9* = 000000069H;
    VK_MULTIPLY* = 00000006AH;
    VK_ADD* = 00000006BH;
    VK_SEPARATOR* = 00000006CH;
    VK_SUBTRACT* = 00000006DH;
    VK_DECIMAL* = 00000006EH;
    VK_DIVIDE* = 00000006FH;
    VK_F1* = 000000070H;
    VK_F2* = 000000071H;
    VK_F3* = 000000072H;
    VK_F4* = 000000073H;
    VK_F5* = 000000074H;
    VK_F6* = 000000075H;
    VK_F7* = 000000076H;
    VK_F8* = 000000077H;
    VK_F9* = 000000078H;
    VK_F10* = 000000079H;
    VK_F11* = 00000007AH;
    VK_F12* = 00000007BH;
    VK_F13* = 00000007CH;
    VK_F14* = 00000007DH;
    VK_F15* = 00000007EH;
    VK_F16* = 00000007FH;
    VK_F17* = 000000080H;
    VK_F18* = 000000081H;
    VK_F19* = 000000082H;
    VK_F20* = 000000083H;
    VK_F21* = 000000084H;
    VK_F22* = 000000085H;
    VK_F23* = 000000086H;
    VK_F24* = 000000087H;
    VK_NUMLOCK* = 000000090H;
    VK_SCROLL* = 000000091H;
    VK_LSHIFT* = 0000000A0H;
    VK_RSHIFT* = 0000000A1H;
    VK_LCONTROL* = 0000000A2H;
    VK_RCONTROL* = 0000000A3H;
    VK_LMENU* = 0000000A4H;
    VK_RMENU* = 0000000A5H;
    VK_PROCESSKEY* = 0000000E5H;
    VK_ATTN* = 0000000F6H;
    VK_CRSEL* = 0000000F7H;
    VK_EXSEL* = 0000000F8H;
    VK_EREOF* = 0000000F9H;
    VK_PLAY* = 0000000FAH;
    VK_ZOOM* = 0000000FBH;
    VK_NONAME* = 0000000FCH;
    VK_PA1* = 0000000FDH;
    VK_OEM_CLEAR* = 0000000FEH;
    WH_MIN* = 0FFFFFFFFH;
    WH_MSGFILTER* = 0FFFFFFFFH;
    WH_JOURNALRECORD* = 000000000H;
    WH_JOURNALPLAYBACK* = 000000001H;
    WH_KEYBOARD* = 000000002H;
    WH_GETMESSAGE* = 000000003H;
    WH_CALLWNDPROC* = 000000004H;
    WH_CBT* = 000000005H;
    WH_SYSMSGFILTER* = 000000006H;
    WH_MOUSE* = 000000007H;
    WH_HARDWARE* = 000000008H;
    WH_DEBUG* = 000000009H;
    WH_SHELL* = 00000000AH;
    WH_FOREGROUNDIDLE* = 00000000BH;
    WH_CALLWNDPROCRET* = 00000000CH;
    WH_KEYBOARD_LL* = 00000000DH;
    WH_MOUSE_LL* = 00000000EH;
    WH_MAX* = 00000000EH;
    WH_MINHOOK* = 0FFFFFFFFH;
    WH_MAXHOOK* = 00000000EH;
    HC_ACTION* = 000000000H;
    HC_GETNEXT* = 000000001H;
    HC_SKIP* = 000000002H;
    HC_NOREMOVE* = 000000003H;
    HC_NOREM* = 000000003H;
    HC_SYSMODALON* = 000000004H;
    HC_SYSMODALOFF* = 000000005H;
    HCBT_MOVESIZE* = 000000000H;
    HCBT_MINMAX* = 000000001H;
    HCBT_QS* = 000000002H;
    HCBT_CREATEWND* = 000000003H;
    HCBT_DESTROYWND* = 000000004H;
    HCBT_ACTIVATE* = 000000005H;
    HCBT_CLICKSKIPPED* = 000000006H;
    HCBT_KEYSKIPPED* = 000000007H;
    HCBT_SYSCOMMAND* = 000000008H;
    HCBT_SETFOCUS* = 000000009H;
    MSGF_DIALOGBOX* = 000000000H;
    MSGF_MESSAGEBOX* = 000000001H;
    MSGF_MENU* = 000000002H;
    MSGF_SCROLLBAR* = 000000005H;
    MSGF_NEXTWINDOW* = 000000006H;
    MSGF_MAX* = 000000008H;
    MSGF_USER* = 000001000H;
    HSHELL_WINDOWCREATED* = 000000001H;
    HSHELL_WINDOWDESTROYED* = 000000002H;
    HSHELL_ACTIVATESHELLWINDOW* = 000000003H;
    HSHELL_WINDOWACTIVATED* = 000000004H;
    HSHELL_GETMINRECT* = 000000005H;
    HSHELL_REDRAW* = 000000006H;
    HSHELL_TASKMAN* = 000000007H;
    HSHELL_LANGUAGE* = 000000008H;
    LLKHF_EXTENDED* = 000000001H;
    LLKHF_INJECTED* = 000000010H;
    LLKHF_ALTDOWN* = 000000020H;
    LLKHF_UP* = 000000080H;
    LLMHF_INJECTED* = 000000001H;
    HKL_PREV* = 000000000H;
    HKL_NEXT* = 000000001H;
    KLF_ACTIVATE* = 000000001H;
    KLF_SUBSTITUTE_OK* = 000000002H;
    KLF_UNLOADPREVIOUS* = 000000004H;
    KLF_REORDER* = 000000008H;
    KLF_REPLACELANG* = 000000010H;
    KLF_NOTELLSHELL* = 000000080H;
    KLF_SETFORPROCESS* = 000000100H;
    KL_NAMELENGTH* = 000000009H;
    DESKTOP_READOBJECTS* = 000000001H;
    DESKTOP_CREATEWINDOW* = 000000002H;
    DESKTOP_CREATEMENU* = 000000004H;
    DESKTOP_HOOKCONTROL* = 000000008H;
    DESKTOP_JOURNALRECORD* = 000000010H;
    DESKTOP_JOURNALPLAYBACK* = 000000020H;
    DESKTOP_ENUMERATE* = 000000040H;
    DESKTOP_WRITEOBJECTS* = 000000080H;
    DESKTOP_SWITCHDESKTOP* = 000000100H;
    DF_ALLOWOTHERACCOUNTHOOK* = 000000001H;
    WINSTA_ENUMDESKTOPS* = 000000001H;
    WINSTA_READATTRIBUTES* = 000000002H;
    WINSTA_ACCESSCLIPBOARD* = 000000004H;
    WINSTA_CREATEDESKTOP* = 000000008H;
    WINSTA_WRITEATTRIBUTES* = 000000010H;
    WINSTA_ACCESSGLOBALATOMS* = 000000020H;
    WINSTA_EXITWINDOWS* = 000000040H;
    WINSTA_ENUMERATE* = 000000100H;
    WINSTA_READSCREEN* = 000000200H;
    WSF_VISIBLE* = 000000001H;
    UOI_FLAGS* = 000000001H;
    UOI_NAME* = 000000002H;
    UOI_TYPE* = 000000003H;
    UOI_USER_SID* = 000000004H;
    GWL_WNDPROC* = 0FFFFFFFCH;
    GWL_HINSTANCE* = 0FFFFFFFAH;
    GWL_HWNDPARENT* = 0FFFFFFF8H;
    GWL_STYLE* = 0FFFFFFF0H;
    GWL_EXSTYLE* = 0FFFFFFECH;
    GWL_USERDATA* = 0FFFFFFEBH;
    GWL_ID* = 0FFFFFFF4H;
    GCL_MENUNAME* = 0FFFFFFF8H;
    GCL_HBRBACKGROUND* = 0FFFFFFF6H;
    GCL_HCURSOR* = 0FFFFFFF4H;
    GCL_HICON* = 0FFFFFFF2H;
    GCL_HMODULE* = 0FFFFFFF0H;
    GCL_CBWNDEXTRA* = 0FFFFFFEEH;
    GCL_CBCLSEXTRA* = 0FFFFFFECH;
    GCL_WNDPROC* = 0FFFFFFE8H;
    GCL_STYLE* = 0FFFFFFE6H;
    GCW_ATOM* = 0FFFFFFE0H;
    GCL_HICONSM* = 0FFFFFFDEH;
    WM_NULL* = 000000000H;
    WM_CREATE* = 000000001H;
    WM_DESTROY* = 000000002H;
    WM_MOVE* = 000000003H;
    WM_SIZE* = 000000005H;
    WM_ACTIVATE* = 000000006H;
    WA_INACTIVE* = 000000000H;
    WA_ACTIVE* = 000000001H;
    WA_CLICKACTIVE* = 000000002H;
    WM_SETFOCUS* = 000000007H;
    WM_KILLFOCUS* = 000000008H;
    WM_ENABLE* = 00000000AH;
    WM_SETREDRAW* = 00000000BH;
    WM_SETTEXT* = 00000000CH;
    WM_GETTEXT* = 00000000DH;
    WM_GETTEXTLENGTH* = 00000000EH;
    WM_PAINT* = 00000000FH;
    WM_CLOSE* = 000000010H;
    WM_QUERYENDSESSION* = 000000011H;
    WM_QUIT* = 000000012H;
    WM_QUERYOPEN* = 000000013H;
    WM_ERASEBKGND* = 000000014H;
    WM_SYSCOLORCHANGE* = 000000015H;
    WM_ENDSESSION* = 000000016H;
    WM_SHOWWINDOW* = 000000018H;
    WM_WININICHANGE* = 00000001AH;
    WM_SETTINGCHANGE* = 00000001AH;
    WM_DEVMODECHANGE* = 00000001BH;
    WM_ACTIVATEAPP* = 00000001CH;
    WM_FONTCHANGE* = 00000001DH;
    WM_TIMECHANGE* = 00000001EH;
    WM_CANCELMODE* = 00000001FH;
    WM_SETCURSOR* = 000000020H;
    WM_MOUSEACTIVATE* = 000000021H;
    WM_CHILDACTIVATE* = 000000022H;
    WM_QUEUESYNC* = 000000023H;
    WM_GETMINMAXINFO* = 000000024H;
    WM_PAINTICON* = 000000026H;
    WM_ICONERASEBKGND* = 000000027H;
    WM_NEXTDLGCTL* = 000000028H;
    WM_SPOOLERSTATUS* = 00000002AH;
    WM_DRAWITEM* = 00000002BH;
    WM_MEASUREITEM* = 00000002CH;
    WM_DELETEITEM* = 00000002DH;
    WM_VKEYTOITEM* = 00000002EH;
    WM_CHARTOITEM* = 00000002FH;
    WM_SETFONT* = 000000030H;
    WM_GETFONT* = 000000031H;
    WM_SETHOTKEY* = 000000032H;
    WM_GETHOTKEY* = 000000033H;
    WM_QUERYDRAGICON* = 000000037H;
    WM_COMPAREITEM* = 000000039H;
    WM_COMPACTING* = 000000041H;
    WM_COMMNOTIFY* = 000000044H;
    WM_WINDOWPOSCHANGING* = 000000046H;
    WM_WINDOWPOSCHANGED* = 000000047H;
    WM_POWER* = 000000048H;
    PWR_OK* = 000000001H;
    PWR_FAIL* = 0FFFFFFFFH;
    PWR_SUSPENDREQUEST* = 000000001H;
    PWR_SUSPENDRESUME* = 000000002H;
    PWR_CRITICALRESUME* = 000000003H;
    WM_COPYDATA* = 00000004AH;
    WM_CANCELJOURNAL* = 00000004BH;
    WM_NOTIFY* = 00000004EH;
    WM_INPUTLANGCHANGEREQUEST* = 000000050H;
    WM_INPUTLANGCHANGE* = 000000051H;
    WM_TCARD* = 000000052H;
    WM_HELP* = 000000053H;
    WM_USERCHANGED* = 000000054H;
    WM_NOTIFYFORMAT* = 000000055H;
    NFR_ANSI* = 000000001H;
    NFR_UNICODE* = 000000002H;
    NF_QUERY* = 000000003H;
    NF_REQUERY* = 000000004H;
    WM_CONTEXTMENU* = 00000007BH;
    WM_STYLECHANGING* = 00000007CH;
    WM_STYLECHANGED* = 00000007DH;
    WM_DISPLAYCHANGE* = 00000007EH;
    WM_GETICON* = 00000007FH;
    WM_SETICON* = 000000080H;
    WM_NCCREATE* = 000000081H;
    WM_NCDESTROY* = 000000082H;
    WM_NCCALCSIZE* = 000000083H;
    WM_NCHITTEST* = 000000084H;
    WM_NCPAINT* = 000000085H;
    WM_NCACTIVATE* = 000000086H;
    WM_GETDLGCODE* = 000000087H;
    WM_SYNCPAINT* = 000000088H;
    WM_NCMOUSEMOVE* = 0000000A0H;
    WM_NCLBUTTONDOWN* = 0000000A1H;
    WM_NCLBUTTONUP* = 0000000A2H;
    WM_NCLBUTTONDBLCLK* = 0000000A3H;
    WM_NCRBUTTONDOWN* = 0000000A4H;
    WM_NCRBUTTONUP* = 0000000A5H;
    WM_NCRBUTTONDBLCLK* = 0000000A6H;
    WM_NCMBUTTONDOWN* = 0000000A7H;
    WM_NCMBUTTONUP* = 0000000A8H;
    WM_NCMBUTTONDBLCLK* = 0000000A9H;
    WM_KEYFIRST* = 000000100H;
    WM_KEYDOWN* = 000000100H;
    WM_KEYUP* = 000000101H;
    WM_CHAR* = 000000102H;
    WM_DEADCHAR* = 000000103H;
    WM_SYSKEYDOWN* = 000000104H;
    WM_SYSKEYUP* = 000000105H;
    WM_SYSCHAR* = 000000106H;
    WM_SYSDEADCHAR* = 000000107H;
    WM_KEYLAST* = 000000108H;
    WM_IME_STARTCOMPOSITION* = 00000010DH;
    WM_IME_ENDCOMPOSITION* = 00000010EH;
    WM_IME_COMPOSITION* = 00000010FH;
    WM_IME_KEYLAST* = 00000010FH;
    WM_INITDIALOG* = 000000110H;
    WM_COMMAND* = 000000111H;
    WM_SYSCOMMAND* = 000000112H;
    WM_TIMER* = 000000113H;
    WM_HSCROLL* = 000000114H;
    WM_VSCROLL* = 000000115H;
    WM_INITMENU* = 000000116H;
    WM_INITMENUPOPUP* = 000000117H;
    WM_MENUSELECT* = 00000011FH;
    WM_MENUCHAR* = 000000120H;
    WM_ENTERIDLE* = 000000121H;
    WM_CTLCOLORMSGBOX* = 000000132H;
    WM_CTLCOLOREDIT* = 000000133H;
    WM_CTLCOLORLISTBOX* = 000000134H;
    WM_CTLCOLORBTN* = 000000135H;
    WM_CTLCOLORDLG* = 000000136H;
    WM_CTLCOLORSCROLLBAR* = 000000137H;
    WM_CTLCOLORSTATIC* = 000000138H;
    WM_MOUSEFIRST* = 000000200H;
    WM_MOUSEMOVE* = 000000200H;
    WM_LBUTTONDOWN* = 000000201H;
    WM_LBUTTONUP* = 000000202H;
    WM_LBUTTONDBLCLK* = 000000203H;
    WM_RBUTTONDOWN* = 000000204H;
    WM_RBUTTONUP* = 000000205H;
    WM_RBUTTONDBLCLK* = 000000206H;
    WM_MBUTTONDOWN* = 000000207H;
    WM_MBUTTONUP* = 000000208H;
    WM_MBUTTONDBLCLK* = 000000209H;
    WM_MOUSEWHEEL* = 00000020AH;
    WM_MOUSELAST* = 00000020AH;
    WHEEL_DELTA* = 000000078H;
    WM_PARENTNOTIFY* = 000000210H;
    WM_ENTERMENULOOP* = 000000211H;
    WM_EXITMENULOOP* = 000000212H;
    WM_NEXTMENU* = 000000213H;
    WM_SIZING* = 000000214H;
    WM_CAPTURECHANGED* = 000000215H;
    WM_MOVING* = 000000216H;
    WM_POWERBROADCAST* = 000000218H;
    PBT_APMQUERYSUSPEND* = 000000000H;
    PBT_APMQUERYSTANDBY* = 000000001H;
    PBT_APMQUERYSUSPENDFAILED* = 000000002H;
    PBT_APMQUERYSTANDBYFAILED* = 000000003H;
    PBT_APMSUSPEND* = 000000004H;
    PBT_APMSTANDBY* = 000000005H;
    PBT_APMRESUMECRITICAL* = 000000006H;
    PBT_APMRESUMESUSPEND* = 000000007H;
    PBT_APMRESUMESTANDBY* = 000000008H;
    PBTF_APMRESUMEFROMFAILURE* = 000000001H;
    PBT_APMBATTERYLOW* = 000000009H;
    PBT_APMPOWERSTATUSCHANGE* = 00000000AH;
    PBT_APMOEMEVENT* = 00000000BH;
    PBT_APMRESUMEAUTOMATIC* = 000000012H;
    WM_DEVICECHANGE* = 000000219H;
    WM_MDICREATE* = 000000220H;
    WM_MDIDESTROY* = 000000221H;
    WM_MDIACTIVATE* = 000000222H;
    WM_MDIRESTORE* = 000000223H;
    WM_MDINEXT* = 000000224H;
    WM_MDIMAXIMIZE* = 000000225H;
    WM_MDITILE* = 000000226H;
    WM_MDICASCADE* = 000000227H;
    WM_MDIICONARRANGE* = 000000228H;
    WM_MDIGETACTIVE* = 000000229H;
    WM_MDISETMENU* = 000000230H;
    WM_ENTERSIZEMOVE* = 000000231H;
    WM_EXITSIZEMOVE* = 000000232H;
    WM_DROPFILES* = 000000233H;
    WM_MDIREFRESHMENU* = 000000234H;
    WM_IME_SETCONTEXT* = 000000281H;
    WM_IME_NOTIFY* = 000000282H;
    WM_IME_CONTROL* = 000000283H;
    WM_IME_COMPOSITIONFULL* = 000000284H;
    WM_IME_SELECT* = 000000285H;
    WM_IME_CHAR* = 000000286H;
    WM_IME_KEYDOWN* = 000000290H;
    WM_IME_KEYUP* = 000000291H;
    WM_MOUSEHOVER* = 0000002A1H;
    WM_MOUSELEAVE* = 0000002A3H;
    WM_CUT* = 000000300H;
    WM_COPY* = 000000301H;
    WM_PASTE* = 000000302H;
    WM_CLEAR* = 000000303H;
    WM_UNDO* = 000000304H;
    WM_RENDERFORMAT* = 000000305H;
    WM_RENDERALLFORMATS* = 000000306H;
    WM_DESTROYCLIPBOARD* = 000000307H;
    WM_DRAWCLIPBOARD* = 000000308H;
    WM_PAINTCLIPBOARD* = 000000309H;
    WM_VSCROLLCLIPBOARD* = 00000030AH;
    WM_SIZECLIPBOARD* = 00000030BH;
    WM_ASKCBFORMATNAME* = 00000030CH;
    WM_CHANGECBCHAIN* = 00000030DH;
    WM_HSCROLLCLIPBOARD* = 00000030EH;
    WM_QUERYNEWPALETTE* = 00000030FH;
    WM_PALETTEISCHANGING* = 000000310H;
    WM_PALETTECHANGED* = 000000311H;
    WM_HOTKEY* = 000000312H;
    WM_PRINT* = 000000317H;
    WM_PRINTCLIENT* = 000000318H;
    WM_HANDHELDFIRST* = 000000358H;
    WM_HANDHELDLAST* = 00000035FH;
    WM_AFXFIRST* = 000000360H;
    WM_AFXLAST* = 00000037FH;
    WM_PENWINFIRST* = 000000380H;
    WM_PENWINLAST* = 00000038FH;
    WM_APP* = 000008000H;
    WM_USER* = 000000400H;
    WMSZ_LEFT* = 000000001H;
    WMSZ_RIGHT* = 000000002H;
    WMSZ_TOP* = 000000003H;
    WMSZ_TOPLEFT* = 000000004H;
    WMSZ_TOPRIGHT* = 000000005H;
    WMSZ_BOTTOM* = 000000006H;
    WMSZ_BOTTOMLEFT* = 000000007H;
    WMSZ_BOTTOMRIGHT* = 000000008H;
    HTERROR* = 0FFFFFFFEH;
    HTTRANSPARENT* = 0FFFFFFFFH;
    HTNOWHERE* = 000000000H;
    HTCLIENT* = 000000001H;
    HTCAPTION* = 000000002H;
    HTSYSMENU* = 000000003H;
    HTGROWBOX* = 000000004H;
    HTSIZE* = 000000004H;
    HTMENU* = 000000005H;
    HTHSCROLL* = 000000006H;
    HTVSCROLL* = 000000007H;
    HTMINBUTTON* = 000000008H;
    HTMAXBUTTON* = 000000009H;
    HTLEFT* = 00000000AH;
    HTRIGHT* = 00000000BH;
    HTTOP* = 00000000CH;
    HTTOPLEFT* = 00000000DH;
    HTTOPRIGHT* = 00000000EH;
    HTBOTTOM* = 00000000FH;
    HTBOTTOMLEFT* = 000000010H;
    HTBOTTOMRIGHT* = 000000011H;
    HTBORDER* = 000000012H;
    HTREDUCE* = 000000008H;
    HTZOOM* = 000000009H;
    HTSIZEFIRST* = 00000000AH;
    HTSIZELAST* = 000000011H;
    HTOBJECT* = 000000013H;
    HTCLOSE* = 000000014H;
    HTHELP* = 000000015H;
    SMTO_NORMAL* = 000000000H;
    SMTO_BLOCK* = 000000001H;
    SMTO_ABORTIFHUNG* = 000000002H;
    MA_ACTIVATE* = 000000001H;
    MA_ACTIVATEANDEAT* = 000000002H;
    MA_NOACTIVATE* = 000000003H;
    MA_NOACTIVATEANDEAT* = 000000004H;
    ICON_SMALL* = 000000000H;
    ICON_BIG* = 000000001H;
    SIZE_RESTORED* = 000000000H;
    SIZE_MINIMIZED* = 000000001H;
    SIZE_MAXIMIZED* = 000000002H;
    SIZE_MAXSHOW* = 000000003H;
    SIZE_MAXHIDE* = 000000004H;
    SIZENORMAL* = 000000000H;
    SIZEICONIC* = 000000001H;
    SIZEFULLSCREEN* = 000000002H;
    SIZEZOOMSHOW* = 000000003H;
    SIZEZOOMHIDE* = 000000004H;
    WVR_ALIGNTOP* = 000000010H;
    WVR_ALIGNLEFT* = 000000020H;
    WVR_ALIGNBOTTOM* = 000000040H;
    WVR_ALIGNRIGHT* = 000000080H;
    WVR_HREDRAW* = 000000100H;
    WVR_VREDRAW* = 000000200H;
    WVR_REDRAW* = 000000300H;
    WVR_VALIDRECTS* = 000000400H;
    MK_LBUTTON* = 000000001H;
    MK_RBUTTON* = 000000002H;
    MK_SHIFT* = 000000004H;
    MK_CONTROL* = 000000008H;
    MK_MBUTTON* = 000000010H;
    TME_HOVER* = 000000001H;
    TME_LEAVE* = 000000002H;
    TME_QUERY* = 040000000H;
    TME_CANCEL* = 080000000H;
    HOVER_DEFAULT* = 0FFFFFFFFH;
    WS_OVERLAPPED* = 000000000H;
    WS_POPUP* = 080000000H;
    WS_CHILD* = 040000000H;
    WS_MINIMIZE* = 020000000H;
    WS_VISIBLE* = 010000000H;
    WS_DISABLED* = 008000000H;
    WS_CLIPSIBLINGS* = 004000000H;
    WS_CLIPCHILDREN* = 002000000H;
    WS_MAXIMIZE* = 001000000H;
    WS_CAPTION* = 000C00000H;
    WS_BORDER* = 000800000H;
    WS_DLGFRAME* = 000400000H;
    WS_VSCROLL* = 000200000H;
    WS_HSCROLL* = 000100000H;
    WS_SYSMENU* = 000080000H;
    WS_THICKFRAME* = 000040000H;
    WS_GROUP* = 000020000H;
    WS_TABSTOP* = 000010000H;
    WS_MINIMIZEBOX* = 000020000H;
    WS_MAXIMIZEBOX* = 000010000H;
    WS_TILED* = 000000000H;
    WS_ICONIC* = 020000000H;
    WS_SIZEBOX* = 000040000H;
    WS_TILEDWINDOW* = 000CF0000H;
    WS_OVERLAPPEDWINDOW* = 000CF0000H;
    WS_POPUPWINDOW* = 080880000H;
    WS_CHILDWINDOW* = 040000000H;
    WS_EX_DLGMODALFRAME* = 000000001H;
    WS_EX_NOPARENTNOTIFY* = 000000004H;
    WS_EX_TOPMOST* = 000000008H;
    WS_EX_ACCEPTFILES* = 000000010H;
    WS_EX_TRANSPARENT* = 000000020H;
    WS_EX_MDICHILD* = 000000040H;
    WS_EX_TOOLWINDOW* = 000000080H;
    WS_EX_WINDOWEDGE* = 000000100H;
    WS_EX_CLIENTEDGE* = 000000200H;
    WS_EX_CONTEXTHELP* = 000000400H;
    WS_EX_RIGHT* = 000001000H;
    WS_EX_LEFT* = 000000000H;
    WS_EX_RTLREADING* = 000002000H;
    WS_EX_LTRREADING* = 000000000H;
    WS_EX_LEFTSCROLLBAR* = 000004000H;
    WS_EX_RIGHTSCROLLBAR* = 000000000H;
    WS_EX_CONTROLPARENT* = 000010000H;
    WS_EX_STATICEDGE* = 000020000H;
    WS_EX_APPWINDOW* = 000040000H;
    WS_EX_OVERLAPPEDWINDOW* = 000000300H;
    WS_EX_PALETTEWINDOW* = 000000188H;
    CS_VREDRAW* = 000000001H;
    CS_HREDRAW* = 000000002H;
    CS_DBLCLKS* = 000000008H;
    CS_OWNDC* = 000000020H;
    CS_CLASSDC* = 000000040H;
    CS_PARENTDC* = 000000080H;
    CS_NOCLOSE* = 000000200H;
    CS_SAVEBITS* = 000000800H;
    CS_BYTEALIGNCLIENT* = 000001000H;
    CS_BYTEALIGNWINDOW* = 000002000H;
    CS_GLOBALCLASS* = 000004000H;
    CS_IME* = 000010000H;
    PRF_CHECKVISIBLE* = 000000001H;
    PRF_NONCLIENT* = 000000002H;
    PRF_CLIENT* = 000000004H;
    PRF_ERASEBKGND* = 000000008H;
    PRF_CHILDREN* = 000000010H;
    PRF_OWNED* = 000000020H;
    BDR_RAISEDOUTER* = 000000001H;
    BDR_SUNKENOUTER* = 000000002H;
    BDR_RAISEDINNER* = 000000004H;
    BDR_SUNKENINNER* = 000000008H;
    BDR_OUTER* = 000000003H;
    BDR_INNER* = 00000000CH;
    EDGE_RAISED* = 000000005H;
    EDGE_SUNKEN* = 00000000AH;
    EDGE_ETCHED* = 000000006H;
    EDGE_BUMP* = 000000009H;
    BF_LEFT* = 000000001H;
    BF_TOP* = 000000002H;
    BF_RIGHT* = 000000004H;
    BF_BOTTOM* = 000000008H;
    BF_TOPLEFT* = 000000003H;
    BF_TOPRIGHT* = 000000006H;
    BF_BOTTOMLEFT* = 000000009H;
    BF_BOTTOMRIGHT* = 00000000CH;
    BF_RECT* = 00000000FH;
    BF_DIAGONAL* = 000000010H;
    BF_DIAGONAL_ENDTOPRIGHT* = 000000016H;
    BF_DIAGONAL_ENDTOPLEFT* = 000000013H;
    BF_DIAGONAL_ENDBOTTOMLEFT* = 000000019H;
    BF_DIAGONAL_ENDBOTTOMRIGHT* = 00000001CH;
    BF_MIDDLE* = 000000800H;
    BF_SOFT* = 000001000H;
    BF_ADJUST* = 000002000H;
    BF_FLAT* = 000004000H;
    BF_MONO* = 000008000H;
    DFC_CAPTION* = 000000001H;
    DFC_MENU* = 000000002H;
    DFC_SCROLL* = 000000003H;
    DFC_BUTTON* = 000000004H;
    DFCS_CAPTIONCLOSE* = 000000000H;
    DFCS_CAPTIONMIN* = 000000001H;
    DFCS_CAPTIONMAX* = 000000002H;
    DFCS_CAPTIONRESTORE* = 000000003H;
    DFCS_CAPTIONHELP* = 000000004H;
    DFCS_MENUARROW* = 000000000H;
    DFCS_MENUCHECK* = 000000001H;
    DFCS_MENUBULLET* = 000000002H;
    DFCS_MENUARROWRIGHT* = 000000004H;
    DFCS_SCROLLUP* = 000000000H;
    DFCS_SCROLLDOWN* = 000000001H;
    DFCS_SCROLLLEFT* = 000000002H;
    DFCS_SCROLLRIGHT* = 000000003H;
    DFCS_SCROLLCOMBOBOX* = 000000005H;
    DFCS_SCROLLSIZEGRIP* = 000000008H;
    DFCS_SCROLLSIZEGRIPRIGHT* = 000000010H;
    DFCS_BUTTONCHECK* = 000000000H;
    DFCS_BUTTONRADIOIMAGE* = 000000001H;
    DFCS_BUTTONRADIOMASK* = 000000002H;
    DFCS_BUTTONRADIO* = 000000004H;
    DFCS_BUTTON3STATE* = 000000008H;
    DFCS_BUTTONPUSH* = 000000010H;
    DFCS_INACTIVE* = 000000100H;
    DFCS_PUSHED* = 000000200H;
    DFCS_CHECKED* = 000000400H;
    DFCS_ADJUSTRECT* = 000002000H;
    DFCS_FLAT* = 000004000H;
    DFCS_MONO* = 000008000H;
    DC_ACTIVE* = 000000001H;
    DC_SMALLCAP* = 000000002H;
    DC_ICON* = 000000004H;
    DC_TEXT* = 000000008H;
    DC_INBUTTON* = 000000010H;
    IDANI_OPEN* = 000000001H;
    IDANI_CLOSE* = 000000002H;
    IDANI_CAPTION* = 000000003H;
    CF_TEXT* = 000000001H;
    CF_BITMAP* = 000000002H;
    CF_METAFILEPICT* = 000000003H;
    CF_SYLK* = 000000004H;
    CF_DIF* = 000000005H;
    CF_TIFF* = 000000006H;
    CF_OEMTEXT* = 000000007H;
    CF_DIB* = 000000008H;
    CF_PALETTE* = 000000009H;
    CF_PENDATA* = 00000000AH;
    CF_RIFF* = 00000000BH;
    CF_WAVE* = 00000000CH;
    CF_UNICODETEXT* = 00000000DH;
    CF_ENHMETAFILE* = 00000000EH;
    CF_HDROP* = 00000000FH;
    CF_LOCALE* = 000000010H;
    CF_MAX* = 000000011H;
    CF_OWNERDISPLAY* = 000000080H;
    CF_DSPTEXT* = 000000081H;
    CF_DSPBITMAP* = 000000082H;
    CF_DSPMETAFILEPICT* = 000000083H;
    CF_DSPENHMETAFILE* = 00000008EH;
    CF_PRIVATEFIRST* = 000000200H;
    CF_PRIVATELAST* = 0000002FFH;
    CF_GDIOBJFIRST* = 000000300H;
    CF_GDIOBJLAST* = 0000003FFH;
    FVIRTKEY* = 000000001H;
    FNOINVERT* = 000000002H;
    FSHIFT* = 000000004H;
    FCONTROL* = 000000008H;
    FALT* = 000000010H;
    WPF_SETMINPOSITION* = 000000001H;
    WPF_RESTORETOMAXIMIZED* = 000000002H;
    ODT_MENU* = 000000001H;
    ODT_LISTBOX* = 000000002H;
    ODT_COMBOBOX* = 000000003H;
    ODT_BUTTON* = 000000004H;
    ODT_STATIC* = 000000005H;
    ODA_DRAWENTIRE* = 000000001H;
    ODA_SELECT* = 000000002H;
    ODA_FOCUS* = 000000004H;
    ODS_SELECTED* = 000000001H;
    ODS_GRAYED* = 000000002H;
    ODS_DISABLED* = 000000004H;
    ODS_CHECKED* = 000000008H;
    ODS_FOCUS* = 000000010H;
    ODS_DEFAULT* = 000000020H;
    ODS_COMBOBOXEDIT* = 000001000H;
    PM_NOREMOVE* = 000000000H;
    PM_REMOVE* = 000000001H;
    PM_NOYIELD* = 000000002H;
    MOD_ALT* = 000000001H;
    MOD_CONTROL* = 000000002H;
    MOD_SHIFT* = 000000004H;
    MOD_WIN* = 000000008H;
    IDHOT_SNAPWINDOW* = 0FFFFFFFFH;
    IDHOT_SNAPDESKTOP* = 0FFFFFFFEH;
    ENDSESSION_LOGOFF* = 080000000H;
    EWX_LOGOFF* = 000000000H;
    EWX_SHUTDOWN* = 000000001H;
    EWX_REBOOT* = 000000002H;
    EWX_FORCE* = 000000004H;
    EWX_POWEROFF* = 000000008H;
    BSM_ALLCOMPONENTS* = 000000000H;
    BSM_VXDS* = 000000001H;
    BSM_NETDRIVER* = 000000002H;
    BSM_INSTALLABLEDRIVERS* = 000000004H;
    BSM_APPLICATIONS* = 000000008H;
    BSM_ALLDESKTOPS* = 000000010H;
    BSF_QUERY* = 000000001H;
    BSF_IGNORECURRENTTASK* = 000000002H;
    BSF_FLUSHDISK* = 000000004H;
    BSF_NOHANG* = 000000008H;
    BSF_POSTMESSAGE* = 000000010H;
    BSF_FORCEIFHUNG* = 000000020H;
    BSF_NOTIMEOUTIFNOTHUNG* = 000000040H;
    BROADCAST_QUERY_DENY* = 0424D5144H;
    HWND_BROADCAST* = 00000FFFFH;
    CW_USEDEFAULT* = 080000000H;
    HWND_DESKTOP* = 000000000H;
    SWP_NOSIZE* = 000000001H;
    SWP_NOMOVE* = 000000002H;
    SWP_NOZORDER* = 000000004H;
    SWP_NOREDRAW* = 000000008H;
    SWP_NOACTIVATE* = 000000010H;
    SWP_FRAMECHANGED* = 000000020H;
    SWP_SHOWWINDOW* = 000000040H;
    SWP_HIDEWINDOW* = 000000080H;
    SWP_NOCOPYBITS* = 000000100H;
    SWP_NOOWNERZORDER* = 000000200H;
    SWP_NOSENDCHANGING* = 000000400H;
    SWP_DRAWFRAME* = 000000020H;
    SWP_NOREPOSITION* = 000000200H;
    SWP_DEFERERASE* = 000002000H;
    SWP_ASYNCWINDOWPOS* = 000004000H;
    HWND_TOP* = 000000000H;
    HWND_BOTTOM* = 000000001H;
    HWND_TOPMOST* = 0FFFFFFFFH;
    HWND_NOTOPMOST* = 0FFFFFFFEH;
    DLGWINDOWEXTRA* = 00000001EH;
    KEYEVENTF_EXTENDEDKEY* = 000000001H;
    KEYEVENTF_KEYUP* = 000000002H;
    MOUSEEVENTF_MOVE* = 000000001H;
    MOUSEEVENTF_LEFTDOWN* = 000000002H;
    MOUSEEVENTF_LEFTUP* = 000000004H;
    MOUSEEVENTF_RIGHTDOWN* = 000000008H;
    MOUSEEVENTF_RIGHTUP* = 000000010H;
    MOUSEEVENTF_MIDDLEDOWN* = 000000020H;
    MOUSEEVENTF_MIDDLEUP* = 000000040H;
    MOUSEEVENTF_WHEEL* = 000000800H;
    MOUSEEVENTF_ABSOLUTE* = 000008000H;
    MWMO_WAITALL* = 000000001H;
    MWMO_ALERTABLE* = 000000002H;
    MWMO_INPUTAVAILABLE* = 000000004H;
    QS_KEY* = 000000001H;
    QS_MOUSEMOVE* = 000000002H;
    QS_MOUSEBUTTON* = 000000004H;
    QS_POSTMESSAGE* = 000000008H;
    QS_TIMER* = 000000010H;
    QS_PAINT* = 000000020H;
    QS_SENDMESSAGE* = 000000040H;
    QS_HOTKEY* = 000000080H;
    QS_ALLPOSTMESSAGE* = 000000100H;
    QS_MOUSE* = 000000006H;
    QS_INPUT* = 000000007H;
    QS_ALLEVENTS* = 0000000BFH;
    QS_ALLINPUT* = 0000000FFH;
    SM_CXSCREEN* = 000000000H;
    SM_CYSCREEN* = 000000001H;
    SM_CXVSCROLL* = 000000002H;
    SM_CYHSCROLL* = 000000003H;
    SM_CYCAPTION* = 000000004H;
    SM_CXBORDER* = 000000005H;
    SM_CYBORDER* = 000000006H;
    SM_CXDLGFRAME* = 000000007H;
    SM_CYDLGFRAME* = 000000008H;
    SM_CYVTHUMB* = 000000009H;
    SM_CXHTHUMB* = 00000000AH;
    SM_CXICON* = 00000000BH;
    SM_CYICON* = 00000000CH;
    SM_CXCURSOR* = 00000000DH;
    SM_CYCURSOR* = 00000000EH;
    SM_CYMENU* = 00000000FH;
    SM_CXFULLSCREEN* = 000000010H;
    SM_CYFULLSCREEN* = 000000011H;
    SM_CYKANJIWINDOW* = 000000012H;
    SM_MOUSEPRESENT* = 000000013H;
    SM_CYVSCROLL* = 000000014H;
    SM_CXHSCROLL* = 000000015H;
    SM_DEBUG* = 000000016H;
    SM_SWAPBUTTON* = 000000017H;
    SM_RESERVED1* = 000000018H;
    SM_RESERVED2* = 000000019H;
    SM_RESERVED3* = 00000001AH;
    SM_RESERVED4* = 00000001BH;
    SM_CXMIN* = 00000001CH;
    SM_CYMIN* = 00000001DH;
    SM_CXSIZE* = 00000001EH;
    SM_CYSIZE* = 00000001FH;
    SM_CXFRAME* = 000000020H;
    SM_CYFRAME* = 000000021H;
    SM_CXMINTRACK* = 000000022H;
    SM_CYMINTRACK* = 000000023H;
    SM_CXDOUBLECLK* = 000000024H;
    SM_CYDOUBLECLK* = 000000025H;
    SM_CXICONSPACING* = 000000026H;
    SM_CYICONSPACING* = 000000027H;
    SM_MENUDROPALIGNMENT* = 000000028H;
    SM_PENWINDOWS* = 000000029H;
    SM_DBCSENABLED* = 00000002AH;
    SM_CMOUSEBUTTONS* = 00000002BH;
    SM_CXFIXEDFRAME* = 000000007H;
    SM_CYFIXEDFRAME* = 000000008H;
    SM_CXSIZEFRAME* = 000000020H;
    SM_CYSIZEFRAME* = 000000021H;
    SM_SECURE* = 00000002CH;
    SM_CXEDGE* = 00000002DH;
    SM_CYEDGE* = 00000002EH;
    SM_CXMINSPACING* = 00000002FH;
    SM_CYMINSPACING* = 000000030H;
    SM_CXSMICON* = 000000031H;
    SM_CYSMICON* = 000000032H;
    SM_CYSMCAPTION* = 000000033H;
    SM_CXSMSIZE* = 000000034H;
    SM_CYSMSIZE* = 000000035H;
    SM_CXMENUSIZE* = 000000036H;
    SM_CYMENUSIZE* = 000000037H;
    SM_ARRANGE* = 000000038H;
    SM_CXMINIMIZED* = 000000039H;
    SM_CYMINIMIZED* = 00000003AH;
    SM_CXMAXTRACK* = 00000003BH;
    SM_CYMAXTRACK* = 00000003CH;
    SM_CXMAXIMIZED* = 00000003DH;
    SM_CYMAXIMIZED* = 00000003EH;
    SM_NETWORK* = 00000003FH;
    SM_CLEANBOOT* = 000000043H;
    SM_CXDRAG* = 000000044H;
    SM_CYDRAG* = 000000045H;
    SM_SHOWSOUNDS* = 000000046H;
    SM_CXMENUCHECK* = 000000047H;
    SM_CYMENUCHECK* = 000000048H;
    SM_SLOWMACHINE* = 000000049H;
    SM_MIDEASTENABLED* = 00000004AH;
    SM_MOUSEWHEELPRESENT* = 00000004BH;
    SM_CMETRICS* = 000000053H;
    MNC_IGNORE* = 000000000H;
    MNC_CLOSE* = 000000001H;
    MNC_EXECUTE* = 000000002H;
    MNC_SELECT* = 000000003H;
    MIIM_STATE* = 000000001H;
    MIIM_ID* = 000000002H;
    MIIM_SUBMENU* = 000000004H;
    MIIM_CHECKMARKS* = 000000008H;
    MIIM_TYPE* = 000000010H;
    MIIM_DATA* = 000000020H;
    GMDI_USEDISABLED* = 000000001H;
    GMDI_GOINTOPOPUPS* = 000000002H;
    TPM_LEFTBUTTON* = 000000000H;
    TPM_RIGHTBUTTON* = 000000002H;
    TPM_LEFTALIGN* = 000000000H;
    TPM_CENTERALIGN* = 000000004H;
    TPM_RIGHTALIGN* = 000000008H;
    TPM_TOPALIGN* = 000000000H;
    TPM_VCENTERALIGN* = 000000010H;
    TPM_BOTTOMALIGN* = 000000020H;
    TPM_HORIZONTAL* = 000000000H;
    TPM_VERTICAL* = 000000040H;
    TPM_NONOTIFY* = 000000080H;
    TPM_RETURNCMD* = 000000100H;
    DOF_EXECUTABLE* = 000008001H;
    DOF_DOCUMENT* = 000008002H;
    DOF_DIRECTORY* = 000008003H;
    DOF_MULTIPLE* = 000008004H;
    DOF_PROGMAN* = 000000001H;
    DOF_SHELLDATA* = 000000002H;
    DO_DROPFILE* = 0454C4946H;
    DO_PRINTFILE* = 0544E5250H;
    DT_TOP* = 000000000H;
    DT_LEFT* = 000000000H;
    DT_CENTER* = 000000001H;
    DT_RIGHT* = 000000002H;
    DT_VCENTER* = 000000004H;
    DT_BOTTOM* = 000000008H;
    DT_WORDBREAK* = 000000010H;
    DT_SINGLELINE* = 000000020H;
    DT_EXPANDTABS* = 000000040H;
    DT_TABSTOP* = 000000080H;
    DT_NOCLIP* = 000000100H;
    DT_EXTERNALLEADING* = 000000200H;
    DT_CALCRECT* = 000000400H;
    DT_NOPREFIX* = 000000800H;
    DT_INTERNAL* = 000001000H;
    DT_EDITCONTROL* = 000002000H;
    DT_PATH_ELLIPSIS* = 000004000H;
    DT_END_ELLIPSIS* = 000008000H;
    DT_MODIFYSTRING* = 000010000H;
    DT_RTLREADING* = 000020000H;
    DT_WORD_ELLIPSIS* = 000040000H;
    DST_COMPLEX* = 000000000H;
    DST_TEXT* = 000000001H;
    DST_PREFIXTEXT* = 000000002H;
    DST_ICON* = 000000003H;
    DST_BITMAP* = 000000004H;
    DSS_NORMAL* = 000000000H;
    DSS_UNION* = 000000010H;
    DSS_DISABLED* = 000000020H;
    DSS_MONO* = 000000080H;
    DSS_RIGHT* = 000008000H;
    DCX_WINDOW* = 000000001H;
    DCX_CACHE* = 000000002H;
    DCX_NORESETATTRS* = 000000004H;
    DCX_CLIPCHILDREN* = 000000008H;
    DCX_CLIPSIBLINGS* = 000000010H;
    DCX_PARENTCLIP* = 000000020H;
    DCX_EXCLUDERGN* = 000000040H;
    DCX_INTERSECTRGN* = 000000080H;
    DCX_EXCLUDEUPDATE* = 000000100H;
    DCX_INTERSECTUPDATE* = 000000200H;
    DCX_LOCKWINDOWUPDATE* = 000000400H;
    DCX_VALIDATE* = 000200000H;
    CUDR_NORMAL* = 000000000H;
    CUDR_NOSNAPTOGRID* = 000000001H;
    CUDR_NORESOLVEPOSITIONS* = 000000002H;
    CUDR_NOCLOSEGAPS* = 000000004H;
    CUDR_NEGATIVECOORDS* = 000000008H;
    CUDR_NOPRIMARY* = 000000010H;
    RDW_INVALIDATE* = 000000001H;
    RDW_INTERNALPAINT* = 000000002H;
    RDW_ERASE* = 000000004H;
    RDW_VALIDATE* = 000000008H;
    RDW_NOINTERNALPAINT* = 000000010H;
    RDW_NOERASE* = 000000020H;
    RDW_NOCHILDREN* = 000000040H;
    RDW_ALLCHILDREN* = 000000080H;
    RDW_UPDATENOW* = 000000100H;
    RDW_ERASENOW* = 000000200H;
    RDW_FRAME* = 000000400H;
    RDW_NOFRAME* = 000000800H;
    SW_SCROLLCHILDREN* = 000000001H;
    SW_INVALIDATE* = 000000002H;
    SW_ERASE* = 000000004H;
    ESB_ENABLE_BOTH* = 000000000H;
    ESB_DISABLE_BOTH* = 000000003H;
    ESB_DISABLE_LEFT* = 000000001H;
    ESB_DISABLE_RIGHT* = 000000002H;
    ESB_DISABLE_UP* = 000000001H;
    ESB_DISABLE_DOWN* = 000000002H;
    ESB_DISABLE_LTUP* = 000000001H;
    ESB_DISABLE_RTDN* = 000000002H;
    HELPINFO_WINDOW* = 000000001H;
    HELPINFO_MENUITEM* = 000000002H;
    MB_OK* = 000000000H;
    MB_OKCANCEL* = 000000001H;
    MB_ABORTRETRYIGNORE* = 000000002H;
    MB_YESNOCANCEL* = 000000003H;
    MB_YESNO* = 000000004H;
    MB_RETRYCANCEL* = 000000005H;
    MB_ICONHAND* = 000000010H;
    MB_ICONQUESTION* = 000000020H;
    MB_ICONEXCLAMATION* = 000000030H;
    MB_ICONASTERISK* = 000000040H;
    MB_USERICON* = 000000080H;
    MB_ICONWARNING* = 000000030H;
    MB_ICONERROR* = 000000010H;
    MB_ICONINFORMATION* = 000000040H;
    MB_ICONSTOP* = 000000010H;
    MB_DEFBUTTON1* = 000000000H;
    MB_DEFBUTTON2* = 000000100H;
    MB_DEFBUTTON3* = 000000200H;
    MB_DEFBUTTON4* = 000000300H;
    MB_APPLMODAL* = 000000000H;
    MB_SYSTEMMODAL* = 000001000H;
    MB_TASKMODAL* = 000002000H;
    MB_HELP* = 000004000H;
    MB_NOFOCUS* = 000008000H;
    MB_SETFOREGROUND* = 000010000H;
    MB_DEFAULT_DESKTOP_ONLY* = 000020000H;
    MB_TOPMOST* = 000040000H;
    MB_RIGHT* = 000080000H;
    MB_RTLREADING* = 000100000H;
    MB_SERVICE_NOTIFICATION* = 000200000H;
    MB_SERVICE_NOTIFICATION_NT3X* = 000040000H;
    MB_TYPEMASK* = 00000000FH;
    MB_ICONMASK* = 0000000F0H;
    MB_DEFMASK* = 000000F00H;
    MB_MODEMASK* = 000003000H;
    MB_MISCMASK* = 00000C000H;
    CWP_ALL* = 000000000H;
    CWP_SKIPINVISIBLE* = 000000001H;
    CWP_SKIPDISABLED* = 000000002H;
    CWP_SKIPTRANSPARENT* = 000000004H;
    CTLCOLOR_MSGBOX* = 000000000H;
    CTLCOLOR_EDIT* = 000000001H;
    CTLCOLOR_LISTBOX* = 000000002H;
    CTLCOLOR_BTN* = 000000003H;
    CTLCOLOR_DLG* = 000000004H;
    CTLCOLOR_SCROLLBAR* = 000000005H;
    CTLCOLOR_STATIC* = 000000006H;
    CTLCOLOR_MAX* = 000000007H;
    COLOR_SCROLLBAR* = 000000000H;
    COLOR_BACKGROUND* = 000000001H;
    COLOR_ACTIVECAPTION* = 000000002H;
    COLOR_INACTIVECAPTION* = 000000003H;
    COLOR_MENU* = 000000004H;
    COLOR_WINDOW* = 000000005H;
    COLOR_WINDOWFRAME* = 000000006H;
    COLOR_MENUTEXT* = 000000007H;
    COLOR_WINDOWTEXT* = 000000008H;
    COLOR_CAPTIONTEXT* = 000000009H;
    COLOR_ACTIVEBORDER* = 00000000AH;
    COLOR_INACTIVEBORDER* = 00000000BH;
    COLOR_APPWORKSPACE* = 00000000CH;
    COLOR_HIGHLIGHT* = 00000000DH;
    COLOR_HIGHLIGHTTEXT* = 00000000EH;
    COLOR_BTNFACE* = 00000000FH;
    COLOR_BTNSHADOW* = 000000010H;
    COLOR_GRAYTEXT* = 000000011H;
    COLOR_BTNTEXT* = 000000012H;
    COLOR_INACTIVECAPTIONTEXT* = 000000013H;
    COLOR_BTNHIGHLIGHT* = 000000014H;
    COLOR_3DDKSHADOW* = 000000015H;
    COLOR_3DLIGHT* = 000000016H;
    COLOR_INFOTEXT* = 000000017H;
    COLOR_INFOBK* = 000000018H;
    COLOR_DESKTOP* = 000000001H;
    COLOR_3DFACE* = 00000000FH;
    COLOR_3DSHADOW* = 000000010H;
    COLOR_3DHIGHLIGHT* = 000000014H;
    COLOR_3DHILIGHT* = 000000014H;
    COLOR_BTNHILIGHT* = 000000014H;
    GW_HWNDFIRST* = 000000000H;
    GW_HWNDLAST* = 000000001H;
    GW_HWNDNEXT* = 000000002H;
    GW_HWNDPREV* = 000000003H;
    GW_OWNER* = 000000004H;
    GW_CHILD* = 000000005H;
    GW_MAX* = 000000005H;
    MF_INSERT* = 000000000H;
    MF_CHANGE* = 000000080H;
    MF_APPEND* = 000000100H;
    MF_DELETE* = 000000200H;
    MF_REMOVE* = 000001000H;
    MF_BYCOMMAND* = 000000000H;
    MF_BYPOSITION* = 000000400H;
    MF_SEPARATOR* = 000000800H;
    MF_ENABLED* = 000000000H;
    MF_GRAYED* = 000000001H;
    MF_DISABLED* = 000000002H;
    MF_UNCHECKED* = 000000000H;
    MF_CHECKED* = 000000008H;
    MF_USECHECKBITMAPS* = 000000200H;
    MF_STRING* = 000000000H;
    MF_BITMAP* = 000000004H;
    MF_OWNERDRAW* = 000000100H;
    MF_POPUP* = 000000010H;
    MF_MENUBARBREAK* = 000000020H;
    MF_MENUBREAK* = 000000040H;
    MF_UNHILITE* = 000000000H;
    MF_HILITE* = 000000080H;
    MF_DEFAULT* = 000001000H;
    MF_SYSMENU* = 000002000H;
    MF_HELP* = 000004000H;
    MF_RIGHTJUSTIFY* = 000004000H;
    MF_MOUSESELECT* = 000008000H;
    MF_END* = 000000080H;
    MFT_STRING* = 000000000H;
    MFT_BITMAP* = 000000004H;
    MFT_MENUBARBREAK* = 000000020H;
    MFT_MENUBREAK* = 000000040H;
    MFT_OWNERDRAW* = 000000100H;
    MFT_RADIOCHECK* = 000000200H;
    MFT_SEPARATOR* = 000000800H;
    MFT_RIGHTORDER* = 000002000H;
    MFT_RIGHTJUSTIFY* = 000004000H;
    MFS_GRAYED* = 000000003H;
    MFS_DISABLED* = 000000003H;
    MFS_CHECKED* = 000000008H;
    MFS_HILITE* = 000000080H;
    MFS_ENABLED* = 000000000H;
    MFS_UNCHECKED* = 000000000H;
    MFS_UNHILITE* = 000000000H;
    MFS_DEFAULT* = 000001000H;
    SC_SIZE* = 00000F000H;
    SC_MOVE* = 00000F010H;
    SC_MINIMIZE* = 00000F020H;
    SC_MAXIMIZE* = 00000F030H;
    SC_NEXTWINDOW* = 00000F040H;
    SC_PREVWINDOW* = 00000F050H;
    SC_CLOSE* = 00000F060H;
    SC_VSCROLL* = 00000F070H;
    SC_HSCROLL* = 00000F080H;
    SC_MOUSEMENU* = 00000F090H;
    SC_KEYMENU* = 00000F100H;
    SC_ARRANGE* = 00000F110H;
    SC_RESTORE* = 00000F120H;
    SC_TASKLIST* = 00000F130H;
    SC_SCREENSAVE* = 00000F140H;
    SC_HOTKEY* = 00000F150H;
    SC_DEFAULT* = 00000F160H;
    SC_MONITORPOWER* = 00000F170H;
    SC_CONTEXTHELP* = 00000F180H;
    SC_SEPARATOR* = 00000F00FH;
    SC_ICON* = 00000F020H;
    SC_ZOOM* = 00000F030H;
    IDC_ARROW* = 000007F00H;
    IDC_IBEAM* = 000007F01H;
    IDC_WAIT* = 000007F02H;
    IDC_CROSS* = 000007F03H;
    IDC_UPARROW* = 000007F04H;
    IDC_SIZE* = 000007F80H;
    IDC_ICON* = 000007F81H;
    IDC_SIZENWSE* = 000007F82H;
    IDC_SIZENESW* = 000007F83H;
    IDC_SIZEWE* = 000007F84H;
    IDC_SIZENS* = 000007F85H;
    IDC_SIZEALL* = 000007F86H;
    IDC_NO* = 000007F88H;
    IDC_APPSTARTING* = 000007F8AH;
    IDC_HELP* = 000007F8BH;
    IMAGE_BITMAP* = 000000000H;
    IMAGE_ICON* = 000000001H;
    IMAGE_CURSOR* = 000000002H;
    IMAGE_ENHMETAFILE* = 000000003H;
    LR_DEFAULTCOLOR* = 000000000H;
    LR_MONOCHROME* = 000000001H;
    LR_COLOR* = 000000002H;
    LR_COPYRETURNORG* = 000000004H;
    LR_COPYDELETEORG* = 000000008H;
    LR_LOADFROMFILE* = 000000010H;
    LR_LOADTRANSPARENT* = 000000020H;
    LR_DEFAULTSIZE* = 000000040H;
    LR_VGACOLOR* = 000000080H;
    LR_LOADMAP3DCOLORS* = 000001000H;
    LR_CREATEDIBSECTION* = 000002000H;
    LR_COPYFROMRESOURCE* = 000004000H;
    LR_SHARED* = 000008000H;
    DI_MASK* = 000000001H;
    DI_IMAGE* = 000000002H;
    DI_NORMAL* = 000000003H;
    DI_COMPAT* = 000000004H;
    DI_DEFAULTSIZE* = 000000008H;
    RES_ICON* = 000000001H;
    RES_CURSOR* = 000000002H;
    ORD_LANGDRIVER* = 000000001H;
    IDI_APPLICATION* = 000007F00H;
    IDI_HAND* = 000007F01H;
    IDI_QUESTION* = 000007F02H;
    IDI_EXCLAMATION* = 000007F03H;
    IDI_ASTERISK* = 000007F04H;
    IDI_WINLOGO* = 000007F05H;
    IDI_WARNING* = 000007F03H;
    IDI_ERROR* = 000007F01H;
    IDI_INFORMATION* = 000007F04H;
    IDOK* = 000000001H;
    IDCANCEL* = 000000002H;
    IDABORT* = 000000003H;
    IDRETRY* = 000000004H;
    IDIGNORE* = 000000005H;
    IDYES* = 000000006H;
    IDNO* = 000000007H;
    IDCLOSE* = 000000008H;
    IDHELP* = 000000009H;
    ES_LEFT* = 000000000H;
    ES_CENTER* = 000000001H;
    ES_RIGHT* = 000000002H;
    ES_MULTILINE* = 000000004H;
    ES_UPPERCASE* = 000000008H;
    ES_LOWERCASE* = 000000010H;
    ES_PASSWORD* = 000000020H;
    ES_AUTOVSCROLL* = 000000040H;
    ES_AUTOHSCROLL* = 000000080H;
    ES_NOHIDESEL* = 000000100H;
    ES_OEMCONVERT* = 000000400H;
    ES_READONLY* = 000000800H;
    ES_WANTRETURN* = 000001000H;
    ES_NUMBER* = 000002000H;
    EN_SETFOCUS* = 000000100H;
    EN_KILLFOCUS* = 000000200H;
    EN_CHANGE* = 000000300H;
    EN_UPDATE* = 000000400H;
    EN_ERRSPACE* = 000000500H;
    EN_MAXTEXT* = 000000501H;
    EN_HSCROLL* = 000000601H;
    EN_VSCROLL* = 000000602H;
    EC_LEFTMARGIN* = 000000001H;
    EC_RIGHTMARGIN* = 000000002H;
    EC_USEFONTINFO* = 00000FFFFH;
    EM_GETSEL* = 0000000B0H;
    EM_SETSEL* = 0000000B1H;
    EM_GETRECT* = 0000000B2H;
    EM_SETRECT* = 0000000B3H;
    EM_SETRECTNP* = 0000000B4H;
    EM_SCROLL* = 0000000B5H;
    EM_LINESCROLL* = 0000000B6H;
    EM_SCROLLCARET* = 0000000B7H;
    EM_GETMODIFY* = 0000000B8H;
    EM_SETMODIFY* = 0000000B9H;
    EM_GETLINECOUNT* = 0000000BAH;
    EM_LINEINDEX* = 0000000BBH;
    EM_SETHANDLE* = 0000000BCH;
    EM_GETHANDLE* = 0000000BDH;
    EM_GETTHUMB* = 0000000BEH;
    EM_LINELENGTH* = 0000000C1H;
    EM_REPLACESEL* = 0000000C2H;
    EM_GETLINE* = 0000000C4H;
    EM_LIMITTEXT* = 0000000C5H;
    EM_CANUNDO* = 0000000C6H;
    EM_UNDO* = 0000000C7H;
    EM_FMTLINES* = 0000000C8H;
    EM_LINEFROMCHAR* = 0000000C9H;
    EM_SETTABSTOPS* = 0000000CBH;
    EM_SETPASSWORDCHAR* = 0000000CCH;
    EM_EMPTYUNDOBUFFER* = 0000000CDH;
    EM_GETFIRSTVISIBLELINE* = 0000000CEH;
    EM_SETREADONLY* = 0000000CFH;
    EM_SETWORDBREAKPROC* = 0000000D0H;
    EM_GETWORDBREAKPROC* = 0000000D1H;
    EM_GETPASSWORDCHAR* = 0000000D2H;
    EM_SETMARGINS* = 0000000D3H;
    EM_GETMARGINS* = 0000000D4H;
    EM_SETLIMITTEXT* = 0000000C5H;
    EM_GETLIMITTEXT* = 0000000D5H;
    EM_POSFROMCHAR* = 0000000D6H;
    EM_CHARFROMPOS* = 0000000D7H;
    WB_LEFT* = 000000000H;
    WB_RIGHT* = 000000001H;
    WB_ISDELIMITER* = 000000002H;
    BS_PUSHBUTTON* = 000000000H;
    BS_DEFPUSHBUTTON* = 000000001H;
    BS_CHECKBOX* = 000000002H;
    BS_AUTOCHECKBOX* = 000000003H;
    BS_RADIOBUTTON* = 000000004H;
    BS_3STATE* = 000000005H;
    BS_AUTO3STATE* = 000000006H;
    BS_GROUPBOX* = 000000007H;
    BS_USERBUTTON* = 000000008H;
    BS_AUTORADIOBUTTON* = 000000009H;
    BS_OWNERDRAW* = 00000000BH;
    BS_LEFTTEXT* = 000000020H;
    BS_TEXT* = 000000000H;
    BS_ICON* = 000000040H;
    BS_BITMAP* = 000000080H;
    BS_LEFT* = 000000100H;
    BS_RIGHT* = 000000200H;
    BS_CENTER* = 000000300H;
    BS_TOP* = 000000400H;
    BS_BOTTOM* = 000000800H;
    BS_VCENTER* = 000000C00H;
    BS_PUSHLIKE* = 000001000H;
    BS_MULTILINE* = 000002000H;
    BS_NOTIFY* = 000004000H;
    BS_FLAT* = 000008000H;
    BS_RIGHTBUTTON* = 000000020H;
    BN_CLICKED* = 000000000H;
    BN_PAINT* = 000000001H;
    BN_HILITE* = 000000002H;
    BN_UNHILITE* = 000000003H;
    BN_DISABLE* = 000000004H;
    BN_DOUBLECLICKED* = 000000005H;
    BN_PUSHED* = 000000002H;
    BN_UNPUSHED* = 000000003H;
    BN_DBLCLK* = 000000005H;
    BN_SETFOCUS* = 000000006H;
    BN_KILLFOCUS* = 000000007H;
    BM_GETCHECK* = 0000000F0H;
    BM_SETCHECK* = 0000000F1H;
    BM_GETSTATE* = 0000000F2H;
    BM_SETSTATE* = 0000000F3H;
    BM_SETSTYLE* = 0000000F4H;
    BM_CLICK* = 0000000F5H;
    BM_GETIMAGE* = 0000000F6H;
    BM_SETIMAGE* = 0000000F7H;
    BST_UNCHECKED* = 000000000H;
    BST_CHECKED* = 000000001H;
    BST_INDETERMINATE* = 000000002H;
    BST_PUSHED* = 000000004H;
    BST_FOCUS* = 000000008H;
    SS_LEFT* = 000000000H;
    SS_CENTER* = 000000001H;
    SS_RIGHT* = 000000002H;
    SS_ICON* = 000000003H;
    SS_BLACKRECT* = 000000004H;
    SS_GRAYRECT* = 000000005H;
    SS_WHITERECT* = 000000006H;
    SS_BLACKFRAME* = 000000007H;
    SS_GRAYFRAME* = 000000008H;
    SS_WHITEFRAME* = 000000009H;
    SS_USERITEM* = 00000000AH;
    SS_SIMPLE* = 00000000BH;
    SS_LEFTNOWORDWRAP* = 00000000CH;
    SS_OWNERDRAW* = 00000000DH;
    SS_BITMAP* = 00000000EH;
    SS_ENHMETAFILE* = 00000000FH;
    SS_ETCHEDHORZ* = 000000010H;
    SS_ETCHEDVERT* = 000000011H;
    SS_ETCHEDFRAME* = 000000012H;
    SS_TYPEMASK* = 00000001FH;
    SS_NOPREFIX* = 000000080H;
    SS_NOTIFY* = 000000100H;
    SS_CENTERIMAGE* = 000000200H;
    SS_RIGHTJUST* = 000000400H;
    SS_REALSIZEIMAGE* = 000000800H;
    SS_SUNKEN* = 000001000H;
    SS_ENDELLIPSIS* = 000004000H;
    SS_PATHELLIPSIS* = 000008000H;
    SS_WORDELLIPSIS* = 00000C000H;
    SS_ELLIPSISMASK* = 00000C000H;
    STM_SETICON* = 000000170H;
    STM_GETICON* = 000000171H;
    STM_SETIMAGE* = 000000172H;
    STM_GETIMAGE* = 000000173H;
    STN_CLICKED* = 000000000H;
    STN_DBLCLK* = 000000001H;
    STN_ENABLE* = 000000002H;
    STN_DISABLE* = 000000003H;
    STM_MSGMAX* = 000000174H;
    WC_DIALOG* = 000008002H;
    DWL_MSGRESULT* = 000000000H;
    DWL_DLGPROC* = 000000004H;
    DWL_USER* = 000000008H;
    DDL_READWRITE* = 000000000H;
    DDL_READONLY* = 000000001H;
    DDL_HIDDEN* = 000000002H;
    DDL_SYSTEM* = 000000004H;
    DDL_DIRECTORY* = 000000010H;
    DDL_ARCHIVE* = 000000020H;
    DDL_POSTMSGS* = 000002000H;
    DDL_DRIVES* = 000004000H;
    DDL_EXCLUSIVE* = 000008000H;
    DS_ABSALIGN* = 000000001H;
    DS_SYSMODAL* = 000000002H;
    DS_LOCALEDIT* = 000000020H;
    DS_SETFONT* = 000000040H;
    DS_MODALFRAME* = 000000080H;
    DS_NOIDLEMSG* = 000000100H;
    DS_SETFOREGROUND* = 000000200H;
    DS_3DLOOK* = 000000004H;
    DS_FIXEDSYS* = 000000008H;
    DS_NOFAILCREATE* = 000000010H;
    DS_CONTROL* = 000000400H;
    DS_CENTER* = 000000800H;
    DS_CENTERMOUSE* = 000001000H;
    DS_CONTEXTHELP* = 000002000H;
    DM_GETDEFID* = 000000400H;
    DM_SETDEFID* = 000000401H;
    DM_REPOSITION* = 000000402H;
    DC_HASDEFID* = 00000534BH;
    DLGC_WANTARROWS* = 000000001H;
    DLGC_WANTTAB* = 000000002H;
    DLGC_WANTALLKEYS* = 000000004H;
    DLGC_WANTMESSAGE* = 000000004H;
    DLGC_HASSETSEL* = 000000008H;
    DLGC_DEFPUSHBUTTON* = 000000010H;
    DLGC_UNDEFPUSHBUTTON* = 000000020H;
    DLGC_RADIOBUTTON* = 000000040H;
    DLGC_WANTCHARS* = 000000080H;
    DLGC_STATIC* = 000000100H;
    DLGC_BUTTON* = 000002000H;
    LB_CTLCODE* = 000000000H;
    LB_OKAY* = 000000000H;
    LB_ERR* = 0FFFFFFFFH;
    LB_ERRSPACE* = 0FFFFFFFEH;
    LBN_ERRSPACE* = 0FFFFFFFEH;
    LBN_SELCHANGE* = 000000001H;
    LBN_DBLCLK* = 000000002H;
    LBN_SELCANCEL* = 000000003H;
    LBN_SETFOCUS* = 000000004H;
    LBN_KILLFOCUS* = 000000005H;
    LB_ADDSTRING* = 000000180H;
    LB_INSERTSTRING* = 000000181H;
    LB_DELETESTRING* = 000000182H;
    LB_SELITEMRANGEEX* = 000000183H;
    LB_RESETCONTENT* = 000000184H;
    LB_SETSEL* = 000000185H;
    LB_SETCURSEL* = 000000186H;
    LB_GETSEL* = 000000187H;
    LB_GETCURSEL* = 000000188H;
    LB_GETTEXT* = 000000189H;
    LB_GETTEXTLEN* = 00000018AH;
    LB_GETCOUNT* = 00000018BH;
    LB_SELECTSTRING* = 00000018CH;
    LB_DIR* = 00000018DH;
    LB_GETTOPINDEX* = 00000018EH;
    LB_FINDSTRING* = 00000018FH;
    LB_GETSELCOUNT* = 000000190H;
    LB_GETSELITEMS* = 000000191H;
    LB_SETTABSTOPS* = 000000192H;
    LB_GETHORIZONTALEXTENT* = 000000193H;
    LB_SETHORIZONTALEXTENT* = 000000194H;
    LB_SETCOLUMNWIDTH* = 000000195H;
    LB_ADDFILE* = 000000196H;
    LB_SETTOPINDEX* = 000000197H;
    LB_GETITEMRECT* = 000000198H;
    LB_GETITEMDATA* = 000000199H;
    LB_SETITEMDATA* = 00000019AH;
    LB_SELITEMRANGE* = 00000019BH;
    LB_SETANCHORINDEX* = 00000019CH;
    LB_GETANCHORINDEX* = 00000019DH;
    LB_SETCARETINDEX* = 00000019EH;
    LB_GETCARETINDEX* = 00000019FH;
    LB_SETITEMHEIGHT* = 0000001A0H;
    LB_GETITEMHEIGHT* = 0000001A1H;
    LB_FINDSTRINGEXACT* = 0000001A2H;
    LB_SETLOCALE* = 0000001A5H;
    LB_GETLOCALE* = 0000001A6H;
    LB_SETCOUNT* = 0000001A7H;
    LB_INITSTORAGE* = 0000001A8H;
    LB_ITEMFROMPOINT* = 0000001A9H;
    LB_MSGMAX* = 0000001B0H;
    LBS_NOTIFY* = 000000001H;
    LBS_SORT* = 000000002H;
    LBS_NOREDRAW* = 000000004H;
    LBS_MULTIPLESEL* = 000000008H;
    LBS_OWNERDRAWFIXED* = 000000010H;
    LBS_OWNERDRAWVARIABLE* = 000000020H;
    LBS_HASSTRINGS* = 000000040H;
    LBS_USETABSTOPS* = 000000080H;
    LBS_NOINTEGRALHEIGHT* = 000000100H;
    LBS_MULTICOLUMN* = 000000200H;
    LBS_WANTKEYBOARDINPUT* = 000000400H;
    LBS_EXTENDEDSEL* = 000000800H;
    LBS_DISABLENOSCROLL* = 000001000H;
    LBS_NODATA* = 000002000H;
    LBS_NOSEL* = 000004000H;
    LBS_STANDARD* = 000A00003H;
    CB_OKAY* = 000000000H;
    CB_ERR* = 0FFFFFFFFH;
    CB_ERRSPACE* = 0FFFFFFFEH;
    CBN_ERRSPACE* = 0FFFFFFFFH;
    CBN_SELCHANGE* = 000000001H;
    CBN_DBLCLK* = 000000002H;
    CBN_SETFOCUS* = 000000003H;
    CBN_KILLFOCUS* = 000000004H;
    CBN_EDITCHANGE* = 000000005H;
    CBN_EDITUPDATE* = 000000006H;
    CBN_DROPDOWN* = 000000007H;
    CBN_CLOSEUP* = 000000008H;
    CBN_SELENDOK* = 000000009H;
    CBN_SELENDCANCEL* = 00000000AH;
    CBS_SIMPLE* = 000000001H;
    CBS_DROPDOWN* = 000000002H;
    CBS_DROPDOWNLIST* = 000000003H;
    CBS_OWNERDRAWFIXED* = 000000010H;
    CBS_OWNERDRAWVARIABLE* = 000000020H;
    CBS_AUTOHSCROLL* = 000000040H;
    CBS_OEMCONVERT* = 000000080H;
    CBS_SORT* = 000000100H;
    CBS_HASSTRINGS* = 000000200H;
    CBS_NOINTEGRALHEIGHT* = 000000400H;
    CBS_DISABLENOSCROLL* = 000000800H;
    CBS_UPPERCASE* = 000002000H;
    CBS_LOWERCASE* = 000004000H;
    CB_GETEDITSEL* = 000000140H;
    CB_LIMITTEXT* = 000000141H;
    CB_SETEDITSEL* = 000000142H;
    CB_ADDSTRING* = 000000143H;
    CB_DELETESTRING* = 000000144H;
    CB_DIR* = 000000145H;
    CB_GETCOUNT* = 000000146H;
    CB_GETCURSEL* = 000000147H;
    CB_GETLBTEXT* = 000000148H;
    CB_GETLBTEXTLEN* = 000000149H;
    CB_INSERTSTRING* = 00000014AH;
    CB_RESETCONTENT* = 00000014BH;
    CB_FINDSTRING* = 00000014CH;
    CB_SELECTSTRING* = 00000014DH;
    CB_SETCURSEL* = 00000014EH;
    CB_SHOWDROPDOWN* = 00000014FH;
    CB_GETITEMDATA* = 000000150H;
    CB_SETITEMDATA* = 000000151H;
    CB_GETDROPPEDCONTROLRECT* = 000000152H;
    CB_SETITEMHEIGHT* = 000000153H;
    CB_GETITEMHEIGHT* = 000000154H;
    CB_SETEXTENDEDUI* = 000000155H;
    CB_GETEXTENDEDUI* = 000000156H;
    CB_GETDROPPEDSTATE* = 000000157H;
    CB_FINDSTRINGEXACT* = 000000158H;
    CB_SETLOCALE* = 000000159H;
    CB_GETLOCALE* = 00000015AH;
    CB_GETTOPINDEX* = 00000015BH;
    CB_SETTOPINDEX* = 00000015CH;
    CB_GETHORIZONTALEXTENT* = 00000015DH;
    CB_SETHORIZONTALEXTENT* = 00000015EH;
    CB_GETDROPPEDWIDTH* = 00000015FH;
    CB_SETDROPPEDWIDTH* = 000000160H;
    CB_INITSTORAGE* = 000000161H;
    CB_MSGMAX* = 000000162H;
    SBS_HORZ* = 000000000H;
    SBS_VERT* = 000000001H;
    SBS_TOPALIGN* = 000000002H;
    SBS_LEFTALIGN* = 000000002H;
    SBS_BOTTOMALIGN* = 000000004H;
    SBS_RIGHTALIGN* = 000000004H;
    SBS_SIZEBOXTOPLEFTALIGN* = 000000002H;
    SBS_SIZEBOXBOTTOMRIGHTALIGN* = 000000004H;
    SBS_SIZEBOX* = 000000008H;
    SBS_SIZEGRIP* = 000000010H;
    SBM_SETPOS* = 0000000E0H;
    SBM_GETPOS* = 0000000E1H;
    SBM_SETRANGE* = 0000000E2H;
    SBM_SETRANGEREDRAW* = 0000000E6H;
    SBM_GETRANGE* = 0000000E3H;
    SBM_ENABLE_ARROWS* = 0000000E4H;
    SBM_SETSCROLLINFO* = 0000000E9H;
    SBM_GETSCROLLINFO* = 0000000EAH;
    SIF_RANGE* = 000000001H;
    SIF_PAGE* = 000000002H;
    SIF_POS* = 000000004H;
    SIF_DISABLENOSCROLL* = 000000008H;
    SIF_TRACKPOS* = 000000010H;
    SIF_ALL* = 000000017H;
    MDIS_ALLCHILDSTYLES* = 000000001H;
    MDITILE_VERTICAL* = 000000000H;
    MDITILE_HORIZONTAL* = 000000001H;
    MDITILE_SKIPDISABLED* = 000000002H;
    HELP_CONTEXT* = 000000001H;
    HELP_QUIT* = 000000002H;
    HELP_INDEX* = 000000003H;
    HELP_CONTENTS* = 000000003H;
    HELP_HELPONHELP* = 000000004H;
    HELP_SETINDEX* = 000000005H;
    HELP_SETCONTENTS* = 000000005H;
    HELP_CONTEXTPOPUP* = 000000008H;
    HELP_FORCEFILE* = 000000009H;
    HELP_KEY* = 000000101H;
    HELP_COMMAND* = 000000102H;
    HELP_PARTIALKEY* = 000000105H;
    HELP_MULTIKEY* = 000000201H;
    HELP_SETWINPOS* = 000000203H;
    HELP_CONTEXTMENU* = 00000000AH;
    HELP_FINDER* = 00000000BH;
    HELP_WM_HELP* = 00000000CH;
    HELP_SETPOPUP_POS* = 00000000DH;
    HELP_TCARD* = 000008000H;
    HELP_TCARD_DATA* = 000000010H;
    HELP_TCARD_OTHER_CALLER* = 000000011H;
    IDH_NO_HELP* = 000006F18H;
    IDH_MISSING_CONTEXT* = 000006F19H;
    IDH_GENERIC_HELP_BUTTON* = 000006F1AH;
    IDH_OK* = 000006F1BH;
    IDH_CANCEL* = 000006F1CH;
    IDH_HELP* = 000006F1DH;
    SPI_GETBEEP* = 000000001H;
    SPI_SETBEEP* = 000000002H;
    SPI_GETMOUSE* = 000000003H;
    SPI_SETMOUSE* = 000000004H;
    SPI_GETBORDER* = 000000005H;
    SPI_SETBORDER* = 000000006H;
    SPI_GETKEYBOARDSPEED* = 00000000AH;
    SPI_SETKEYBOARDSPEED* = 00000000BH;
    SPI_LANGDRIVER* = 00000000CH;
    SPI_ICONHORIZONTALSPACING* = 00000000DH;
    SPI_GETSCREENSAVETIMEOUT* = 00000000EH;
    SPI_SETSCREENSAVETIMEOUT* = 00000000FH;
    SPI_GETSCREENSAVEACTIVE* = 000000010H;
    SPI_SETSCREENSAVEACTIVE* = 000000011H;
    SPI_GETGRIDGRANULARITY* = 000000012H;
    SPI_SETGRIDGRANULARITY* = 000000013H;
    SPI_SETDESKWALLPAPER* = 000000014H;
    SPI_SETDESKPATTERN* = 000000015H;
    SPI_GETKEYBOARDDELAY* = 000000016H;
    SPI_SETKEYBOARDDELAY* = 000000017H;
    SPI_ICONVERTICALSPACING* = 000000018H;
    SPI_GETICONTITLEWRAP* = 000000019H;
    SPI_SETICONTITLEWRAP* = 00000001AH;
    SPI_GETMENUDROPALIGNMENT* = 00000001BH;
    SPI_SETMENUDROPALIGNMENT* = 00000001CH;
    SPI_SETDOUBLECLKWIDTH* = 00000001DH;
    SPI_SETDOUBLECLKHEIGHT* = 00000001EH;
    SPI_GETICONTITLELOGFONT* = 00000001FH;
    SPI_SETDOUBLECLICKTIME* = 000000020H;
    SPI_SETMOUSEBUTTONSWAP* = 000000021H;
    SPI_SETICONTITLELOGFONT* = 000000022H;
    SPI_GETFASTTASKSWITCH* = 000000023H;
    SPI_SETFASTTASKSWITCH* = 000000024H;
    SPI_SETDRAGFULLWINDOWS* = 000000025H;
    SPI_GETDRAGFULLWINDOWS* = 000000026H;
    SPI_GETNONCLIENTMETRICS* = 000000029H;
    SPI_SETNONCLIENTMETRICS* = 00000002AH;
    SPI_GETMINIMIZEDMETRICS* = 00000002BH;
    SPI_SETMINIMIZEDMETRICS* = 00000002CH;
    SPI_GETICONMETRICS* = 00000002DH;
    SPI_SETICONMETRICS* = 00000002EH;
    SPI_SETWORKAREA* = 00000002FH;
    SPI_GETWORKAREA* = 000000030H;
    SPI_SETPENWINDOWS* = 000000031H;
    SPI_GETHIGHCONTRAST* = 000000042H;
    SPI_SETHIGHCONTRAST* = 000000043H;
    SPI_GETKEYBOARDPREF* = 000000044H;
    SPI_SETKEYBOARDPREF* = 000000045H;
    SPI_GETSCREENREADER* = 000000046H;
    SPI_SETSCREENREADER* = 000000047H;
    SPI_GETANIMATION* = 000000048H;
    SPI_SETANIMATION* = 000000049H;
    SPI_GETFONTSMOOTHING* = 00000004AH;
    SPI_SETFONTSMOOTHING* = 00000004BH;
    SPI_SETDRAGWIDTH* = 00000004CH;
    SPI_SETDRAGHEIGHT* = 00000004DH;
    SPI_SETHANDHELD* = 00000004EH;
    SPI_GETLOWPOWERTIMEOUT* = 00000004FH;
    SPI_GETPOWEROFFTIMEOUT* = 000000050H;
    SPI_SETLOWPOWERTIMEOUT* = 000000051H;
    SPI_SETPOWEROFFTIMEOUT* = 000000052H;
    SPI_GETLOWPOWERACTIVE* = 000000053H;
    SPI_GETPOWEROFFACTIVE* = 000000054H;
    SPI_SETLOWPOWERACTIVE* = 000000055H;
    SPI_SETPOWEROFFACTIVE* = 000000056H;
    SPI_SETCURSORS* = 000000057H;
    SPI_SETICONS* = 000000058H;
    SPI_GETDEFAULTINPUTLANG* = 000000059H;
    SPI_SETDEFAULTINPUTLANG* = 00000005AH;
    SPI_SETLANGTOGGLE* = 00000005BH;
    SPI_GETWINDOWSEXTENSION* = 00000005CH;
    SPI_SETMOUSETRAILS* = 00000005DH;
    SPI_GETMOUSETRAILS* = 00000005EH;
    SPI_SETSCREENSAVERRUNNING* = 000000061H;
    SPI_SCREENSAVERRUNNING* = 000000061H;
    SPI_GETFILTERKEYS* = 000000032H;
    SPI_SETFILTERKEYS* = 000000033H;
    SPI_GETTOGGLEKEYS* = 000000034H;
    SPI_SETTOGGLEKEYS* = 000000035H;
    SPI_GETMOUSEKEYS* = 000000036H;
    SPI_SETMOUSEKEYS* = 000000037H;
    SPI_GETSHOWSOUNDS* = 000000038H;
    SPI_SETSHOWSOUNDS* = 000000039H;
    SPI_GETSTICKYKEYS* = 00000003AH;
    SPI_SETSTICKYKEYS* = 00000003BH;
    SPI_GETACCESSTIMEOUT* = 00000003CH;
    SPI_SETACCESSTIMEOUT* = 00000003DH;
    SPI_GETSERIALKEYS* = 00000003EH;
    SPI_SETSERIALKEYS* = 00000003FH;
    SPI_GETSOUNDSENTRY* = 000000040H;
    SPI_SETSOUNDSENTRY* = 000000041H;
    SPI_GETMOUSEHOVERWIDTH* = 000000062H;
    SPI_SETMOUSEHOVERWIDTH* = 000000063H;
    SPI_GETMOUSEHOVERHEIGHT* = 000000064H;
    SPI_SETMOUSEHOVERHEIGHT* = 000000065H;
    SPI_GETMOUSEHOVERTIME* = 000000066H;
    SPI_SETMOUSEHOVERTIME* = 000000067H;
    SPI_GETWHEELSCROLLLINES* = 000000068H;
    SPI_SETWHEELSCROLLLINES* = 000000069H;
    SPI_GETSHOWIMEUI* = 00000006EH;
    SPI_SETSHOWIMEUI* = 00000006FH;
    SPIF_UPDATEINIFILE* = 000000001H;
    SPIF_SENDWININICHANGE* = 000000002H;
    SPIF_SENDCHANGE* = 000000002H;
    METRICS_USEDEFAULT* = 0FFFFFFFFH;
    ARW_BOTTOMLEFT* = 000000000H;
    ARW_BOTTOMRIGHT* = 000000001H;
    ARW_TOPLEFT* = 000000002H;
    ARW_TOPRIGHT* = 000000003H;
    ARW_STARTMASK* = 000000003H;
    ARW_STARTRIGHT* = 000000001H;
    ARW_STARTTOP* = 000000002H;
    ARW_LEFT* = 000000000H;
    ARW_RIGHT* = 000000000H;
    ARW_UP* = 000000004H;
    ARW_DOWN* = 000000004H;
    ARW_HIDE* = 000000008H;
    SERKF_SERIALKEYSON* = 000000001H;
    SERKF_AVAILABLE* = 000000002H;
    SERKF_INDICATOR* = 000000004H;
    HCF_HIGHCONTRASTON* = 000000001H;
    HCF_AVAILABLE* = 000000002H;
    HCF_HOTKEYACTIVE* = 000000004H;
    HCF_CONFIRMHOTKEY* = 000000008H;
    HCF_HOTKEYSOUND* = 000000010H;
    HCF_INDICATOR* = 000000020H;
    HCF_HOTKEYAVAILABLE* = 000000040H;
    CDS_UPDATEREGISTRY* = 000000001H;
    CDS_TEST* = 000000002H;
    CDS_FULLSCREEN* = 000000004H;
    CDS_GLOBAL* = 000000008H;
    CDS_SET_PRIMARY* = 000000010H;
    CDS_RESET* = 040000000H;
    CDS_SETRECT* = 020000000H;
    CDS_NORESET* = 010000000H;
    DISP_CHANGE_SUCCESSFUL* = 000000000H;
    DISP_CHANGE_RESTART* = 000000001H;
    DISP_CHANGE_FAILED* = 0FFFFFFFFH;
    DISP_CHANGE_BADMODE* = 0FFFFFFFEH;
    DISP_CHANGE_NOTUPDATED* = 0FFFFFFFDH;
    DISP_CHANGE_BADFLAGS* = 0FFFFFFFCH;
    DISP_CHANGE_BADPARAM* = 0FFFFFFFBH;
    ENUM_CURRENT_SETTINGS* = 0FFFFFFFFH;
    ENUM_REGISTRY_SETTINGS* = 0FFFFFFFEH;
    FKF_FILTERKEYSON* = 000000001H;
    FKF_AVAILABLE* = 000000002H;
    FKF_HOTKEYACTIVE* = 000000004H;
    FKF_CONFIRMHOTKEY* = 000000008H;
    FKF_HOTKEYSOUND* = 000000010H;
    FKF_INDICATOR* = 000000020H;
    FKF_CLICKON* = 000000040H;
    SKF_STICKYKEYSON* = 000000001H;
    SKF_AVAILABLE* = 000000002H;
    SKF_HOTKEYACTIVE* = 000000004H;
    SKF_CONFIRMHOTKEY* = 000000008H;
    SKF_HOTKEYSOUND* = 000000010H;
    SKF_INDICATOR* = 000000020H;
    SKF_AUDIBLEFEEDBACK* = 000000040H;
    SKF_TRISTATE* = 000000080H;
    SKF_TWOKEYSOFF* = 000000100H;
    MKF_MOUSEKEYSON* = 000000001H;
    MKF_AVAILABLE* = 000000002H;
    MKF_HOTKEYACTIVE* = 000000004H;
    MKF_CONFIRMHOTKEY* = 000000008H;
    MKF_HOTKEYSOUND* = 000000010H;
    MKF_INDICATOR* = 000000020H;
    MKF_MODIFIERS* = 000000040H;
    MKF_REPLACENUMBERS* = 000000080H;
    ATF_TIMEOUTON* = 000000001H;
    ATF_ONOFFFEEDBACK* = 000000002H;
    SSGF_NONE* = 000000000H;
    SSGF_DISPLAY* = 000000003H;
    SSTF_NONE* = 000000000H;
    SSTF_CHARS* = 000000001H;
    SSTF_BORDER* = 000000002H;
    SSTF_DISPLAY* = 000000003H;
    SSWF_NONE* = 000000000H;
    SSWF_TITLE* = 000000001H;
    SSWF_WINDOW* = 000000002H;
    SSWF_DISPLAY* = 000000003H;
    SSWF_CUSTOM* = 000000004H;
    SSF_SOUNDSENTRYON* = 000000001H;
    SSF_AVAILABLE* = 000000002H;
    SSF_INDICATOR* = 000000004H;
    TKF_TOGGLEKEYSON* = 000000001H;
    TKF_AVAILABLE* = 000000002H;
    TKF_HOTKEYACTIVE* = 000000004H;
    TKF_CONFIRMHOTKEY* = 000000008H;
    TKF_HOTKEYSOUND* = 000000010H;
    TKF_INDICATOR* = 000000020H;
    SLE_ERROR* = 000000001H;
    SLE_MINORERROR* = 000000002H;
    SLE_WARNING* = 000000003H;
    MAX_LEADBYTES* = 00000000CH;
    MAX_DEFAULTCHAR* = 000000002H;
    MB_PRECOMPOSED* = 000000001H;
    MB_COMPOSITE* = 000000002H;
    MB_USEGLYPHCHARS* = 000000004H;
    MB_ERR_INVALID_CHARS* = 000000008H;
    WC_COMPOSITECHECK* = 000000200H;
    WC_DISCARDNS* = 000000010H;
    WC_SEPCHARS* = 000000020H;
    WC_DEFAULTCHAR* = 000000040H;
    CT_CTYPE1* = 000000001H;
    CT_CTYPE2* = 000000002H;
    CT_CTYPE3* = 000000004H;
    C1_UPPER* = 000000001H;
    C1_LOWER* = 000000002H;
    C1_DIGIT* = 000000004H;
    C1_SPACE* = 000000008H;
    C1_PUNCT* = 000000010H;
    C1_CNTRL* = 000000020H;
    C1_BLANK* = 000000040H;
    C1_XDIGIT* = 000000080H;
    C1_ALPHA* = 000000100H;
    C2_LEFTTORIGHT* = 000000001H;
    C2_RIGHTTOLEFT* = 000000002H;
    C2_EUROPENUMBER* = 000000003H;
    C2_EUROPESEPARATOR* = 000000004H;
    C2_EUROPETERMINATOR* = 000000005H;
    C2_ARABICNUMBER* = 000000006H;
    C2_COMMONSEPARATOR* = 000000007H;
    C2_BLOCKSEPARATOR* = 000000008H;
    C2_SEGMENTSEPARATOR* = 000000009H;
    C2_WHITESPACE* = 00000000AH;
    C2_OTHERNEUTRAL* = 00000000BH;
    C2_NOTAPPLICABLE* = 000000000H;
    C3_NONSPACING* = 000000001H;
    C3_DIACRITIC* = 000000002H;
    C3_VOWELMARK* = 000000004H;
    C3_SYMBOL* = 000000008H;
    C3_KATAKANA* = 000000010H;
    C3_HIRAGANA* = 000000020H;
    C3_HALFWIDTH* = 000000040H;
    C3_FULLWIDTH* = 000000080H;
    C3_IDEOGRAPH* = 000000100H;
    C3_KASHIDA* = 000000200H;
    C3_LEXICAL* = 000000400H;
    C3_ALPHA* = 000008000H;
    C3_NOTAPPLICABLE* = 000000000H;
    NORM_IGNORECASE* = 000000001H;
    NORM_IGNORENONSPACE* = 000000002H;
    NORM_IGNORESYMBOLS* = 000000004H;
    NORM_IGNOREKANATYPE* = 000010000H;
    NORM_IGNOREWIDTH* = 000020000H;
    MAP_FOLDCZONE* = 000000010H;
    MAP_PRECOMPOSED* = 000000020H;
    MAP_COMPOSITE* = 000000040H;
    MAP_FOLDDIGITS* = 000000080H;
    LCMAP_LOWERCASE* = 000000100H;
    LCMAP_UPPERCASE* = 000000200H;
    LCMAP_SORTKEY* = 000000400H;
    LCMAP_BYTEREV* = 000000800H;
    LCMAP_HIRAGANA* = 000100000H;
    LCMAP_KATAKANA* = 000200000H;
    LCMAP_HALFWIDTH* = 000400000H;
    LCMAP_FULLWIDTH* = 000800000H;
    LCMAP_LINGUISTIC_CASING* = 001000000H;
    LCMAP_SIMPLIFIED_CHINESE* = 002000000H;
    LCMAP_TRADITIONAL_CHINESE* = 004000000H;
    LCID_INSTALLED* = 000000001H;
    LCID_SUPPORTED* = 000000002H;
    LCID_ALTERNATE_SORTS* = 000000004H;
    CP_INSTALLED* = 000000001H;
    CP_SUPPORTED* = 000000002H;
    SORT_STRINGSORT* = 000001000H;
    CSTR_LESS_THAN* = 000000001H;
    CSTR_EQUAL* = 000000002H;
    CSTR_GREATER_THAN* = 000000003H;
    CP_ACP* = 000000000H;
    CP_OEMCP* = 000000001H;
    CP_MACCP* = 000000002H;
    CP_THREAD_ACP* = 000000003H;
    CP_SYMBOL* = 00000002AH;
    CP_UTF7* = 00000FDE8H;
    CP_UTF8* = 00000FDE9H;
    CTRY_DEFAULT* = 000000000H;
    CTRY_ALBANIA* = 000000163H;
    CTRY_ALGERIA* = 0000000D5H;
    CTRY_ARGENTINA* = 000000036H;
    CTRY_AUSTRALIA* = 00000003DH;
    CTRY_AUSTRIA* = 00000002BH;
    CTRY_BAHRAIN* = 0000003CDH;
    CTRY_BELARUS* = 000000177H;
    CTRY_BELGIUM* = 000000020H;
    CTRY_BELIZE* = 0000001F5H;
    CTRY_BOLIVIA* = 00000024FH;
    CTRY_BRAZIL* = 000000037H;
    CTRY_BRUNEI_DARUSSALAM* = 0000002A1H;
    CTRY_BULGARIA* = 000000167H;
    CTRY_CANADA* = 000000002H;
    CTRY_CARIBBEAN* = 000000001H;
    CTRY_CHILE* = 000000038H;
    CTRY_COLOMBIA* = 000000039H;
    CTRY_COSTA_RICA* = 0000001FAH;
    CTRY_CROATIA* = 000000181H;
    CTRY_CZECH* = 0000001A4H;
    CTRY_DENMARK* = 00000002DH;
    CTRY_DOMINICAN_REPUBLIC* = 000000001H;
    CTRY_ECUADOR* = 000000251H;
    CTRY_EGYPT* = 000000014H;
    CTRY_EL_SALVADOR* = 0000001F7H;
    CTRY_ESTONIA* = 000000174H;
    CTRY_FAEROE_ISLANDS* = 00000012AH;
    CTRY_FINLAND* = 000000166H;
    CTRY_FRANCE* = 000000021H;
    CTRY_GERMANY* = 000000031H;
    CTRY_GREECE* = 00000001EH;
    CTRY_GUATEMALA* = 0000001F6H;
    CTRY_HONDURAS* = 0000001F8H;
    CTRY_HONG_KONG* = 000000354H;
    CTRY_HUNGARY* = 000000024H;
    CTRY_ICELAND* = 000000162H;
    CTRY_INDIA* = 00000005BH;
    CTRY_INDONESIA* = 00000003EH;
    CTRY_IRAN* = 0000003D5H;
    CTRY_IRAQ* = 0000003C4H;
    CTRY_IRELAND* = 000000161H;
    CTRY_ISRAEL* = 0000003CCH;
    CTRY_ITALY* = 000000027H;
    CTRY_JAMAICA* = 000000001H;
    CTRY_JAPAN* = 000000051H;
    CTRY_JORDAN* = 0000003C2H;
    CTRY_KENYA* = 0000000FEH;
    CTRY_KUWAIT* = 0000003C5H;
    CTRY_LATVIA* = 000000173H;
    CTRY_LEBANON* = 0000003C1H;
    CTRY_LIBYA* = 0000000DAH;
    CTRY_LIECHTENSTEIN* = 000000029H;
    CTRY_LITHUANIA* = 000000172H;
    CTRY_LUXEMBOURG* = 000000160H;
    CTRY_MACAU* = 000000355H;
    CTRY_MACEDONIA* = 000000185H;
    CTRY_MALAYSIA* = 00000003CH;
    CTRY_MEXICO* = 000000034H;
    CTRY_MONACO* = 000000021H;
    CTRY_MOROCCO* = 0000000D4H;
    CTRY_NETHERLANDS* = 00000001FH;
    CTRY_NEW_ZEALAND* = 000000040H;
    CTRY_NICARAGUA* = 0000001F9H;
    CTRY_NORWAY* = 00000002FH;
    CTRY_OMAN* = 0000003C8H;
    CTRY_PAKISTAN* = 00000005CH;
    CTRY_PANAMA* = 0000001FBH;
    CTRY_PARAGUAY* = 000000253H;
    CTRY_PERU* = 000000033H;
    CTRY_PHILIPPINES* = 00000003FH;
    CTRY_POLAND* = 000000030H;
    CTRY_PORTUGAL* = 00000015FH;
    CTRY_PRCHINA* = 000000056H;
    CTRY_PUERTO_RICO* = 000000001H;
    CTRY_QATAR* = 0000003CEH;
    CTRY_ROMANIA* = 000000028H;
    CTRY_RUSSIA* = 000000007H;
    CTRY_SAUDI_ARABIA* = 0000003C6H;
    CTRY_SERBIA* = 00000017DH;
    CTRY_SINGAPORE* = 000000041H;
    CTRY_SLOVAK* = 0000001A5H;
    CTRY_SLOVENIA* = 000000182H;
    CTRY_SOUTH_AFRICA* = 00000001BH;
    CTRY_SOUTH_KOREA* = 000000052H;
    CTRY_SPAIN* = 000000022H;
    CTRY_SWEDEN* = 00000002EH;
    CTRY_SWITZERLAND* = 000000029H;
    CTRY_SYRIA* = 0000003C3H;
    CTRY_TAIWAN* = 000000376H;
    CTRY_THAILAND* = 000000042H;
    CTRY_TRINIDAD_Y_TOBAGO* = 000000001H;
    CTRY_TUNISIA* = 0000000D8H;
    CTRY_TURKEY* = 00000005AH;
    CTRY_UAE* = 0000003CBH;
    CTRY_UKRAINE* = 00000017CH;
    CTRY_UNITED_KINGDOM* = 00000002CH;
    CTRY_UNITED_STATES* = 000000001H;
    CTRY_URUGUAY* = 000000256H;
    CTRY_VENEZUELA* = 00000003AH;
    CTRY_VIET_NAM* = 000000054H;
    CTRY_YEMEN* = 0000003C7H;
    CTRY_ZIMBABWE* = 000000107H;
    LOCALE_NOUSEROVERRIDE* = 080000000H;
    LOCALE_USE_CP_ACP* = 040000000H;
    LOCALE_RETURN_NUMBER* = 020000000H;
    LOCALE_ILANGUAGE* = 000000001H;
    LOCALE_SLANGUAGE* = 000000002H;
    LOCALE_SENGLANGUAGE* = 000001001H;
    LOCALE_SABBREVLANGNAME* = 000000003H;
    LOCALE_SNATIVELANGNAME* = 000000004H;
    LOCALE_ICOUNTRY* = 000000005H;
    LOCALE_SCOUNTRY* = 000000006H;
    LOCALE_SENGCOUNTRY* = 000001002H;
    LOCALE_SABBREVCTRYNAME* = 000000007H;
    LOCALE_SNATIVECTRYNAME* = 000000008H;
    LOCALE_IDEFAULTLANGUAGE* = 000000009H;
    LOCALE_IDEFAULTCOUNTRY* = 00000000AH;
    LOCALE_IDEFAULTCODEPAGE* = 00000000BH;
    LOCALE_IDEFAULTANSICODEPAGE* = 000001004H;
    LOCALE_IDEFAULTMACCODEPAGE* = 000001011H;
    LOCALE_SLIST* = 00000000CH;
    LOCALE_IMEASURE* = 00000000DH;
    LOCALE_SDECIMAL* = 00000000EH;
    LOCALE_STHOUSAND* = 00000000FH;
    LOCALE_SGROUPING* = 000000010H;
    LOCALE_IDIGITS* = 000000011H;
    LOCALE_ILZERO* = 000000012H;
    LOCALE_INEGNUMBER* = 000001010H;
    LOCALE_SNATIVEDIGITS* = 000000013H;
    LOCALE_SCURRENCY* = 000000014H;
    LOCALE_SINTLSYMBOL* = 000000015H;
    LOCALE_SMONDECIMALSEP* = 000000016H;
    LOCALE_SMONTHOUSANDSEP* = 000000017H;
    LOCALE_SMONGROUPING* = 000000018H;
    LOCALE_ICURRDIGITS* = 000000019H;
    LOCALE_IINTLCURRDIGITS* = 00000001AH;
    LOCALE_ICURRENCY* = 00000001BH;
    LOCALE_INEGCURR* = 00000001CH;
    LOCALE_SDATE* = 00000001DH;
    LOCALE_STIME* = 00000001EH;
    LOCALE_SSHORTDATE* = 00000001FH;
    LOCALE_SLONGDATE* = 000000020H;
    LOCALE_STIMEFORMAT* = 000001003H;
    LOCALE_IDATE* = 000000021H;
    LOCALE_ILDATE* = 000000022H;
    LOCALE_ITIME* = 000000023H;
    LOCALE_ITIMEMARKPOSN* = 000001005H;
    LOCALE_ICENTURY* = 000000024H;
    LOCALE_ITLZERO* = 000000025H;
    LOCALE_IDAYLZERO* = 000000026H;
    LOCALE_IMONLZERO* = 000000027H;
    LOCALE_S1159* = 000000028H;
    LOCALE_S2359* = 000000029H;
    LOCALE_ICALENDARTYPE* = 000001009H;
    LOCALE_IOPTIONALCALENDAR* = 00000100BH;
    LOCALE_IFIRSTDAYOFWEEK* = 00000100CH;
    LOCALE_IFIRSTWEEKOFYEAR* = 00000100DH;
    LOCALE_SDAYNAME1* = 00000002AH;
    LOCALE_SDAYNAME2* = 00000002BH;
    LOCALE_SDAYNAME3* = 00000002CH;
    LOCALE_SDAYNAME4* = 00000002DH;
    LOCALE_SDAYNAME5* = 00000002EH;
    LOCALE_SDAYNAME6* = 00000002FH;
    LOCALE_SDAYNAME7* = 000000030H;
    LOCALE_SABBREVDAYNAME1* = 000000031H;
    LOCALE_SABBREVDAYNAME2* = 000000032H;
    LOCALE_SABBREVDAYNAME3* = 000000033H;
    LOCALE_SABBREVDAYNAME4* = 000000034H;
    LOCALE_SABBREVDAYNAME5* = 000000035H;
    LOCALE_SABBREVDAYNAME6* = 000000036H;
    LOCALE_SABBREVDAYNAME7* = 000000037H;
    LOCALE_SMONTHNAME1* = 000000038H;
    LOCALE_SMONTHNAME2* = 000000039H;
    LOCALE_SMONTHNAME3* = 00000003AH;
    LOCALE_SMONTHNAME4* = 00000003BH;
    LOCALE_SMONTHNAME5* = 00000003CH;
    LOCALE_SMONTHNAME6* = 00000003DH;
    LOCALE_SMONTHNAME7* = 00000003EH;
    LOCALE_SMONTHNAME8* = 00000003FH;
    LOCALE_SMONTHNAME9* = 000000040H;
    LOCALE_SMONTHNAME10* = 000000041H;
    LOCALE_SMONTHNAME11* = 000000042H;
    LOCALE_SMONTHNAME12* = 000000043H;
    LOCALE_SMONTHNAME13* = 00000100EH;
    LOCALE_SABBREVMONTHNAME1* = 000000044H;
    LOCALE_SABBREVMONTHNAME2* = 000000045H;
    LOCALE_SABBREVMONTHNAME3* = 000000046H;
    LOCALE_SABBREVMONTHNAME4* = 000000047H;
    LOCALE_SABBREVMONTHNAME5* = 000000048H;
    LOCALE_SABBREVMONTHNAME6* = 000000049H;
    LOCALE_SABBREVMONTHNAME7* = 00000004AH;
    LOCALE_SABBREVMONTHNAME8* = 00000004BH;
    LOCALE_SABBREVMONTHNAME9* = 00000004CH;
    LOCALE_SABBREVMONTHNAME10* = 00000004DH;
    LOCALE_SABBREVMONTHNAME11* = 00000004EH;
    LOCALE_SABBREVMONTHNAME12* = 00000004FH;
    LOCALE_SABBREVMONTHNAME13* = 00000100FH;
    LOCALE_SPOSITIVESIGN* = 000000050H;
    LOCALE_SNEGATIVESIGN* = 000000051H;
    LOCALE_IPOSSIGNPOSN* = 000000052H;
    LOCALE_INEGSIGNPOSN* = 000000053H;
    LOCALE_IPOSSYMPRECEDES* = 000000054H;
    LOCALE_IPOSSEPBYSPACE* = 000000055H;
    LOCALE_INEGSYMPRECEDES* = 000000056H;
    LOCALE_INEGSEPBYSPACE* = 000000057H;
    LOCALE_FONTSIGNATURE* = 000000058H;
    LOCALE_SISO639LANGNAME* = 000000059H;
    LOCALE_SISO3166CTRYNAME* = 00000005AH;
    TIME_NOMINUTESORSECONDS* = 000000001H;
    TIME_NOSECONDS* = 000000002H;
    TIME_NOTIMEMARKER* = 000000004H;
    TIME_FORCE24HOURFORMAT* = 000000008H;
    DATE_SHORTDATE* = 000000001H;
    DATE_LONGDATE* = 000000002H;
    DATE_USE_ALT_CALENDAR* = 000000004H;
    CAL_ICALINTVALUE* = 000000001H;
    CAL_SCALNAME* = 000000002H;
    CAL_IYEAROFFSETRANGE* = 000000003H;
    CAL_SERASTRING* = 000000004H;
    CAL_SSHORTDATE* = 000000005H;
    CAL_SLONGDATE* = 000000006H;
    CAL_SDAYNAME1* = 000000007H;
    CAL_SDAYNAME2* = 000000008H;
    CAL_SDAYNAME3* = 000000009H;
    CAL_SDAYNAME4* = 00000000AH;
    CAL_SDAYNAME5* = 00000000BH;
    CAL_SDAYNAME6* = 00000000CH;
    CAL_SDAYNAME7* = 00000000DH;
    CAL_SABBREVDAYNAME1* = 00000000EH;
    CAL_SABBREVDAYNAME2* = 00000000FH;
    CAL_SABBREVDAYNAME3* = 000000010H;
    CAL_SABBREVDAYNAME4* = 000000011H;
    CAL_SABBREVDAYNAME5* = 000000012H;
    CAL_SABBREVDAYNAME6* = 000000013H;
    CAL_SABBREVDAYNAME7* = 000000014H;
    CAL_SMONTHNAME1* = 000000015H;
    CAL_SMONTHNAME2* = 000000016H;
    CAL_SMONTHNAME3* = 000000017H;
    CAL_SMONTHNAME4* = 000000018H;
    CAL_SMONTHNAME5* = 000000019H;
    CAL_SMONTHNAME6* = 00000001AH;
    CAL_SMONTHNAME7* = 00000001BH;
    CAL_SMONTHNAME8* = 00000001CH;
    CAL_SMONTHNAME9* = 00000001DH;
    CAL_SMONTHNAME10* = 00000001EH;
    CAL_SMONTHNAME11* = 00000001FH;
    CAL_SMONTHNAME12* = 000000020H;
    CAL_SMONTHNAME13* = 000000021H;
    CAL_SABBREVMONTHNAME1* = 000000022H;
    CAL_SABBREVMONTHNAME2* = 000000023H;
    CAL_SABBREVMONTHNAME3* = 000000024H;
    CAL_SABBREVMONTHNAME4* = 000000025H;
    CAL_SABBREVMONTHNAME5* = 000000026H;
    CAL_SABBREVMONTHNAME6* = 000000027H;
    CAL_SABBREVMONTHNAME7* = 000000028H;
    CAL_SABBREVMONTHNAME8* = 000000029H;
    CAL_SABBREVMONTHNAME9* = 00000002AH;
    CAL_SABBREVMONTHNAME10* = 00000002BH;
    CAL_SABBREVMONTHNAME11* = 00000002CH;
    CAL_SABBREVMONTHNAME12* = 00000002DH;
    CAL_SABBREVMONTHNAME13* = 00000002EH;
    ENUM_ALL_CALENDARS* = 0FFFFFFFFH;
    CAL_GREGORIAN* = 000000001H;
    CAL_GREGORIAN_US* = 000000002H;
    CAL_JAPAN* = 000000003H;
    CAL_TAIWAN* = 000000004H;
    CAL_KOREA* = 000000005H;
    CAL_HIJRI* = 000000006H;
    CAL_THAI* = 000000007H;
    CAL_HEBREW* = 000000008H;
    CAL_GREGORIAN_ME_FRENCH* = 000000009H;
    CAL_GREGORIAN_ARABIC* = 00000000AH;
    CAL_GREGORIAN_XLIT_ENGLISH* = 00000000BH;
    CAL_GREGORIAN_XLIT_FRENCH* = 00000000CH;
    RIGHT_ALT_PRESSED* = 000000001H;
    LEFT_ALT_PRESSED* = 000000002H;
    RIGHT_CTRL_PRESSED* = 000000004H;
    LEFT_CTRL_PRESSED* = 000000008H;
    SHIFT_PRESSED* = 000000010H;
    NUMLOCK_ON* = 000000020H;
    SCROLLLOCK_ON* = 000000040H;
    CAPSLOCK_ON* = 000000080H;
    ENHANCED_KEY* = 000000100H;
    NLS_DBCSCHAR* = 000010000H;
    NLS_ALPHANUMERIC* = 000000000H;
    NLS_KATAKANA* = 000020000H;
    NLS_HIRAGANA* = 000040000H;
    NLS_ROMAN* = 000400000H;
    NLS_IME_CONVERSION* = 000800000H;
    NLS_IME_DISABLE* = 020000000H;
    FROM_LEFT_1ST_BUTTON_PRESSED* = 000000001H;
    RIGHTMOST_BUTTON_PRESSED* = 000000002H;
    FROM_LEFT_2ND_BUTTON_PRESSED* = 000000004H;
    FROM_LEFT_3RD_BUTTON_PRESSED* = 000000008H;
    FROM_LEFT_4TH_BUTTON_PRESSED* = 000000010H;
    MOUSE_MOVED* = 000000001H;
    DOUBLE_CLICK* = 000000002H;
    MOUSE_WHEELED* = 000000004H;
    KEY_EVENT* = 000000001H;
    MOUSE_EVENT* = 000000002H;
    WINDOW_BUFFER_SIZE_EVENT* = 000000004H;
    MENU_EVENT* = 000000008H;
    FOCUS_EVENT* = 000000010H;
    FOREGROUND_BLUE* = 000000001H;
    FOREGROUND_GREEN* = 000000002H;
    FOREGROUND_RED* = 000000004H;
    FOREGROUND_INTENSITY* = 000000008H;
    BACKGROUND_BLUE* = 000000010H;
    BACKGROUND_GREEN* = 000000020H;
    BACKGROUND_RED* = 000000040H;
    BACKGROUND_INTENSITY* = 000000080H;
    COMMON_LVB_LEADING_BYTE* = 000000100H;
    COMMON_LVB_TRAILING_BYTE* = 000000200H;
    COMMON_LVB_GRID_HORIZONTAL* = 000000400H;
    COMMON_LVB_GRID_LVERTICAL* = 000000800H;
    COMMON_LVB_GRID_RVERTICAL* = 000001000H;
    COMMON_LVB_REVERSE_VIDEO* = 000004000H;
    COMMON_LVB_UNDERSCORE* = 000008000H;
    COMMON_LVB_SBCSDBCS* = 000000300H;
    CTRL_C_EVENT* = 000000000H;
    CTRL_BREAK_EVENT* = 000000001H;
    CTRL_CLOSE_EVENT* = 000000002H;
    CTRL_LOGOFF_EVENT* = 000000005H;
    CTRL_SHUTDOWN_EVENT* = 000000006H;
    ENABLE_PROCESSED_INPUT* = 000000001H;
    ENABLE_LINE_INPUT* = 000000002H;
    ENABLE_ECHO_INPUT* = 000000004H;
    ENABLE_WINDOW_INPUT* = 000000008H;
    ENABLE_MOUSE_INPUT* = 000000010H;
    ENABLE_PROCESSED_OUTPUT* = 000000001H;
    ENABLE_WRAP_AT_EOL_OUTPUT* = 000000002H;
    CONSOLE_TEXTMODE_BUFFER* = 000000001H;
    VS_FILE_INFO* = 000000010H;
    VS_VERSION_INFO* = 000000001H;
    VS_USER_DEFINED* = 000000064H;
    VS_FFI_SIGNATURE* = 0FEEF04BDH;
    VS_FFI_STRUCVERSION* = 000010000H;
    VS_FFI_FILEFLAGSMASK* = 00000003FH;
    VS_FF_DEBUG* = 000000001H;
    VS_FF_PRERELEASE* = 000000002H;
    VS_FF_PATCHED* = 000000004H;
    VS_FF_PRIVATEBUILD* = 000000008H;
    VS_FF_INFOINFERRED* = 000000010H;
    VS_FF_SPECIALBUILD* = 000000020H;
    VOS_UNKNOWN* = 000000000H;
    VOS_DOS* = 000010000H;
    VOS_OS216* = 000020000H;
    VOS_OS232* = 000030000H;
    VOS_NT* = 000040000H;
    VOS__BASE* = 000000000H;
    VOS__WINDOWS16* = 000000001H;
    VOS__PM16* = 000000002H;
    VOS__PM32* = 000000003H;
    VOS__WINDOWS32* = 000000004H;
    VOS_DOS_WINDOWS16* = 000010001H;
    VOS_DOS_WINDOWS32* = 000010004H;
    VOS_OS216_PM16* = 000020002H;
    VOS_OS232_PM32* = 000030003H;
    VOS_NT_WINDOWS32* = 000040004H;
    VFT_UNKNOWN* = 000000000H;
    VFT_APP* = 000000001H;
    VFT_DLL* = 000000002H;
    VFT_DRV* = 000000003H;
    VFT_FONT* = 000000004H;
    VFT_VXD* = 000000005H;
    VFT_STATIC_LIB* = 000000007H;
    VFT2_UNKNOWN* = 000000000H;
    VFT2_DRV_PRINTER* = 000000001H;
    VFT2_DRV_KEYBOARD* = 000000002H;
    VFT2_DRV_LANGUAGE* = 000000003H;
    VFT2_DRV_DISPLAY* = 000000004H;
    VFT2_DRV_MOUSE* = 000000005H;
    VFT2_DRV_NETWORK* = 000000006H;
    VFT2_DRV_SYSTEM* = 000000007H;
    VFT2_DRV_INSTALLABLE* = 000000008H;
    VFT2_DRV_SOUND* = 000000009H;
    VFT2_DRV_COMM* = 00000000AH;
    VFT2_DRV_INPUTMETHOD* = 00000000BH;
    VFT2_FONT_RASTER* = 000000001H;
    VFT2_FONT_VECTOR* = 000000002H;
    VFT2_FONT_TRUETYPE* = 000000003H;
    VFFF_ISSHAREDFILE* = 000000001H;
    VFF_CURNEDEST* = 000000001H;
    VFF_FILEINUSE* = 000000002H;
    VFF_BUFFTOOSMALL* = 000000004H;
    VIFF_FORCEINSTALL* = 000000001H;
    VIFF_DONTDELETEOLD* = 000000002H;
    VIF_TEMPFILE* = 000000001H;
    VIF_MISMATCH* = 000000002H;
    VIF_SRCOLD* = 000000004H;
    VIF_DIFFLANG* = 000000008H;
    VIF_DIFFCODEPG* = 000000010H;
    VIF_DIFFTYPE* = 000000020H;
    VIF_WRITEPROT* = 000000040H;
    VIF_FILEINUSE* = 000000080H;
    VIF_OUTOFSPACE* = 000000100H;
    VIF_ACCESSVIOLATION* = 000000200H;
    VIF_SHARINGVIOLATION* = 000000400H;
    VIF_CANNOTCREATE* = 000000800H;
    VIF_CANNOTDELETE* = 000001000H;
    VIF_CANNOTRENAME* = 000002000H;
    VIF_CANNOTDELETECUR* = 000004000H;
    VIF_OUTOFMEMORY* = 000008000H;
    VIF_CANNOTREADSRC* = 000010000H;
    VIF_CANNOTREADDST* = 000020000H;
    VIF_BUFFTOOSMALL* = 000040000H;
    HKEY_CLASSES_ROOT* = 080000000H;
    HKEY_CURRENT_USER* = 080000001H;
    HKEY_LOCAL_MACHINE* = 080000002H;
    HKEY_USERS* = 080000003H;
    HKEY_PERFORMANCE_DATA* = 080000004H;
    HKEY_CURRENT_CONFIG* = 080000005H;
    HKEY_DYN_DATA* = 080000006H;
    PROVIDER_KEEPS_VALUE_LENGTH* = 000000001H;
    WIN31_CLASS* = 000000000H;
    WNNC_NET_MSNET* = 000010000H;
    WNNC_NET_LANMAN* = 000020000H;
    WNNC_NET_NETWARE* = 000030000H;
    WNNC_NET_VINES* = 000040000H;
    WNNC_NET_10NET* = 000050000H;
    WNNC_NET_LOCUS* = 000060000H;
    WNNC_NET_SUN_PC_NFS* = 000070000H;
    WNNC_NET_LANSTEP* = 000080000H;
    WNNC_NET_9TILES* = 000090000H;
    WNNC_NET_LANTASTIC* = 0000A0000H;
    WNNC_NET_AS400* = 0000B0000H;
    WNNC_NET_FTP_NFS* = 0000C0000H;
    WNNC_NET_PATHWORKS* = 0000D0000H;
    WNNC_NET_LIFENET* = 0000E0000H;
    WNNC_NET_POWERLAN* = 0000F0000H;
    WNNC_NET_BWNFS* = 000100000H;
    WNNC_NET_COGENT* = 000110000H;
    WNNC_NET_FARALLON* = 000120000H;
    WNNC_NET_APPLETALK* = 000130000H;
    WNNC_NET_INTERGRAPH* = 000140000H;
    WNNC_NET_SYMFONET* = 000150000H;
    WNNC_NET_CLEARCASE* = 000160000H;
    WNNC_NET_FRONTIER* = 000170000H;
    WNNC_NET_BMC* = 000180000H;
    WNNC_NET_DCE* = 000190000H;
    WNNC_NET_DECORB* = 000200000H;
    WNNC_NET_PROTSTOR* = 000210000H;
    WNNC_NET_FJ_REDIR* = 000220000H;
    WNNC_NET_DISTINCT* = 000230000H;
    WNNC_NET_TWINS* = 000240000H;
    WNNC_NET_RDR2SAMPLE* = 000250000H;
    RESOURCE_CONNECTED* = 000000001H;
    RESOURCE_GLOBALNET* = 000000002H;
    RESOURCE_REMEMBERED* = 000000003H;
    RESOURCE_RECENT* = 000000004H;
    RESOURCE_CONTEXT* = 000000005H;
    RESOURCETYPE_ANY* = 000000000H;
    RESOURCETYPE_DISK* = 000000001H;
    RESOURCETYPE_PRINT* = 000000002H;
    RESOURCETYPE_RESERVED* = 000000008H;
    RESOURCETYPE_UNKNOWN* = 0FFFFFFFFH;
    RESOURCEUSAGE_CONNECTABLE* = 000000001H;
    RESOURCEUSAGE_CONTAINER* = 000000002H;
    RESOURCEUSAGE_NOLOCALDEVICE* = 000000004H;
    RESOURCEUSAGE_SIBLING* = 000000008H;
    RESOURCEUSAGE_ATTACHED* = 000000010H;
    RESOURCEUSAGE_ALL* = 000000013H;
    RESOURCEUSAGE_RESERVED* = 080000000H;
    RESOURCEDISPLAYTYPE_GENERIC* = 000000000H;
    RESOURCEDISPLAYTYPE_DOMAIN* = 000000001H;
    RESOURCEDISPLAYTYPE_SERVER* = 000000002H;
    RESOURCEDISPLAYTYPE_SHARE* = 000000003H;
    RESOURCEDISPLAYTYPE_FILE* = 000000004H;
    RESOURCEDISPLAYTYPE_GROUP* = 000000005H;
    RESOURCEDISPLAYTYPE_NETWORK* = 000000006H;
    RESOURCEDISPLAYTYPE_ROOT* = 000000007H;
    RESOURCEDISPLAYTYPE_SHAREADMIN* = 000000008H;
    RESOURCEDISPLAYTYPE_DIRECTORY* = 000000009H;
    RESOURCEDISPLAYTYPE_TREE* = 00000000AH;
    RESOURCEDISPLAYTYPE_NDSCONTAINER* = 00000000BH;
    NETPROPERTY_PERSISTENT* = 000000001H;
    CONNECT_UPDATE_PROFILE* = 000000001H;
    CONNECT_UPDATE_RECENT* = 000000002H;
    CONNECT_TEMPORARY* = 000000004H;
    CONNECT_INTERACTIVE* = 000000008H;
    CONNECT_PROMPT* = 000000010H;
    CONNECT_NEED_DRIVE* = 000000020H;
    CONNECT_REFCOUNT* = 000000040H;
    CONNECT_REDIRECT* = 000000080H;
    CONNECT_LOCALDRIVE* = 000000100H;
    CONNECT_CURRENT_MEDIA* = 000000200H;
    CONNECT_DEFERRED* = 000000400H;
    CONNECT_RESERVED* = 0FF000000H;
    CONNDLG_RO_PATH* = 000000001H;
    CONNDLG_CONN_POINT* = 000000002H;
    CONNDLG_USE_MRU* = 000000004H;
    CONNDLG_HIDE_BOX* = 000000008H;
    CONNDLG_PERSIST* = 000000010H;
    CONNDLG_NOT_PERSIST* = 000000020H;
    DISC_UPDATE_PROFILE* = 000000001H;
    DISC_NO_FORCE* = 000000040H;
    UNIVERSAL_NAME_INFO_LEVEL* = 000000001H;
    REMOTE_NAME_INFO_LEVEL* = 000000002H;
    WNFMT_MULTILINE* = 000000001H;
    WNFMT_ABBREVIATED* = 000000002H;
    WNFMT_INENUM* = 000000010H;
    WNFMT_CONNECTION* = 000000020H;
    NETINFO_DLL16* = 000000001H;
    NETINFO_DISKRED* = 000000004H;
    NETINFO_PRINTERRED* = 000000008H;
    RP_LOGON* = 000000001H;
    RP_INIFILE* = 000000002H;
    PP_DISPLAYERRORS* = 000000001H;
    WN_SUCCESS* = 000000000H;
    WN_NO_ERROR* = 000000000H;
    WN_NOT_SUPPORTED* = 000000032H;
    WN_CANCEL* = 0000004C7H;
    WN_RETRY* = 0000004D5H;
    WN_NET_ERROR* = 00000003BH;
    WN_MORE_DATA* = 0000000EAH;
    WN_BAD_POINTER* = 0000001E7H;
    WN_BAD_VALUE* = 000000057H;
    WN_BAD_USER* = 00000089AH;
    WN_BAD_PASSWORD* = 000000056H;
    WN_ACCESS_DENIED* = 000000005H;
    WN_FUNCTION_BUSY* = 0000000AAH;
    WN_WINDOWS_ERROR* = 00000003BH;
    WN_OUT_OF_MEMORY* = 000000008H;
    WN_NO_NETWORK* = 0000004C6H;
    WN_EXTENDED_ERROR* = 0000004B8H;
    WN_BAD_LEVEL* = 00000007CH;
    WN_BAD_HANDLE* = 000000006H;
    WN_NOT_INITIALIZING* = 0000004DFH;
    WN_NO_MORE_DEVICES* = 0000004E0H;
    WN_NOT_CONNECTED* = 0000008CAH;
    WN_OPEN_FILES* = 000000961H;
    WN_DEVICE_IN_USE* = 000000964H;
    WN_BAD_NETNAME* = 000000043H;
    WN_BAD_LOCALNAME* = 0000004B0H;
    WN_ALREADY_CONNECTED* = 000000055H;
    WN_DEVICE_ERROR* = 00000001FH;
    WN_CONNECTION_CLOSED* = 0000004B1H;
    WN_NO_NET_OR_BAD_PATH* = 0000004B3H;
    WN_BAD_PROVIDER* = 0000004B4H;
    WN_CANNOT_OPEN_PROFILE* = 0000004B5H;
    WN_BAD_PROFILE* = 0000004B6H;
    WN_BAD_DEV_TYPE* = 000000042H;
    WN_DEVICE_ALREADY_REMEMBERED* = 0000004B2H;
    WN_CONNECTED_OTHER_PASSWORD* = 00000083CH;
    WN_NO_MORE_ENTRIES* = 000000103H;
    WN_NOT_CONTAINER* = 0000004B7H;
    WN_NOT_AUTHENTICATED* = 0000004DCH;
    WN_NOT_LOGGED_ON* = 0000004DDH;
    WN_NOT_VALIDATED* = 00000051FH;
    WNCON_FORNETCARD* = 000000001H;
    WNCON_NOTROUTED* = 000000002H;
    WNCON_SLOWLINK* = 000000004H;
    WNCON_DYNAMIC* = 000000008H;
    SC_GROUP_IDENTIFIERA* = 00000002BH;
    SC_GROUP_IDENTIFIER* = 00000002BH;
    SERVICE_NO_CHANGE* = 0FFFFFFFFH;
    SERVICE_ACTIVE* = 000000001H;
    SERVICE_INACTIVE* = 000000002H;
    SERVICE_STATE_ALL* = 000000003H;
    SERVICE_CONTROL_STOP* = 000000001H;
    SERVICE_CONTROL_PAUSE* = 000000002H;
    SERVICE_CONTROL_CONTINUE* = 000000003H;
    SERVICE_CONTROL_INTERROGATE* = 000000004H;
    SERVICE_CONTROL_SHUTDOWN* = 000000005H;
    SERVICE_CONTROL_PARAMCHANGE* = 000000006H;
    SERVICE_CONTROL_NETBINDADD* = 000000007H;
    SERVICE_CONTROL_NETBINDREMOVE* = 000000008H;
    SERVICE_CONTROL_NETBINDENABLE* = 000000009H;
    SERVICE_CONTROL_NETBINDDISABLE* = 00000000AH;
    SERVICE_STOPPED* = 000000001H;
    SERVICE_START_PENDING* = 000000002H;
    SERVICE_STOP_PENDING* = 000000003H;
    SERVICE_RUNNING* = 000000004H;
    SERVICE_CONTINUE_PENDING* = 000000005H;
    SERVICE_PAUSE_PENDING* = 000000006H;
    SERVICE_PAUSED* = 000000007H;
    SERVICE_ACCEPT_STOP* = 000000001H;
    SERVICE_ACCEPT_PAUSE_CONTINUE* = 000000002H;
    SERVICE_ACCEPT_SHUTDOWN* = 000000004H;
    SERVICE_ACCEPT_PARAMCHANGE* = 000000008H;
    SERVICE_ACCEPT_NETBINDCHANGE* = 000000010H;
    SC_MANAGER_CONNECT* = 000000001H;
    SC_MANAGER_CREATE_SERVICE* = 000000002H;
    SC_MANAGER_ENUMERATE_SERVICE* = 000000004H;
    SC_MANAGER_LOCK* = 000000008H;
    SC_MANAGER_QUERY_LOCK_STATUS* = 000000010H;
    SC_MANAGER_MODIFY_BOOT_CONFIG* = 000000020H;
    SC_MANAGER_ALL_ACCESS* = 0000F003FH;
    SERVICE_QUERY_CONFIG* = 000000001H;
    SERVICE_CHANGE_CONFIG* = 000000002H;
    SERVICE_QUERY_STATUS* = 000000004H;
    SERVICE_ENUMERATE_DEPENDENTS* = 000000008H;
    SERVICE_START* = 000000010H;
    SERVICE_STOP* = 000000020H;
    SERVICE_PAUSE_CONTINUE* = 000000040H;
    SERVICE_INTERROGATE* = 000000080H;
    SERVICE_USER_DEFINED_CONTROL* = 000000100H;
    SERVICE_ALL_ACCESS* = 0000F01FFH;
    SERVICE_CONFIG_DESCRIPTION* = 000000001H;
    SERVICE_CONFIG_FAILURE_ACTIONS* = 000000002H;
    DIALOPTION_BILLING* = 000000040H;
    DIALOPTION_QUIET* = 000000080H;
    DIALOPTION_DIALTONE* = 000000100H;
    MDMVOLFLAG_LOW* = 000000001H;
    MDMVOLFLAG_MEDIUM* = 000000002H;
    MDMVOLFLAG_HIGH* = 000000004H;
    MDMVOL_LOW* = 000000000H;
    MDMVOL_MEDIUM* = 000000001H;
    MDMVOL_HIGH* = 000000002H;
    MDMSPKRFLAG_OFF* = 000000001H;
    MDMSPKRFLAG_DIAL* = 000000002H;
    MDMSPKRFLAG_ON* = 000000004H;
    MDMSPKRFLAG_CALLSETUP* = 000000008H;
    MDMSPKR_OFF* = 000000000H;
    MDMSPKR_DIAL* = 000000001H;
    MDMSPKR_ON* = 000000002H;
    MDMSPKR_CALLSETUP* = 000000003H;
    MDM_COMPRESSION* = 000000001H;
    MDM_ERROR_CONTROL* = 000000002H;
    MDM_FORCED_EC* = 000000004H;
    MDM_CELLULAR* = 000000008H;
    MDM_FLOWCONTROL_HARD* = 000000010H;
    MDM_FLOWCONTROL_SOFT* = 000000020H;
    MDM_CCITT_OVERRIDE* = 000000040H;
    MDM_SPEED_ADJUST* = 000000080H;
    MDM_TONE_DIAL* = 000000100H;
    MDM_BLIND_DIAL* = 000000200H;
    MDM_V23_OVERRIDE* = 000000400H;
    STYLE_DESCRIPTION_SIZE* = 000000020H;
    IMC_GETCANDIDATEPOS* = 000000007H;
    IMC_SETCANDIDATEPOS* = 000000008H;
    IMC_GETCOMPOSITIONFONT* = 000000009H;
    IMC_SETCOMPOSITIONFONT* = 00000000AH;
    IMC_GETCOMPOSITIONWINDOW* = 00000000BH;
    IMC_SETCOMPOSITIONWINDOW* = 00000000CH;
    IMC_GETSTATUSWINDOWPOS* = 00000000FH;
    IMC_SETSTATUSWINDOWPOS* = 000000010H;
    IMC_CLOSESTATUSWINDOW* = 000000021H;
    IMC_OPENSTATUSWINDOW* = 000000022H;
    NI_OPENCANDIDATE* = 000000010H;
    NI_CLOSECANDIDATE* = 000000011H;
    NI_SELECTCANDIDATESTR* = 000000012H;
    NI_CHANGECANDIDATELIST* = 000000013H;
    NI_FINALIZECONVERSIONRESULT* = 000000014H;
    NI_COMPOSITIONSTR* = 000000015H;
    NI_SETCANDIDATE_PAGESTART* = 000000016H;
    NI_SETCANDIDATE_PAGESIZE* = 000000017H;
    NI_IMEMENUSELECTED* = 000000018H;
    ISC_SHOWUICANDIDATEWINDOW* = 000000001H;
    ISC_SHOWUICOMPOSITIONWINDOW* = 080000000H;
    ISC_SHOWUIGUIDELINE* = 040000000H;
    ISC_SHOWUIALLCANDIDATEWINDOW* = 00000000FH;
    ISC_SHOWUIALL* = 0C000000FH;
    CPS_COMPLETE* = 000000001H;
    CPS_CONVERT* = 000000002H;
    CPS_REVERT* = 000000003H;
    CPS_CANCEL* = 000000004H;
    MOD_LEFT* = 000008000H;
    MOD_RIGHT* = 000004000H;
    MOD_ON_KEYUP* = 000000800H;
    MOD_IGNORE_ALL_MODIFIER* = 000000400H;
    IME_CHOTKEY_IME_NONIME_TOGGLE* = 000000010H;
    IME_CHOTKEY_SHAPE_TOGGLE* = 000000011H;
    IME_CHOTKEY_SYMBOL_TOGGLE* = 000000012H;
    IME_JHOTKEY_CLOSE_OPEN* = 000000030H;
    IME_KHOTKEY_SHAPE_TOGGLE* = 000000050H;
    IME_KHOTKEY_HANJACONVERT* = 000000051H;
    IME_KHOTKEY_ENGLISH* = 000000052H;
    IME_THOTKEY_IME_NONIME_TOGGLE* = 000000070H;
    IME_THOTKEY_SHAPE_TOGGLE* = 000000071H;
    IME_THOTKEY_SYMBOL_TOGGLE* = 000000072H;
    IME_HOTKEY_DSWITCH_FIRST* = 000000100H;
    IME_HOTKEY_DSWITCH_LAST* = 00000011FH;
    IME_HOTKEY_PRIVATE_FIRST* = 000000200H;
    IME_ITHOTKEY_RESEND_RESULTSTR* = 000000200H;
    IME_ITHOTKEY_PREVIOUS_COMPOSITION* = 000000201H;
    IME_ITHOTKEY_UISTYLE_TOGGLE* = 000000202H;
    IME_ITHOTKEY_RECONVERTSTRING* = 000000203H;
    IME_HOTKEY_PRIVATE_LAST* = 00000021FH;
    GCS_COMPREADSTR* = 000000001H;
    GCS_COMPREADATTR* = 000000002H;
    GCS_COMPREADCLAUSE* = 000000004H;
    GCS_COMPSTR* = 000000008H;
    GCS_COMPATTR* = 000000010H;
    GCS_COMPCLAUSE* = 000000020H;
    GCS_CURSORPOS* = 000000080H;
    GCS_DELTASTART* = 000000100H;
    GCS_RESULTREADSTR* = 000000200H;
    GCS_RESULTREADCLAUSE* = 000000400H;
    GCS_RESULTSTR* = 000000800H;
    GCS_RESULTCLAUSE* = 000001000H;
    CS_INSERTCHAR* = 000002000H;
    CS_NOMOVECARET* = 000004000H;
    IMEVER_0310* = 00003000AH;
    IMEVER_0400* = 000040000H;
    IME_PROP_AT_CARET* = 000010000H;
    IME_PROP_SPECIAL_UI* = 000020000H;
    IME_PROP_CANDLIST_START_FROM_1* = 000040000H;
    IME_PROP_UNICODE* = 000080000H;
    IME_PROP_COMPLETE_ON_UNSELECT* = 000100000H;
    UI_CAP_2700* = 000000001H;
    UI_CAP_ROT90* = 000000002H;
    UI_CAP_ROTANY* = 000000004H;
    SCS_CAP_COMPSTR* = 000000001H;
    SCS_CAP_MAKEREAD* = 000000002H;
    SCS_CAP_SETRECONVERTSTRING* = 000000004H;
    SELECT_CAP_CONVERSION* = 000000001H;
    SELECT_CAP_SENTENCE* = 000000002H;
    GGL_LEVEL* = 000000001H;
    GGL_INDEX* = 000000002H;
    GGL_STRING* = 000000003H;
    GGL_PRIVATE* = 000000004H;
    GL_LEVEL_NOGUIDELINE* = 000000000H;
    GL_LEVEL_FATAL* = 000000001H;
    GL_LEVEL_ERROR* = 000000002H;
    GL_LEVEL_WARNING* = 000000003H;
    GL_LEVEL_INFORMATION* = 000000004H;
    GL_ID_UNKNOWN* = 000000000H;
    GL_ID_NOMODULE* = 000000001H;
    GL_ID_NODICTIONARY* = 000000010H;
    GL_ID_CANNOTSAVE* = 000000011H;
    GL_ID_NOCONVERT* = 000000020H;
    GL_ID_TYPINGERROR* = 000000021H;
    GL_ID_TOOMANYSTROKE* = 000000022H;
    GL_ID_READINGCONFLICT* = 000000023H;
    GL_ID_INPUTREADING* = 000000024H;
    GL_ID_INPUTRADICAL* = 000000025H;
    GL_ID_INPUTCODE* = 000000026H;
    GL_ID_INPUTSYMBOL* = 000000027H;
    GL_ID_CHOOSECANDIDATE* = 000000028H;
    GL_ID_REVERSECONVERSION* = 000000029H;
    GL_ID_PRIVATE_FIRST* = 000008000H;
    GL_ID_PRIVATE_LAST* = 00000FFFFH;
    IGP_GETIMEVERSION* = 0FFFFFFFCH;
    IGP_PROPERTY* = 000000004H;
    IGP_CONVERSION* = 000000008H;
    IGP_SENTENCE* = 00000000CH;
    IGP_UI* = 000000010H;
    IGP_SETCOMPSTR* = 000000014H;
    IGP_SELECT* = 000000018H;
    SCS_SETSTR* = 000000009H;
    SCS_CHANGEATTR* = 000000012H;
    SCS_CHANGECLAUSE* = 000000024H;
    SCS_SETRECONVERTSTRING* = 000010000H;
    SCS_QUERYRECONVERTSTRING* = 000020000H;
    ATTR_INPUT* = 000000000H;
    ATTR_TARGET_CONVERTED* = 000000001H;
    ATTR_CONVERTED* = 000000002H;
    ATTR_TARGET_NOTCONVERTED* = 000000003H;
    ATTR_INPUT_ERROR* = 000000004H;
    ATTR_FIXEDCONVERTED* = 000000005H;
    CFS_DEFAULT* = 000000000H;
    CFS_RECT* = 000000001H;
    CFS_POINT* = 000000002H;
    CFS_FORCE_POSITION* = 000000020H;
    CFS_CANDIDATEPOS* = 000000040H;
    CFS_EXCLUDE* = 000000080H;
    GCL_CONVERSION* = 000000001H;
    GCL_REVERSECONVERSION* = 000000002H;
    GCL_REVERSE_LENGTH* = 000000003H;
    IME_CMODE_ALPHANUMERIC* = 000000000H;
    IME_CMODE_NATIVE* = 000000001H;
    IME_CMODE_CHINESE* = 000000001H;
    IME_CMODE_HANGEUL* = 000000001H;
    IME_CMODE_HANGUL* = 000000001H;
    IME_CMODE_JAPANESE* = 000000001H;
    IME_CMODE_KATAKANA* = 000000002H;
    IME_CMODE_LANGUAGE* = 000000003H;
    IME_CMODE_FULLSHAPE* = 000000008H;
    IME_CMODE_ROMAN* = 000000010H;
    IME_CMODE_CHARCODE* = 000000020H;
    IME_CMODE_HANJACONVERT* = 000000040H;
    IME_CMODE_SOFTKBD* = 000000080H;
    IME_CMODE_NOCONVERSION* = 000000100H;
    IME_CMODE_EUDC* = 000000200H;
    IME_CMODE_SYMBOL* = 000000400H;
    IME_CMODE_FIXED* = 000000800H;
    IME_SMODE_NONE* = 000000000H;
    IME_SMODE_PLAURALCLAUSE* = 000000001H;
    IME_SMODE_SINGLECONVERT* = 000000002H;
    IME_SMODE_AUTOMATIC* = 000000004H;
    IME_SMODE_PHRASEPREDICT* = 000000008H;
    IME_SMODE_CONVERSATION* = 000000010H;
    IME_CAND_UNKNOWN* = 000000000H;
    IME_CAND_READ* = 000000001H;
    IME_CAND_CODE* = 000000002H;
    IME_CAND_MEANING* = 000000003H;
    IME_CAND_RADICAL* = 000000004H;
    IME_CAND_STROKE* = 000000005H;
    IMN_CLOSESTATUSWINDOW* = 000000001H;
    IMN_OPENSTATUSWINDOW* = 000000002H;
    IMN_CHANGECANDIDATE* = 000000003H;
    IMN_CLOSECANDIDATE* = 000000004H;
    IMN_OPENCANDIDATE* = 000000005H;
    IMN_SETCONVERSIONMODE* = 000000006H;
    IMN_SETSENTENCEMODE* = 000000007H;
    IMN_SETOPENSTATUS* = 000000008H;
    IMN_SETCANDIDATEPOS* = 000000009H;
    IMN_SETCOMPOSITIONFONT* = 00000000AH;
    IMN_SETCOMPOSITIONWINDOW* = 00000000BH;
    IMN_SETSTATUSWINDOWPOS* = 00000000CH;
    IMN_GUIDELINE* = 00000000DH;
    IMN_PRIVATE* = 00000000EH;
    IMM_ERROR_NODATA* = 0FFFFFFFFH;
    IMM_ERROR_GENERAL* = 0FFFFFFFEH;
    IME_CONFIG_GENERAL* = 000000001H;
    IME_CONFIG_REGISTERWORD* = 000000002H;
    IME_CONFIG_SELECTDICTIONARY* = 000000003H;
    IME_ESC_QUERY_SUPPORT* = 000000003H;
    IME_ESC_RESERVED_FIRST* = 000000004H;
    IME_ESC_RESERVED_LAST* = 0000007FFH;
    IME_ESC_PRIVATE_FIRST* = 000000800H;
    IME_ESC_PRIVATE_LAST* = 000000FFFH;
    IME_ESC_SEQUENCE_TO_INTERNAL* = 000001001H;
    IME_ESC_GET_EUDC_DICTIONARY* = 000001003H;
    IME_ESC_SET_EUDC_DICTIONARY* = 000001004H;
    IME_ESC_MAX_KEY* = 000001005H;
    IME_ESC_IME_NAME* = 000001006H;
    IME_ESC_SYNC_HOTKEY* = 000001007H;
    IME_ESC_HANJA_MODE* = 000001008H;
    IME_ESC_AUTOMATA* = 000001009H;
    IME_ESC_PRIVATE_HOTKEY* = 00000100AH;
    IME_ESC_GETHELPFILENAME* = 00000100BH;
    IME_REGWORD_STYLE_EUDC* = 000000001H;
    IME_REGWORD_STYLE_USER_FIRST* = 080000000H;
    IME_REGWORD_STYLE_USER_LAST* = 0FFFFFFFFH;
    SOFTKEYBOARD_TYPE_T1* = 000000001H;
    SOFTKEYBOARD_TYPE_C1* = 000000002H;
    MAXPNAMELEN* = 000000020H;
    MAXERRORLENGTH* = 000000100H;
    MAX_JOYSTICKOEMVXDNAME* = 000000104H;
    TIME_MS* = 000000001H;
    TIME_SAMPLES* = 000000002H;
    TIME_BYTES* = 000000004H;
    TIME_SMPTE* = 000000008H;
    TIME_MIDI* = 000000010H;
    TIME_TICKS* = 000000020H;
    MM_JOY1MOVE* = 0000003A0H;
    MM_JOY2MOVE* = 0000003A1H;
    MM_JOY1ZMOVE* = 0000003A2H;
    MM_JOY2ZMOVE* = 0000003A3H;
    MM_JOY1BUTTONDOWN* = 0000003B5H;
    MM_JOY2BUTTONDOWN* = 0000003B6H;
    MM_JOY1BUTTONUP* = 0000003B7H;
    MM_JOY2BUTTONUP* = 0000003B8H;
    MM_MCINOTIFY* = 0000003B9H;
    MM_WOM_OPEN* = 0000003BBH;
    MM_WOM_CLOSE* = 0000003BCH;
    MM_WOM_DONE* = 0000003BDH;
    MM_WIM_OPEN* = 0000003BEH;
    MM_WIM_CLOSE* = 0000003BFH;
    MM_WIM_DATA* = 0000003C0H;
    MM_MIM_OPEN* = 0000003C1H;
    MM_MIM_CLOSE* = 0000003C2H;
    MM_MIM_DATA* = 0000003C3H;
    MM_MIM_LONGDATA* = 0000003C4H;
    MM_MIM_ERROR* = 0000003C5H;
    MM_MIM_LONGERROR* = 0000003C6H;
    MM_MOM_OPEN* = 0000003C7H;
    MM_MOM_CLOSE* = 0000003C8H;
    MM_MOM_DONE* = 0000003C9H;
    MM_DRVM_OPEN* = 0000003D0H;
    MM_DRVM_CLOSE* = 0000003D1H;
    MM_DRVM_DATA* = 0000003D2H;
    MM_DRVM_ERROR* = 0000003D3H;
    MM_STREAM_OPEN* = 0000003D4H;
    MM_STREAM_CLOSE* = 0000003D5H;
    MM_STREAM_DONE* = 0000003D6H;
    MM_STREAM_ERROR* = 0000003D7H;
    MM_MOM_POSITIONCB* = 0000003CAH;
    MM_MCISIGNAL* = 0000003CBH;
    MM_MIM_MOREDATA* = 0000003CCH;
    MM_MIXM_LINE_CHANGE* = 0000003D0H;
    MM_MIXM_CONTROL_CHANGE* = 0000003D1H;
    MMSYSERR_BASE* = 000000000H;
    WAVERR_BASE* = 000000020H;
    MIDIERR_BASE* = 000000040H;
    TIMERR_BASE* = 000000060H;
    JOYERR_BASE* = 0000000A0H;
    MCIERR_BASE* = 000000100H;
    MIXERR_BASE* = 000000400H;
    MCI_STRING_OFFSET* = 000000200H;
    MCI_VD_OFFSET* = 000000400H;
    MCI_CD_OFFSET* = 000000440H;
    MCI_WAVE_OFFSET* = 000000480H;
    MCI_SEQ_OFFSET* = 0000004C0H;
    MMSYSERR_NOERROR* = 000000000H;
    MMSYSERR_ERROR* = 000000001H;
    MMSYSERR_BADDEVICEID* = 000000002H;
    MMSYSERR_NOTENABLED* = 000000003H;
    MMSYSERR_ALLOCATED* = 000000004H;
    MMSYSERR_INVALHANDLE* = 000000005H;
    MMSYSERR_NODRIVER* = 000000006H;
    MMSYSERR_NOMEM* = 000000007H;
    MMSYSERR_NOTSUPPORTED* = 000000008H;
    MMSYSERR_BADERRNUM* = 000000009H;
    MMSYSERR_INVALFLAG* = 00000000AH;
    MMSYSERR_INVALPARAM* = 00000000BH;
    MMSYSERR_HANDLEBUSY* = 00000000CH;
    MMSYSERR_INVALIDALIAS* = 00000000DH;
    MMSYSERR_BADDB* = 00000000EH;
    MMSYSERR_KEYNOTFOUND* = 00000000FH;
    MMSYSERR_READERROR* = 000000010H;
    MMSYSERR_WRITEERROR* = 000000011H;
    MMSYSERR_DELETEERROR* = 000000012H;
    MMSYSERR_VALNOTFOUND* = 000000013H;
    MMSYSERR_NODRIVERCB* = 000000014H;
    MMSYSERR_LASTERROR* = 000000014H;
    DRV_LOAD* = 000000001H;
    DRV_ENABLE* = 000000002H;
    DRV_OPEN* = 000000003H;
    DRV_CLOSE* = 000000004H;
    DRV_DISABLE* = 000000005H;
    DRV_FREE* = 000000006H;
    DRV_CONFIGURE* = 000000007H;
    DRV_QUERYCONFIGURE* = 000000008H;
    DRV_INSTALL* = 000000009H;
    DRV_REMOVE* = 00000000AH;
    DRV_EXITSESSION* = 00000000BH;
    DRV_POWER* = 00000000FH;
    DRV_RESERVED* = 000000800H;
    DRV_USER* = 000004000H;
    DRVCNF_CANCEL* = 000000000H;
    DRVCNF_OK* = 000000001H;
    DRVCNF_RESTART* = 000000002H;
    DRV_CANCEL* = 000000000H;
    DRV_OK* = 000000001H;
    DRV_RESTART* = 000000002H;
    DRV_MCI_FIRST* = 000000800H;
    DRV_MCI_LAST* = 0000017FFH;
    CALLBACK_TYPEMASK* = 000070000H;
    CALLBACK_NULL* = 000000000H;
    CALLBACK_WINDOW* = 000010000H;
    CALLBACK_TASK* = 000020000H;
    CALLBACK_FUNCTION* = 000030000H;
    CALLBACK_THREAD* = 000020000H;
    CALLBACK_EVENT* = 000050000H;
    SND_SYNC* = 000000000H;
    SND_ASYNC* = 000000001H;
    SND_NODEFAULT* = 000000002H;
    SND_MEMORY* = 000000004H;
    SND_LOOP* = 000000008H;
    SND_NOSTOP* = 000000010H;
    SND_NOWAIT* = 000002000H;
    SND_ALIAS* = 000010000H;
    SND_ALIAS_ID* = 000110000H;
    SND_FILENAME* = 000020000H;
    SND_RESOURCE* = 000040004H;
    SND_PURGE* = 000000040H;
    SND_APPLICATION* = 000000080H;
    SND_ALIAS_START* = 000000000H;
    SND_ALIAS_SYSTEMASTERISK* = 000002A53H;
    SND_ALIAS_SYSTEMQUESTION* = 000003F53H;
    SND_ALIAS_SYSTEMHAND* = 000004853H;
    SND_ALIAS_SYSTEMEXIT* = 000004553H;
    SND_ALIAS_SYSTEMSTART* = 000005353H;
    SND_ALIAS_SYSTEMWELCOME* = 000005753H;
    SND_ALIAS_SYSTEMEXCLAMATION* = 000002153H;
    SND_ALIAS_SYSTEMDEFAULT* = 000004453H;
    WAVERR_BADFORMAT* = 000000020H;
    WAVERR_STILLPLAYING* = 000000021H;
    WAVERR_UNPREPARED* = 000000022H;
    WAVERR_SYNC* = 000000023H;
    WAVERR_LASTERROR* = 000000023H;
    WOM_OPEN* = 0000003BBH;
    WOM_CLOSE* = 0000003BCH;
    WOM_DONE* = 0000003BDH;
    WIM_OPEN* = 0000003BEH;
    WIM_CLOSE* = 0000003BFH;
    WIM_DATA* = 0000003C0H;
    WAVE_MAPPER* = 0FFFFFFFFH;
    WAVE_FORMAT_QUERY* = 000000001H;
    WAVE_ALLOWSYNC* = 000000002H;
    WAVE_MAPPED* = 000000004H;
    WAVE_FORMAT_DIRECT* = 000000008H;
    WAVE_FORMAT_DIRECT_QUERY* = 000000009H;
    WHDR_DONE* = 000000001H;
    WHDR_PREPARED* = 000000002H;
    WHDR_BEGINLOOP* = 000000004H;
    WHDR_ENDLOOP* = 000000008H;
    WHDR_INQUEUE* = 000000010H;
    WAVECAPS_PITCH* = 000000001H;
    WAVECAPS_PLAYBACKRATE* = 000000002H;
    WAVECAPS_VOLUME* = 000000004H;
    WAVECAPS_LRVOLUME* = 000000008H;
    WAVECAPS_SYNC* = 000000010H;
    WAVECAPS_SAMPLEACCURATE* = 000000020H;
    WAVECAPS_DIRECTSOUND* = 000000040H;
    WAVE_INVALIDFORMAT* = 000000000H;
    WAVE_FORMAT_1M08* = 000000001H;
    WAVE_FORMAT_1S08* = 000000002H;
    WAVE_FORMAT_1M16* = 000000004H;
    WAVE_FORMAT_1S16* = 000000008H;
    WAVE_FORMAT_2M08* = 000000010H;
    WAVE_FORMAT_2S08* = 000000020H;
    WAVE_FORMAT_2M16* = 000000040H;
    WAVE_FORMAT_2S16* = 000000080H;
    WAVE_FORMAT_4M08* = 000000100H;
    WAVE_FORMAT_4S08* = 000000200H;
    WAVE_FORMAT_4M16* = 000000400H;
    WAVE_FORMAT_4S16* = 000000800H;
    WAVE_FORMAT_PCM* = 000000001H;
    MIDIERR_UNPREPARED* = 000000040H;
    MIDIERR_STILLPLAYING* = 000000041H;
    MIDIERR_NOMAP* = 000000042H;
    MIDIERR_NOTREADY* = 000000043H;
    MIDIERR_NODEVICE* = 000000044H;
    MIDIERR_INVALIDSETUP* = 000000045H;
    MIDIERR_BADOPENMODE* = 000000046H;
    MIDIERR_DONT_CONTINUE* = 000000047H;
    MIDIERR_LASTERROR* = 000000047H;
    MIDIPATCHSIZE* = 000000080H;
    MIM_OPEN* = 0000003C1H;
    MIM_CLOSE* = 0000003C2H;
    MIM_DATA* = 0000003C3H;
    MIM_LONGDATA* = 0000003C4H;
    MIM_ERROR* = 0000003C5H;
    MIM_LONGERROR* = 0000003C6H;
    MOM_OPEN* = 0000003C7H;
    MOM_CLOSE* = 0000003C8H;
    MOM_DONE* = 0000003C9H;
    MIM_MOREDATA* = 0000003CCH;
    MOM_POSITIONCB* = 0000003CAH;
    MIDIMAPPER* = 0FFFFFFFFH;
    MIDI_MAPPER* = 0FFFFFFFFH;
    MIDI_IO_STATUS* = 000000020H;
    MIDI_CACHE_ALL* = 000000001H;
    MIDI_CACHE_BESTFIT* = 000000002H;
    MIDI_CACHE_QUERY* = 000000003H;
    MIDI_UNCACHE* = 000000004H;
    MOD_MIDIPORT* = 000000001H;
    MOD_SYNTH* = 000000002H;
    MOD_SQSYNTH* = 000000003H;
    MOD_FMSYNTH* = 000000004H;
    MOD_MAPPER* = 000000005H;
    MIDICAPS_VOLUME* = 000000001H;
    MIDICAPS_LRVOLUME* = 000000002H;
    MIDICAPS_CACHE* = 000000004H;
    MIDICAPS_STREAM* = 000000008H;
    MHDR_DONE* = 000000001H;
    MHDR_PREPARED* = 000000002H;
    MHDR_INQUEUE* = 000000004H;
    MHDR_ISSTRM* = 000000008H;
    MEVT_F_SHORT* = 000000000H;
    MEVT_F_LONG* = 080000000H;
    MEVT_F_CALLBACK* = 040000000H;
    MEVT_SHORTMSG* = 000000000H;
    MEVT_TEMPO* = 000000001H;
    MEVT_NOP* = 000000002H;
    MEVT_LONGMSG* = 000000080H;
    MEVT_COMMENT* = 000000082H;
    MEVT_VERSION* = 000000084H;
    MIDISTRM_ERROR* = 0FFFFFFFEH;
    MIDIPROP_SET* = 080000000H;
    MIDIPROP_GET* = 040000000H;
    MIDIPROP_TIMEDIV* = 000000001H;
    MIDIPROP_TEMPO* = 000000002H;
    AUX_MAPPER* = 0FFFFFFFFH;
    AUXCAPS_CDAUDIO* = 000000001H;
    AUXCAPS_AUXIN* = 000000002H;
    AUXCAPS_VOLUME* = 000000001H;
    AUXCAPS_LRVOLUME* = 000000002H;
    MIXER_SHORT_NAME_CHARS* = 000000010H;
    MIXER_LONG_NAME_CHARS* = 000000040H;
    MIXERR_INVALLINE* = 000000400H;
    MIXERR_INVALCONTROL* = 000000401H;
    MIXERR_INVALVALUE* = 000000402H;
    MIXERR_LASTERROR* = 000000402H;
    MIXER_OBJECTF_HANDLE* = 080000000H;
    MIXER_OBJECTF_MIXER* = 000000000H;
    MIXER_OBJECTF_HMIXER* = 080000000H;
    MIXER_OBJECTF_WAVEOUT* = 010000000H;
    MIXER_OBJECTF_HWAVEOUT* = 090000000H;
    MIXER_OBJECTF_WAVEIN* = 020000000H;
    MIXER_OBJECTF_HWAVEIN* = 0A0000000H;
    MIXER_OBJECTF_MIDIOUT* = 030000000H;
    MIXER_OBJECTF_HMIDIOUT* = 0B0000000H;
    MIXER_OBJECTF_MIDIIN* = 040000000H;
    MIXER_OBJECTF_HMIDIIN* = 0C0000000H;
    MIXER_OBJECTF_AUX* = 050000000H;
    MIXERLINE_LINEF_ACTIVE* = 000000001H;
    MIXERLINE_LINEF_DISCONNECTED* = 000008000H;
    MIXERLINE_LINEF_SOURCE* = 080000000H;
    MIXERLINE_COMPONENTTYPE_DST_FIRST* = 000000000H;
    MIXERLINE_COMPONENTTYPE_DST_UNDEFINED* = 000000000H;
    MIXERLINE_COMPONENTTYPE_DST_DIGITAL* = 000000001H;
    MIXERLINE_COMPONENTTYPE_DST_LINE* = 000000002H;
    MIXERLINE_COMPONENTTYPE_DST_MONITOR* = 000000003H;
    MIXERLINE_COMPONENTTYPE_DST_SPEAKERS* = 000000004H;
    MIXERLINE_COMPONENTTYPE_DST_HEADPHONES* = 000000005H;
    MIXERLINE_COMPONENTTYPE_DST_TELEPHONE* = 000000006H;
    MIXERLINE_COMPONENTTYPE_DST_WAVEIN* = 000000007H;
    MIXERLINE_COMPONENTTYPE_DST_VOICEIN* = 000000008H;
    MIXERLINE_COMPONENTTYPE_DST_LAST* = 000000008H;
    MIXERLINE_COMPONENTTYPE_SRC_FIRST* = 000001000H;
    MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED* = 000001000H;
    MIXERLINE_COMPONENTTYPE_SRC_DIGITAL* = 000001001H;
    MIXERLINE_COMPONENTTYPE_SRC_LINE* = 000001002H;
    MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE* = 000001003H;
    MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER* = 000001004H;
    MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC* = 000001005H;
    MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE* = 000001006H;
    MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER* = 000001007H;
    MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT* = 000001008H;
    MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY* = 000001009H;
    MIXERLINE_COMPONENTTYPE_SRC_ANALOG* = 00000100AH;
    MIXERLINE_COMPONENTTYPE_SRC_LAST* = 00000100AH;
    MIXERLINE_TARGETTYPE_UNDEFINED* = 000000000H;
    MIXERLINE_TARGETTYPE_WAVEOUT* = 000000001H;
    MIXERLINE_TARGETTYPE_WAVEIN* = 000000002H;
    MIXERLINE_TARGETTYPE_MIDIOUT* = 000000003H;
    MIXERLINE_TARGETTYPE_MIDIIN* = 000000004H;
    MIXERLINE_TARGETTYPE_AUX* = 000000005H;
    MIXER_GETLINEINFOF_DESTINATION* = 000000000H;
    MIXER_GETLINEINFOF_SOURCE* = 000000001H;
    MIXER_GETLINEINFOF_LINEID* = 000000002H;
    MIXER_GETLINEINFOF_COMPONENTTYPE* = 000000003H;
    MIXER_GETLINEINFOF_TARGETTYPE* = 000000004H;
    MIXER_GETLINEINFOF_QUERYMASK* = 00000000FH;
    MIXERCONTROL_CONTROLF_UNIFORM* = 000000001H;
    MIXERCONTROL_CONTROLF_MULTIPLE* = 000000002H;
    MIXERCONTROL_CONTROLF_DISABLED* = 080000000H;
    MIXERCONTROL_CT_CLASS_MASK* = 0F0000000H;
    MIXERCONTROL_CT_CLASS_CUSTOM* = 000000000H;
    MIXERCONTROL_CT_CLASS_METER* = 010000000H;
    MIXERCONTROL_CT_CLASS_SWITCH* = 020000000H;
    MIXERCONTROL_CT_CLASS_NUMBER* = 030000000H;
    MIXERCONTROL_CT_CLASS_SLIDER* = 040000000H;
    MIXERCONTROL_CT_CLASS_FADER* = 050000000H;
    MIXERCONTROL_CT_CLASS_TIME* = 060000000H;
    MIXERCONTROL_CT_CLASS_LIST* = 070000000H;
    MIXERCONTROL_CT_SUBCLASS_MASK* = 00F000000H;
    MIXERCONTROL_CT_SC_SWITCH_BOOLEAN* = 000000000H;
    MIXERCONTROL_CT_SC_SWITCH_BUTTON* = 001000000H;
    MIXERCONTROL_CT_SC_METER_POLLED* = 000000000H;
    MIXERCONTROL_CT_SC_TIME_MICROSECS* = 000000000H;
    MIXERCONTROL_CT_SC_TIME_MILLISECS* = 001000000H;
    MIXERCONTROL_CT_SC_LIST_SINGLE* = 000000000H;
    MIXERCONTROL_CT_SC_LIST_MULTIPLE* = 001000000H;
    MIXERCONTROL_CT_UNITS_MASK* = 000FF0000H;
    MIXERCONTROL_CT_UNITS_CUSTOM* = 000000000H;
    MIXERCONTROL_CT_UNITS_BOOLEAN* = 000010000H;
    MIXERCONTROL_CT_UNITS_SIGNED* = 000020000H;
    MIXERCONTROL_CT_UNITS_UNSIGNED* = 000030000H;
    MIXERCONTROL_CT_UNITS_DECIBELS* = 000040000H;
    MIXERCONTROL_CT_UNITS_PERCENT* = 000050000H;
    MIXERCONTROL_CONTROLTYPE_CUSTOM* = 000000000H;
    MIXERCONTROL_CONTROLTYPE_BOOLEANMETER* = 010010000H;
    MIXERCONTROL_CONTROLTYPE_SIGNEDMETER* = 010020000H;
    MIXERCONTROL_CONTROLTYPE_PEAKMETER* = 010020001H;
    MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER* = 010030000H;
    MIXERCONTROL_CONTROLTYPE_BOOLEAN* = 020010000H;
    MIXERCONTROL_CONTROLTYPE_ONOFF* = 020010001H;
    MIXERCONTROL_CONTROLTYPE_MUTE* = 020010002H;
    MIXERCONTROL_CONTROLTYPE_MONO* = 020010003H;
    MIXERCONTROL_CONTROLTYPE_LOUDNESS* = 020010004H;
    MIXERCONTROL_CONTROLTYPE_STEREOENH* = 020010005H;
    MIXERCONTROL_CONTROLTYPE_BUTTON* = 021010000H;
    MIXERCONTROL_CONTROLTYPE_DECIBELS* = 030040000H;
    MIXERCONTROL_CONTROLTYPE_SIGNED* = 030020000H;
    MIXERCONTROL_CONTROLTYPE_UNSIGNED* = 030030000H;
    MIXERCONTROL_CONTROLTYPE_PERCENT* = 030050000H;
    MIXERCONTROL_CONTROLTYPE_SLIDER* = 040020000H;
    MIXERCONTROL_CONTROLTYPE_PAN* = 040020001H;
    MIXERCONTROL_CONTROLTYPE_QSOUNDPAN* = 040020002H;
    MIXERCONTROL_CONTROLTYPE_FADER* = 050030000H;
    MIXERCONTROL_CONTROLTYPE_VOLUME* = 050030001H;
    MIXERCONTROL_CONTROLTYPE_BASS* = 050030002H;
    MIXERCONTROL_CONTROLTYPE_TREBLE* = 050030003H;
    MIXERCONTROL_CONTROLTYPE_EQUALIZER* = 050030004H;
    MIXERCONTROL_CONTROLTYPE_SINGLESELECT* = 070010000H;
    MIXERCONTROL_CONTROLTYPE_MUX* = 070010001H;
    MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT* = 071010000H;
    MIXERCONTROL_CONTROLTYPE_MIXER* = 071010001H;
    MIXERCONTROL_CONTROLTYPE_MICROTIME* = 060030000H;
    MIXERCONTROL_CONTROLTYPE_MILLITIME* = 061030000H;
    MIXER_GETLINECONTROLSF_ALL* = 000000000H;
    MIXER_GETLINECONTROLSF_ONEBYID* = 000000001H;
    MIXER_GETLINECONTROLSF_ONEBYTYPE* = 000000002H;
    MIXER_GETLINECONTROLSF_QUERYMASK* = 00000000FH;
    MIXER_GETCONTROLDETAILSF_VALUE* = 000000000H;
    MIXER_GETCONTROLDETAILSF_LISTTEXT* = 000000001H;
    MIXER_GETCONTROLDETAILSF_QUERYMASK* = 00000000FH;
    MIXER_SETCONTROLDETAILSF_VALUE* = 000000000H;
    MIXER_SETCONTROLDETAILSF_CUSTOM* = 000000001H;
    MIXER_SETCONTROLDETAILSF_QUERYMASK* = 00000000FH;
    TIMERR_NOERROR* = 000000000H;
    TIMERR_NOCANDO* = 000000061H;
    TIMERR_STRUCT* = 000000081H;
    TIME_ONESHOT* = 000000000H;
    TIME_PERIODIC* = 000000001H;
    TIME_CALLBACK_FUNCTION* = 000000000H;
    TIME_CALLBACK_EVENT_SET* = 000000010H;
    TIME_CALLBACK_EVENT_PULSE* = 000000020H;
    JOYERR_NOERROR* = 000000000H;
    JOYERR_PARMS* = 0000000A5H;
    JOYERR_NOCANDO* = 0000000A6H;
    JOYERR_UNPLUGGED* = 0000000A7H;
    JOY_BUTTON1* = 000000001H;
    JOY_BUTTON2* = 000000002H;
    JOY_BUTTON3* = 000000004H;
    JOY_BUTTON4* = 000000008H;
    JOY_BUTTON1CHG* = 000000100H;
    JOY_BUTTON2CHG* = 000000200H;
    JOY_BUTTON3CHG* = 000000400H;
    JOY_BUTTON4CHG* = 000000800H;
    JOY_BUTTON5* = 000000010H;
    JOY_BUTTON6* = 000000020H;
    JOY_BUTTON7* = 000000040H;
    JOY_BUTTON8* = 000000080H;
    JOY_BUTTON9* = 000000100H;
    JOY_BUTTON10* = 000000200H;
    JOY_BUTTON11* = 000000400H;
    JOY_BUTTON12* = 000000800H;
    JOY_BUTTON13* = 000001000H;
    JOY_BUTTON14* = 000002000H;
    JOY_BUTTON15* = 000004000H;
    JOY_BUTTON16* = 000008000H;
    JOY_BUTTON17* = 000010000H;
    JOY_BUTTON18* = 000020000H;
    JOY_BUTTON19* = 000040000H;
    JOY_BUTTON20* = 000080000H;
    JOY_BUTTON21* = 000100000H;
    JOY_BUTTON22* = 000200000H;
    JOY_BUTTON23* = 000400000H;
    JOY_BUTTON24* = 000800000H;
    JOY_BUTTON25* = 001000000H;
    JOY_BUTTON26* = 002000000H;
    JOY_BUTTON27* = 004000000H;
    JOY_BUTTON28* = 008000000H;
    JOY_BUTTON29* = 010000000H;
    JOY_BUTTON30* = 020000000H;
    JOY_BUTTON31* = 040000000H;
    JOY_BUTTON32* = 080000000H;
    JOY_POVCENTERED* = 0FFFFFFFFH;
    JOY_POVFORWARD* = 000000000H;
    JOY_POVRIGHT* = 000002328H;
    JOY_POVBACKWARD* = 000004650H;
    JOY_POVLEFT* = 000006978H;
    JOY_RETURNX* = 000000001H;
    JOY_RETURNY* = 000000002H;
    JOY_RETURNZ* = 000000004H;
    JOY_RETURNR* = 000000008H;
    JOY_RETURNU* = 000000010H;
    JOY_RETURNV* = 000000020H;
    JOY_RETURNPOV* = 000000040H;
    JOY_RETURNBUTTONS* = 000000080H;
    JOY_RETURNRAWDATA* = 000000100H;
    JOY_RETURNPOVCTS* = 000000200H;
    JOY_RETURNCENTERED* = 000000400H;
    JOY_USEDEADZONE* = 000000800H;
    JOY_RETURNALL* = 0000000FFH;
    JOY_CAL_READALWAYS* = 000010000H;
    JOY_CAL_READXYONLY* = 000020000H;
    JOY_CAL_READ3* = 000040000H;
    JOY_CAL_READ4* = 000080000H;
    JOY_CAL_READXONLY* = 000100000H;
    JOY_CAL_READYONLY* = 000200000H;
    JOY_CAL_READ5* = 000400000H;
    JOY_CAL_READ6* = 000800000H;
    JOY_CAL_READZONLY* = 001000000H;
    JOY_CAL_READRONLY* = 002000000H;
    JOY_CAL_READUONLY* = 004000000H;
    JOY_CAL_READVONLY* = 008000000H;
    JOYSTICKID1* = 000000000H;
    JOYSTICKID2* = 000000001H;
    JOYCAPS_HASZ* = 000000001H;
    JOYCAPS_HASR* = 000000002H;
    JOYCAPS_HASU* = 000000004H;
    JOYCAPS_HASV* = 000000008H;
    JOYCAPS_HASPOV* = 000000010H;
    JOYCAPS_POV4DIR* = 000000020H;
    JOYCAPS_POVCTS* = 000000040H;
    MMIOERR_BASE* = 000000100H;
    MMIOERR_FILENOTFOUND* = 000000101H;
    MMIOERR_OUTOFMEMORY* = 000000102H;
    MMIOERR_CANNOTOPEN* = 000000103H;
    MMIOERR_CANNOTCLOSE* = 000000104H;
    MMIOERR_CANNOTREAD* = 000000105H;
    MMIOERR_CANNOTWRITE* = 000000106H;
    MMIOERR_CANNOTSEEK* = 000000107H;
    MMIOERR_CANNOTEXPAND* = 000000108H;
    MMIOERR_CHUNKNOTFOUND* = 000000109H;
    MMIOERR_UNBUFFERED* = 00000010AH;
    MMIOERR_PATHNOTFOUND* = 00000010BH;
    MMIOERR_ACCESSDENIED* = 00000010CH;
    MMIOERR_SHARINGVIOLATION* = 00000010DH;
    MMIOERR_NETWORKERROR* = 00000010EH;
    MMIOERR_TOOMANYOPENFILES* = 00000010FH;
    MMIOERR_INVALIDFILE* = 000000110H;
    CFSEPCHAR* = 00000002BH;
    MMIO_RWMODE* = 000000003H;
    MMIO_SHAREMODE* = 000000070H;
    MMIO_CREATE* = 000001000H;
    MMIO_PARSE* = 000000100H;
    MMIO_DELETE* = 000000200H;
    MMIO_EXIST* = 000004000H;
    MMIO_ALLOCBUF* = 000010000H;
    MMIO_GETTEMP* = 000020000H;
    MMIO_DIRTY* = 010000000H;
    MMIO_READ* = 000000000H;
    MMIO_WRITE* = 000000001H;
    MMIO_READWRITE* = 000000002H;
    MMIO_COMPAT* = 000000000H;
    MMIO_EXCLUSIVE* = 000000010H;
    MMIO_DENYWRITE* = 000000020H;
    MMIO_DENYREAD* = 000000030H;
    MMIO_DENYNONE* = 000000040H;
    MMIO_FHOPEN* = 000000010H;
    MMIO_EMPTYBUF* = 000000010H;
    MMIO_TOUPPER* = 000000010H;
    MMIO_INSTALLPROC* = 000010000H;
    MMIO_GLOBALPROC* = 010000000H;
    MMIO_REMOVEPROC* = 000020000H;
    MMIO_UNICODEPROC* = 001000000H;
    MMIO_FINDPROC* = 000040000H;
    MMIO_FINDCHUNK* = 000000010H;
    MMIO_FINDRIFF* = 000000020H;
    MMIO_FINDLIST* = 000000040H;
    MMIO_CREATERIFF* = 000000020H;
    MMIO_CREATELIST* = 000000040H;
    MMIOM_READ* = 000000000H;
    MMIOM_WRITE* = 000000001H;
    MMIOM_SEEK* = 000000002H;
    MMIOM_OPEN* = 000000003H;
    MMIOM_CLOSE* = 000000004H;
    MMIOM_WRITEFLUSH* = 000000005H;
    MMIOM_RENAME* = 000000006H;
    MMIOM_USER* = 000008000H;
    FOURCC_RIFF* = 046464952H;
    FOURCC_LIST* = 05453494CH;
    FOURCC_DOS* = 020534F44H;
    FOURCC_MEM* = 0204D454DH;
    SEEK_SET* = 000000000H;
    SEEK_CUR* = 000000001H;
    SEEK_END* = 000000002H;
    MMIO_DEFAULTBUFFER* = 000002000H;
    MCIERR_INVALID_DEVICE_ID* = 000000101H;
    MCIERR_UNRECOGNIZED_KEYWORD* = 000000103H;
    MCIERR_UNRECOGNIZED_COMMAND* = 000000105H;
    MCIERR_HARDWARE* = 000000106H;
    MCIERR_INVALID_DEVICE_NAME* = 000000107H;
    MCIERR_OUT_OF_MEMORY* = 000000108H;
    MCIERR_DEVICE_OPEN* = 000000109H;
    MCIERR_CANNOT_LOAD_DRIVER* = 00000010AH;
    MCIERR_MISSING_COMMAND_STRING* = 00000010BH;
    MCIERR_PARAM_OVERFLOW* = 00000010CH;
    MCIERR_MISSING_STRING_ARGUMENT* = 00000010DH;
    MCIERR_BAD_INTEGER* = 00000010EH;
    MCIERR_PARSER_INTERNAL* = 00000010FH;
    MCIERR_DRIVER_INTERNAL* = 000000110H;
    MCIERR_MISSING_PARAMETER* = 000000111H;
    MCIERR_UNSUPPORTED_FUNCTION* = 000000112H;
    MCIERR_FILE_NOT_FOUND* = 000000113H;
    MCIERR_DEVICE_NOT_READY* = 000000114H;
    MCIERR_INTERNAL* = 000000115H;
    MCIERR_DRIVER* = 000000116H;
    MCIERR_CANNOT_USE_ALL* = 000000117H;
    MCIERR_MULTIPLE* = 000000118H;
    MCIERR_EXTENSION_NOT_FOUND* = 000000119H;
    MCIERR_OUTOFRANGE* = 00000011AH;
    MCIERR_FLAGS_NOT_COMPATIBLE* = 00000011CH;
    MCIERR_FILE_NOT_SAVED* = 00000011EH;
    MCIERR_DEVICE_TYPE_REQUIRED* = 00000011FH;
    MCIERR_DEVICE_LOCKED* = 000000120H;
    MCIERR_DUPLICATE_ALIAS* = 000000121H;
    MCIERR_BAD_CONSTANT* = 000000122H;
    MCIERR_MUST_USE_SHAREABLE* = 000000123H;
    MCIERR_MISSING_DEVICE_NAME* = 000000124H;
    MCIERR_BAD_TIME_FORMAT* = 000000125H;
    MCIERR_NO_CLOSING_QUOTE* = 000000126H;
    MCIERR_DUPLICATE_FLAGS* = 000000127H;
    MCIERR_INVALID_FILE* = 000000128H;
    MCIERR_NULL_PARAMETER_BLOCK* = 000000129H;
    MCIERR_UNNAMED_RESOURCE* = 00000012AH;
    MCIERR_NEW_REQUIRES_ALIAS* = 00000012BH;
    MCIERR_NOTIFY_ON_AUTO_OPEN* = 00000012CH;
    MCIERR_NO_ELEMENT_ALLOWED* = 00000012DH;
    MCIERR_NONAPPLICABLE_FUNCTION* = 00000012EH;
    MCIERR_ILLEGAL_FOR_AUTO_OPEN* = 00000012FH;
    MCIERR_FILENAME_REQUIRED* = 000000130H;
    MCIERR_EXTRA_CHARACTERS* = 000000131H;
    MCIERR_DEVICE_NOT_INSTALLED* = 000000132H;
    MCIERR_GET_CD* = 000000133H;
    MCIERR_SET_CD* = 000000134H;
    MCIERR_SET_DRIVE* = 000000135H;
    MCIERR_DEVICE_LENGTH* = 000000136H;
    MCIERR_DEVICE_ORD_LENGTH* = 000000137H;
    MCIERR_NO_INTEGER* = 000000138H;
    MCIERR_WAVE_OUTPUTSINUSE* = 000000140H;
    MCIERR_WAVE_SETOUTPUTINUSE* = 000000141H;
    MCIERR_WAVE_INPUTSINUSE* = 000000142H;
    MCIERR_WAVE_SETINPUTINUSE* = 000000143H;
    MCIERR_WAVE_OUTPUTUNSPECIFIED* = 000000144H;
    MCIERR_WAVE_INPUTUNSPECIFIED* = 000000145H;
    MCIERR_WAVE_OUTPUTSUNSUITABLE* = 000000146H;
    MCIERR_WAVE_SETOUTPUTUNSUITABLE* = 000000147H;
    MCIERR_WAVE_INPUTSUNSUITABLE* = 000000148H;
    MCIERR_WAVE_SETINPUTUNSUITABLE* = 000000149H;
    MCIERR_SEQ_DIV_INCOMPATIBLE* = 000000150H;
    MCIERR_SEQ_PORT_INUSE* = 000000151H;
    MCIERR_SEQ_PORT_NONEXISTENT* = 000000152H;
    MCIERR_SEQ_PORT_MAPNODEVICE* = 000000153H;
    MCIERR_SEQ_PORT_MISCERROR* = 000000154H;
    MCIERR_SEQ_TIMER* = 000000155H;
    MCIERR_SEQ_PORTUNSPECIFIED* = 000000156H;
    MCIERR_SEQ_NOMIDIPRESENT* = 000000157H;
    MCIERR_NO_WINDOW* = 00000015AH;
    MCIERR_CREATEWINDOW* = 00000015BH;
    MCIERR_FILE_READ* = 00000015CH;
    MCIERR_FILE_WRITE* = 00000015DH;
    MCIERR_NO_IDENTITY* = 00000015EH;
    MCIERR_CUSTOM_DRIVER_BASE* = 000000200H;
    MCI_FIRST* = 000000800H;
    MCI_OPEN* = 000000803H;
    MCI_CLOSE* = 000000804H;
    MCI_ESCAPE* = 000000805H;
    MCI_PLAY* = 000000806H;
    MCI_SEEK* = 000000807H;
    MCI_STOP* = 000000808H;
    MCI_PAUSE* = 000000809H;
    MCI_INFO* = 00000080AH;
    MCI_GETDEVCAPS* = 00000080BH;
    MCI_SPIN* = 00000080CH;
    MCI_SET* = 00000080DH;
    MCI_STEP* = 00000080EH;
    MCI_RECORD* = 00000080FH;
    MCI_SYSINFO* = 000000810H;
    MCI_BREAK* = 000000811H;
    MCI_SAVE* = 000000813H;
    MCI_STATUS* = 000000814H;
    MCI_CUE* = 000000830H;
    MCI_REALIZE* = 000000840H;
    MCI_WINDOW* = 000000841H;
    MCI_PUT* = 000000842H;
    MCI_WHERE* = 000000843H;
    MCI_FREEZE* = 000000844H;
    MCI_UNFREEZE* = 000000845H;
    MCI_LOAD* = 000000850H;
    MCI_CUT* = 000000851H;
    MCI_COPY* = 000000852H;
    MCI_PASTE* = 000000853H;
    MCI_UPDATE* = 000000854H;
    MCI_RESUME* = 000000855H;
    MCI_DELETE* = 000000856H;
    MCI_USER_MESSAGES* = 000000C00H;
    MCI_LAST* = 000000FFFH;
    MCI_ALL_DEVICE_ID* = 0FFFFFFFFH;
    MCI_DEVTYPE_VCR* = 000000201H;
    MCI_DEVTYPE_VIDEODISC* = 000000202H;
    MCI_DEVTYPE_OVERLAY* = 000000203H;
    MCI_DEVTYPE_CD_AUDIO* = 000000204H;
    MCI_DEVTYPE_DAT* = 000000205H;
    MCI_DEVTYPE_SCANNER* = 000000206H;
    MCI_DEVTYPE_ANIMATION* = 000000207H;
    MCI_DEVTYPE_DIGITAL_VIDEO* = 000000208H;
    MCI_DEVTYPE_OTHER* = 000000209H;
    MCI_DEVTYPE_WAVEFORM_AUDIO* = 00000020AH;
    MCI_DEVTYPE_SEQUENCER* = 00000020BH;
    MCI_DEVTYPE_FIRST* = 000000201H;
    MCI_DEVTYPE_LAST* = 00000020BH;
    MCI_DEVTYPE_FIRST_USER* = 000001000H;
    MCI_MODE_NOT_READY* = 00000020CH;
    MCI_MODE_STOP* = 00000020DH;
    MCI_MODE_PLAY* = 00000020EH;
    MCI_MODE_RECORD* = 00000020FH;
    MCI_MODE_SEEK* = 000000210H;
    MCI_MODE_PAUSE* = 000000211H;
    MCI_MODE_OPEN* = 000000212H;
    MCI_FORMAT_MILLISECONDS* = 000000000H;
    MCI_FORMAT_HMS* = 000000001H;
    MCI_FORMAT_MSF* = 000000002H;
    MCI_FORMAT_FRAMES* = 000000003H;
    MCI_FORMAT_SMPTE_24* = 000000004H;
    MCI_FORMAT_SMPTE_25* = 000000005H;
    MCI_FORMAT_SMPTE_30* = 000000006H;
    MCI_FORMAT_SMPTE_30DROP* = 000000007H;
    MCI_FORMAT_BYTES* = 000000008H;
    MCI_FORMAT_SAMPLES* = 000000009H;
    MCI_FORMAT_TMSF* = 00000000AH;
    MCI_NOTIFY_SUCCESSFUL* = 000000001H;
    MCI_NOTIFY_SUPERSEDED* = 000000002H;
    MCI_NOTIFY_ABORTED* = 000000004H;
    MCI_NOTIFY_FAILURE* = 000000008H;
    MCI_NOTIFY* = 000000001H;
    MCI_WAIT* = 000000002H;
    MCI_FROM* = 000000004H;
    MCI_TO* = 000000008H;
    MCI_TRACK* = 000000010H;
    MCI_OPEN_SHAREABLE* = 000000100H;
    MCI_OPEN_ELEMENT* = 000000200H;
    MCI_OPEN_ALIAS* = 000000400H;
    MCI_OPEN_ELEMENT_ID* = 000000800H;
    MCI_OPEN_TYPE_ID* = 000001000H;
    MCI_OPEN_TYPE* = 000002000H;
    MCI_SEEK_TO_START* = 000000100H;
    MCI_SEEK_TO_END* = 000000200H;
    MCI_STATUS_ITEM* = 000000100H;
    MCI_STATUS_START* = 000000200H;
    MCI_STATUS_LENGTH* = 000000001H;
    MCI_STATUS_POSITION* = 000000002H;
    MCI_STATUS_NUMBER_OF_TRACKS* = 000000003H;
    MCI_STATUS_MODE* = 000000004H;
    MCI_STATUS_MEDIA_PRESENT* = 000000005H;
    MCI_STATUS_TIME_FORMAT* = 000000006H;
    MCI_STATUS_READY* = 000000007H;
    MCI_STATUS_CURRENT_TRACK* = 000000008H;
    MCI_INFO_PRODUCT* = 000000100H;
    MCI_INFO_FILE* = 000000200H;
    MCI_INFO_MEDIA_UPC* = 000000400H;
    MCI_INFO_MEDIA_IDENTITY* = 000000800H;
    MCI_INFO_NAME* = 000001000H;
    MCI_INFO_COPYRIGHT* = 000002000H;
    MCI_GETDEVCAPS_ITEM* = 000000100H;
    MCI_GETDEVCAPS_CAN_RECORD* = 000000001H;
    MCI_GETDEVCAPS_HAS_AUDIO* = 000000002H;
    MCI_GETDEVCAPS_HAS_VIDEO* = 000000003H;
    MCI_GETDEVCAPS_DEVICE_TYPE* = 000000004H;
    MCI_GETDEVCAPS_USES_FILES* = 000000005H;
    MCI_GETDEVCAPS_COMPOUND_DEVICE* = 000000006H;
    MCI_GETDEVCAPS_CAN_EJECT* = 000000007H;
    MCI_GETDEVCAPS_CAN_PLAY* = 000000008H;
    MCI_GETDEVCAPS_CAN_SAVE* = 000000009H;
    MCI_SYSINFO_QUANTITY* = 000000100H;
    MCI_SYSINFO_OPEN* = 000000200H;
    MCI_SYSINFO_NAME* = 000000400H;
    MCI_SYSINFO_INSTALLNAME* = 000000800H;
    MCI_SET_DOOR_OPEN* = 000000100H;
    MCI_SET_DOOR_CLOSED* = 000000200H;
    MCI_SET_TIME_FORMAT* = 000000400H;
    MCI_SET_AUDIO* = 000000800H;
    MCI_SET_VIDEO* = 000001000H;
    MCI_SET_ON* = 000002000H;
    MCI_SET_OFF* = 000004000H;
    MCI_SET_AUDIO_ALL* = 000000000H;
    MCI_SET_AUDIO_LEFT* = 000000001H;
    MCI_SET_AUDIO_RIGHT* = 000000002H;
    MCI_BREAK_KEY* = 000000100H;
    MCI_BREAK_HWND* = 000000200H;
    MCI_BREAK_OFF* = 000000400H;
    MCI_RECORD_INSERT* = 000000100H;
    MCI_RECORD_OVERWRITE* = 000000200H;
    MCI_SAVE_FILE* = 000000100H;
    MCI_LOAD_FILE* = 000000100H;
    MCI_VD_MODE_PARK* = 000000401H;
    MCI_VD_MEDIA_CLV* = 000000402H;
    MCI_VD_MEDIA_CAV* = 000000403H;
    MCI_VD_MEDIA_OTHER* = 000000404H;
    MCI_VD_FORMAT_TRACK* = 000004001H;
    MCI_VD_PLAY_REVERSE* = 000010000H;
    MCI_VD_PLAY_FAST* = 000020000H;
    MCI_VD_PLAY_SPEED* = 000040000H;
    MCI_VD_PLAY_SCAN* = 000080000H;
    MCI_VD_PLAY_SLOW* = 000100000H;
    MCI_VD_SEEK_REVERSE* = 000010000H;
    MCI_VD_STATUS_SPEED* = 000004002H;
    MCI_VD_STATUS_FORWARD* = 000004003H;
    MCI_VD_STATUS_MEDIA_TYPE* = 000004004H;
    MCI_VD_STATUS_SIDE* = 000004005H;
    MCI_VD_STATUS_DISC_SIZE* = 000004006H;
    MCI_VD_GETDEVCAPS_CLV* = 000010000H;
    MCI_VD_GETDEVCAPS_CAV* = 000020000H;
    MCI_VD_SPIN_UP* = 000010000H;
    MCI_VD_SPIN_DOWN* = 000020000H;
    MCI_VD_GETDEVCAPS_CAN_REVERSE* = 000004002H;
    MCI_VD_GETDEVCAPS_FAST_RATE* = 000004003H;
    MCI_VD_GETDEVCAPS_SLOW_RATE* = 000004004H;
    MCI_VD_GETDEVCAPS_NORMAL_RATE* = 000004005H;
    MCI_VD_STEP_FRAMES* = 000010000H;
    MCI_VD_STEP_REVERSE* = 000020000H;
    MCI_VD_ESCAPE_STRING* = 000000100H;
    MCI_CDA_STATUS_TYPE_TRACK* = 000004001H;
    MCI_CDA_TRACK_AUDIO* = 000000440H;
    MCI_CDA_TRACK_OTHER* = 000000441H;
    MCI_WAVE_PCM* = 000000480H;
    MCI_WAVE_MAPPER* = 000000481H;
    MCI_WAVE_OPEN_BUFFER* = 000010000H;
    MCI_WAVE_SET_FORMATTAG* = 000010000H;
    MCI_WAVE_SET_CHANNELS* = 000020000H;
    MCI_WAVE_SET_SAMPLESPERSEC* = 000040000H;
    MCI_WAVE_SET_AVGBYTESPERSEC* = 000080000H;
    MCI_WAVE_SET_BLOCKALIGN* = 000100000H;
    MCI_WAVE_SET_BITSPERSAMPLE* = 000200000H;
    MCI_WAVE_INPUT* = 000400000H;
    MCI_WAVE_OUTPUT* = 000800000H;
    MCI_WAVE_STATUS_FORMATTAG* = 000004001H;
    MCI_WAVE_STATUS_CHANNELS* = 000004002H;
    MCI_WAVE_STATUS_SAMPLESPERSEC* = 000004003H;
    MCI_WAVE_STATUS_AVGBYTESPERSEC* = 000004004H;
    MCI_WAVE_STATUS_BLOCKALIGN* = 000004005H;
    MCI_WAVE_STATUS_BITSPERSAMPLE* = 000004006H;
    MCI_WAVE_STATUS_LEVEL* = 000004007H;
    MCI_WAVE_SET_ANYINPUT* = 004000000H;
    MCI_WAVE_SET_ANYOUTPUT* = 008000000H;
    MCI_WAVE_GETDEVCAPS_INPUTS* = 000004001H;
    MCI_WAVE_GETDEVCAPS_OUTPUTS* = 000004002H;
    MCI_SEQ_DIV_PPQN* = 0000004C0H;
    MCI_SEQ_DIV_SMPTE_24* = 0000004C1H;
    MCI_SEQ_DIV_SMPTE_25* = 0000004C2H;
    MCI_SEQ_DIV_SMPTE_30DROP* = 0000004C3H;
    MCI_SEQ_DIV_SMPTE_30* = 0000004C4H;
    MCI_SEQ_FORMAT_SONGPTR* = 000004001H;
    MCI_SEQ_FILE* = 000004002H;
    MCI_SEQ_MIDI* = 000004003H;
    MCI_SEQ_SMPTE* = 000004004H;
    MCI_SEQ_NONE* = 00000FFFDH;
    MCI_SEQ_MAPPER* = 00000FFFFH;
    MCI_SEQ_STATUS_TEMPO* = 000004002H;
    MCI_SEQ_STATUS_PORT* = 000004003H;
    MCI_SEQ_STATUS_SLAVE* = 000004007H;
    MCI_SEQ_STATUS_MASTER* = 000004008H;
    MCI_SEQ_STATUS_OFFSET* = 000004009H;
    MCI_SEQ_STATUS_DIVTYPE* = 00000400AH;
    MCI_SEQ_STATUS_NAME* = 00000400BH;
    MCI_SEQ_STATUS_COPYRIGHT* = 00000400CH;
    MCI_SEQ_SET_TEMPO* = 000010000H;
    MCI_SEQ_SET_PORT* = 000020000H;
    MCI_SEQ_SET_SLAVE* = 000040000H;
    MCI_SEQ_SET_MASTER* = 000080000H;
    MCI_SEQ_SET_OFFSET* = 001000000H;
    MCI_ANIM_OPEN_WS* = 000010000H;
    MCI_ANIM_OPEN_PARENT* = 000020000H;
    MCI_ANIM_OPEN_NOSTATIC* = 000040000H;
    MCI_ANIM_PLAY_SPEED* = 000010000H;
    MCI_ANIM_PLAY_REVERSE* = 000020000H;
    MCI_ANIM_PLAY_FAST* = 000040000H;
    MCI_ANIM_PLAY_SLOW* = 000080000H;
    MCI_ANIM_PLAY_SCAN* = 000100000H;
    MCI_ANIM_STEP_REVERSE* = 000010000H;
    MCI_ANIM_STEP_FRAMES* = 000020000H;
    MCI_ANIM_STATUS_SPEED* = 000004001H;
    MCI_ANIM_STATUS_FORWARD* = 000004002H;
    MCI_ANIM_STATUS_HWND* = 000004003H;
    MCI_ANIM_STATUS_HPAL* = 000004004H;
    MCI_ANIM_STATUS_STRETCH* = 000004005H;
    MCI_ANIM_INFO_TEXT* = 000010000H;
    MCI_ANIM_GETDEVCAPS_CAN_REVERSE* = 000004001H;
    MCI_ANIM_GETDEVCAPS_FAST_RATE* = 000004002H;
    MCI_ANIM_GETDEVCAPS_SLOW_RATE* = 000004003H;
    MCI_ANIM_GETDEVCAPS_NORMAL_RATE* = 000004004H;
    MCI_ANIM_GETDEVCAPS_PALETTES* = 000004006H;
    MCI_ANIM_GETDEVCAPS_CAN_STRETCH* = 000004007H;
    MCI_ANIM_GETDEVCAPS_MAX_WINDOWS* = 000004008H;
    MCI_ANIM_REALIZE_NORM* = 000010000H;
    MCI_ANIM_REALIZE_BKGD* = 000020000H;
    MCI_ANIM_WINDOW_HWND* = 000010000H;
    MCI_ANIM_WINDOW_STATE* = 000040000H;
    MCI_ANIM_WINDOW_TEXT* = 000080000H;
    MCI_ANIM_WINDOW_ENABLE_STRETCH* = 000100000H;
    MCI_ANIM_WINDOW_DISABLE_STRETCH* = 000200000H;
    MCI_ANIM_WINDOW_DEFAULT* = 000000000H;
    MCI_ANIM_RECT* = 000010000H;
    MCI_ANIM_PUT_SOURCE* = 000020000H;
    MCI_ANIM_PUT_DESTINATION* = 000040000H;
    MCI_ANIM_WHERE_SOURCE* = 000020000H;
    MCI_ANIM_WHERE_DESTINATION* = 000040000H;
    MCI_ANIM_UPDATE_HDC* = 000020000H;
    MCI_OVLY_OPEN_WS* = 000010000H;
    MCI_OVLY_OPEN_PARENT* = 000020000H;
    MCI_OVLY_STATUS_HWND* = 000004001H;
    MCI_OVLY_STATUS_STRETCH* = 000004002H;
    MCI_OVLY_INFO_TEXT* = 000010000H;
    MCI_OVLY_GETDEVCAPS_CAN_STRETCH* = 000004001H;
    MCI_OVLY_GETDEVCAPS_CAN_FREEZE* = 000004002H;
    MCI_OVLY_GETDEVCAPS_MAX_WINDOWS* = 000004003H;
    MCI_OVLY_WINDOW_HWND* = 000010000H;
    MCI_OVLY_WINDOW_STATE* = 000040000H;
    MCI_OVLY_WINDOW_TEXT* = 000080000H;
    MCI_OVLY_WINDOW_ENABLE_STRETCH* = 000100000H;
    MCI_OVLY_WINDOW_DISABLE_STRETCH* = 000200000H;
    MCI_OVLY_WINDOW_DEFAULT* = 000000000H;
    MCI_OVLY_RECT* = 000010000H;
    MCI_OVLY_PUT_SOURCE* = 000020000H;
    MCI_OVLY_PUT_DESTINATION* = 000040000H;
    MCI_OVLY_PUT_FRAME* = 000080000H;
    MCI_OVLY_PUT_VIDEO* = 000100000H;
    MCI_OVLY_WHERE_SOURCE* = 000020000H;
    MCI_OVLY_WHERE_DESTINATION* = 000040000H;
    MCI_OVLY_WHERE_FRAME* = 000080000H;
    MCI_OVLY_WHERE_VIDEO* = 000100000H;
    NEWTRANSPARENT* = 000000003H;
    QUERYROPSUPPORT* = 000000028H;
    SELECTDIB* = 000000029H;

    (* H2O: Constants occuring in enumerated types *)

    ExceptionContinueExecution* = 000000000H;
    ExceptionContinueSearch* = 000000001H;
    ExceptionNestedException* = 000000002H;
    ExceptionCollidedUnwind* = 000000003H;
    SidTypeUser* = 000000001H;
    SidTypeGroup* = 000000002H;
    SidTypeDomain* = 000000003H;
    SidTypeAlias* = 000000004H;
    SidTypeWellKnownGroup* = 000000005H;
    SidTypeDeletedAccount* = 000000006H;
    SidTypeInvalid* = 000000007H;
    SidTypeUnknown* = 000000008H;
    SidTypeComputer* = 000000009H;
    AclRevisionInformation* = 000000001H;
    AclSizeInformation* = 000000002H;
    AuditEventObjectAccess* = 000000000H;
    AuditEventDirectoryServiceAccess* = 000000001H;
    SecurityAnonymous* = 000000000H;
    SecurityIdentification* = 000000001H;
    SecurityImpersonation* = 000000002H;
    SecurityDelegation* = 000000003H;
    TokenPrimary* = 000000001H;
    TokenImpersonation* = 000000002H;
    TokenUser* = 000000001H;
    TokenGroups* = 000000002H;
    TokenPrivileges* = 000000003H;
    TokenOwner* = 000000004H;
    TokenPrimaryGroup* = 000000005H;
    TokenDefaultDacl* = 000000006H;
    TokenSource* = 000000007H;
    TokenType* = 000000008H;
    TokenImpersonationLevel* = 000000009H;
    TokenStatistics* = 00000000AH;
    TokenRestrictedSids* = 00000000BH;
    TokenSessionId* = 00000000CH;
    JobObjectBasicAccountingInformation* = 000000001H;
    JobObjectBasicLimitInformation* = 000000002H;
    JobObjectBasicProcessIdList* = 000000003H;
    JobObjectBasicUIRestrictions* = 000000004H;
    JobObjectSecurityLimitInformation* = 000000005H;
    JobObjectEndOfJobTimeInformation* = 000000006H;
    JobObjectAssociateCompletionPortInformation* = 000000007H;
    MaxJobObjectInfoClass* = 000000008H;
    LT_DONT_CARE* = 000000000H;
    LT_LOWEST_LATENCY* = 000000001H;
    IMPORT_OBJECT_CODE* = 000000000H;
    IMPORT_OBJECT_DATA* = 000000001H;
    IMPORT_OBJECT_CONST* = 000000002H;
    IMPORT_OBJECT_ORDINAL* = 000000000H;
    IMPORT_OBJECT_NAME* = 000000001H;
    IMPORT_OBJECT_NAME_NO_PREFIX* = 000000002H;
    IMPORT_OBJECT_NAME_UNDECORATE* = 000000003H;
    DriverType* = 000000001H;
    FileSystemType* = 000000002H;
    Win32ServiceOwnProcess* = 000000010H;
    Win32ServiceShareProcess* = 000000020H;
    AdapterType* = 000000004H;
    RecognizerType* = 000000008H;
    BootLoad* = 000000000H;
    SystemLoad* = 000000001H;
    AutoLoad* = 000000002H;
    DemandLoad* = 000000003H;
    DisableLoad* = 000000004H;
    IgnoreError* = 000000000H;
    NormalError* = 000000001H;
    SevereError* = 000000002H;
    CriticalError* = 000000003H;
    GetFileExInfoStandard* = 000000000H;
    GetFileExMaxInfoLevel* = 000000001H;
    FindExInfoStandard* = 000000000H;
    FindExInfoMaxInfoLevel* = 000000001H;
    FindExSearchNameMatch* = 000000000H;
    FindExSearchLimitToDirectories* = 000000001H;
    FindExSearchLimitToDevices* = 000000002H;
    FindExSearchMaxSearchOp* = 000000003H;
    SC_ACTION_NONE* = 000000000H;
    SC_ACTION_RESTART* = 000000001H;
    SC_ACTION_REBOOT* = 000000002H;
    SC_ACTION_RUN_COMMAND* = 000000003H;

    (* H2O: Defined Type Names *)

TYPE
    wstring* = POINTER TO ARRAY OF LONGCHAR;

    EXCEPTION_DISPOSITION* = INTEGER (* enumerated type _EXCEPTION_DISPOSITION *);

    va_list* = POINTER TO ARRAY OF CHAR;

    ULONG* = LONGINT;

    PULONG* = POINTER TO ARRAY OF ULONG;

    USHORT* = INTEGER;

    PUSHORT* = POINTER TO ARRAY OF USHORT;

    UCHAR* = CHAR;

    PUCHAR* = POINTER TO ARRAY OF UCHAR;

    PSZ* = va_list;

    DWORD* = LONGINT;

    BOOL* = LONGINT;

    BYTE* = CHAR;

    WORD* = INTEGER;

    FLOAT* = REAL;

    PFLOAT* = POINTER TO ARRAY OF FLOAT;

    PBOOL* = POINTER TO ARRAY OF BOOL;

    LPBOOL* = PBOOL;

    PBYTE* = POINTER TO ARRAY OF BYTE;

    LPBYTE* = PBYTE;

    PINT* = POINTER TO ARRAY OF LONGINT;

    LPINT* = PINT;

    PWORD* = POINTER TO ARRAY OF WORD;

    LPWORD* = PWORD;

    LPLONG* = POINTER TO ARRAY OF LONGINT;

    PDWORD* = POINTER TO ARRAY OF DWORD;

    LPDWORD* = PDWORD;

    LPVOID* = LONGINT (* void pointer *);

    LPCVOID* = LPVOID;

    INT* = LONGINT;

    UINT* = LONGINT;

    PUINT* = PINT;

    wint_t* = LONGCHAR;

    wctype_t* = LONGCHAR;

    POINTER_64_INT* = LONGINT;

    LONG32* = LONGINT;

    PLONG32* = PINT;

    INT32* = LONGINT;

    PINT32* = PINT;

    ULONG32* = LONGINT;

    PULONG32* = PINT;

    DWORD32* = LONGINT;

    PDWORD32* = PINT;

    UINT32* = LONGINT;

    PUINT32* = PINT;

    INT_PTR* = LONGINT;

    PINT_PTR* = LPLONG;

    UINT_PTR* = LONGINT;

    PUINT_PTR* = LPLONG;

    UHALF_PTR* = INTEGER;

    PUHALF_PTR* = POINTER TO ARRAY OF INTEGER;

    HALF_PTR* = INTEGER;

    PHALF_PTR* = PUHALF_PTR;

    SIZE_T* = UINT_PTR;

    PSIZE_T* = POINTER TO ARRAY OF UINT_PTR;

    SSIZE_T* = INT_PTR;

    PSSIZE_T* = POINTER TO ARRAY OF INT_PTR;

    LONG64* = HUGEINT;

    PLONG64* = POINTER TO ARRAY OF HUGEINT;

    INT64* = HUGEINT;

    PINT64* = PLONG64;

    ULONG64* = HUGEINT;

    PULONG64* = PLONG64;

    DWORD64* = HUGEINT;

    PDWORD64* = PLONG64;

    UINT64* = HUGEINT;

    PUINT64* = PLONG64;

    PVOID* = LPVOID;

    PVOID64* = LPVOID;

    SHORT* = INTEGER;

    LONG* = LONGINT;

    WCHAR* = SYSTEM.CHAR16;

    PWCHAR* = POINTER (*CSTRING*) TO ARRAY [notag] OF WCHAR;

    LPWCH* = PWCHAR;

    PWCH* = PWCHAR;

    LPCWCH* = PWCHAR;

    PCWCH* = PWCHAR;

    NWPSTR* = PWCHAR;

    LPWSTR* = PWCHAR;

    PWSTR* = PWCHAR;

    LPCWSTR* = PWCHAR;

    PCWSTR* = PWCHAR;

    PCHAR* = POINTER (*CSTRING*) TO ARRAY [notag] OF CHAR;

    LPCH* = PCHAR;

    PCH* = PCHAR;

    LPCCH* = PCHAR;

    PCCH* = PCHAR;

    NPSTR* = PCHAR;

    LPSTR* = PCHAR;

    PSTR* = PCHAR;

    LPCSTR* = PCHAR;

    PCSTR* = PCHAR;

    TCHAR* = CHAR;

    PTCHAR* = va_list;

    TBYTE* = CHAR;

    PTBYTE* = va_list;

    LPTCH* = LPSTR;

    PTCH* = LPSTR;

    PTSTR* = LPSTR;

    LPTSTR* = LPSTR;

    LPCTSTR* = LPCSTR;

    PSHORT* = POINTER TO ARRAY OF SHORT;

    PLONG* = POINTER TO ARRAY OF LONG;

    HANDLE* = PVOID;

    PHANDLE* = POINTER TO ARRAY OF HANDLE;

    FCHAR* = BYTE;

    FSHORT* = WORD;

    FLONG* = DWORD;

    HRESULT* = LONG;

    CCHAR* = CHAR;

    LCID* = DWORD;

    PLCID* = PDWORD;

    LANGID* = WORD;

    _FLOAT128_struct* = RECORD [notag]
      LowPart* : HUGEINT;
      HighPart* : HUGEINT
    END;

    FLOAT128* = _FLOAT128_struct;

    PFLOAT128* = POINTER TO FLOAT128;

    LONGLONG* = LONGREAL;

    ULONGLONG* = LONGREAL;

    PLONGLONG* = POINTER TO ARRAY OF LONGLONG;

    PULONGLONG* = POINTER TO ARRAY OF ULONGLONG;

    USN* = LONGLONG;

    _LARGE_INTEGER_union* = RECORD [UNION]
      noname0* : RECORD [notag]
        LowPart* : DWORD;
        HighPart* : LONG
      END;
      u* : RECORD [notag]
        LowPart* : DWORD;
        HighPart* : LONG
      END;
      QuadPart* : LONGLONG
    END;

    LARGE_INTEGER* = _LARGE_INTEGER_union;

    PLARGE_INTEGER* = POINTER TO LARGE_INTEGER;

    _ULARGE_INTEGER_union* = RECORD [UNION]
      noname0* : RECORD [notag]
        LowPart* : DWORD;
        HighPart* : DWORD
      END;
      u* : RECORD [notag]
        LowPart* : DWORD;
        HighPart* : DWORD
      END;
      QuadPart* : ULONGLONG
    END;

    ULARGE_INTEGER* = _ULARGE_INTEGER_union;

    PULARGE_INTEGER* = POINTER TO ULARGE_INTEGER;

    _LUID_struct* = RECORD [notag]
      LowPart* : DWORD;
      HighPart* : LONG
    END;

    LUID* = _LUID_struct;

    PLUID* = POINTER TO _LUID_struct;

    DWORDLONG* = ULONGLONG;

    PDWORDLONG* = POINTER TO ARRAY OF DWORDLONG;

    BOOLEAN* = BYTE;

    PBOOLEAN* = POINTER TO ARRAY OF BOOLEAN;

    PLIST_ENTRY* = POINTER TO _LIST_ENTRY_struct;

    _LIST_ENTRY_struct* = RECORD [notag]
      Flink* : PLIST_ENTRY;
      Blink* : PLIST_ENTRY
    END;

    LIST_ENTRY* = _LIST_ENTRY_struct;

    PRLIST_ENTRY* = PLIST_ENTRY;

    PSINGLE_LIST_ENTRY* = POINTER TO _SINGLE_LIST_ENTRY_struct;

    _SINGLE_LIST_ENTRY_struct* = RECORD [notag]
      Next* : PSINGLE_LIST_ENTRY
    END;

    SINGLE_LIST_ENTRY* = _SINGLE_LIST_ENTRY_struct;

    _GUID_struct* = RECORD [notag]
      Data1* : DWORD;
      Data2* : WORD;
      Data3* : WORD;
      Data4* : ARRAY 8 OF BYTE
    END;

    GUID* = _GUID_struct;

    _OBJECTID_struct* = RECORD [notag]
      Lineage* : GUID;
      Uniquifier* : DWORD
    END;

    OBJECTID* = _OBJECTID_struct;

    KSPIN_LOCK* = UINT_PTR;

    PKSPIN_LOCK* = POINTER TO ARRAY OF KSPIN_LOCK;

    _FLOATING_SAVE_AREA_struct* = RECORD [notag]
      ControlWord* : DWORD;
      StatusWord* : DWORD;
      TagWord* : DWORD;
      ErrorOffset* : DWORD;
      ErrorSelector* : DWORD;
      DataOffset* : DWORD;
      DataSelector* : DWORD;
      RegisterArea* : ARRAY 80 OF BYTE;
      Cr0NpxState* : DWORD
    END;

    FLOATING_SAVE_AREA* = _FLOATING_SAVE_AREA_struct;

    PFLOATING_SAVE_AREA* = POINTER TO FLOATING_SAVE_AREA;

    _CONTEXT_struct* = RECORD [ALIGN8]
      ContextFlags* : DWORD;
      Dr0* : DWORD;
      Dr1* : DWORD;
      Dr2* : DWORD;
      Dr3* : DWORD;
      Dr6* : DWORD;
      Dr7* : DWORD;
      FloatSave* : FLOATING_SAVE_AREA;
      SegGs* : DWORD;
      SegFs* : DWORD;
      SegEs* : DWORD;
      SegDs* : DWORD;
      Edi* : DWORD;
      Esi* : DWORD;
      Ebx* : DWORD;
      Edx* : DWORD;
      Ecx* : DWORD;
      Eax* : DWORD;
      Ebp* : DWORD;
      Eip* : DWORD;
      SegCs* : DWORD;
      EFlags* : DWORD;
      Esp* : DWORD;
      SegSs* : DWORD;
      ExtendedRegisters* : ARRAY 512 OF BYTE
    END;

    CONTEXT* = _CONTEXT_struct;

    PCONTEXT* = POINTER TO CONTEXT;

    _LDT_ENTRY_struct* = RECORD [notag]
      LimitLow* : WORD;
      BaseLow* : WORD;
      HighWord* : RECORD [UNION]
        Bytes* : RECORD [notag]
          BaseMid* : BYTE;
          Flags1* : BYTE;
          Flags2* : BYTE;
          BaseHi* : BYTE
        END;
        Bits* : RECORD [notag]
          BaseMid* : DWORD;
          Type* : DWORD;
          Dpl* : DWORD;
          Pres* : DWORD;
          LimitHi* : DWORD;
          Sys* : DWORD;
          Reserved_0* : DWORD;
          Default_Big* : DWORD;
          Granularity* : DWORD;
          BaseHi* : DWORD
        END
      END
    END;

    LDT_ENTRY* = _LDT_ENTRY_struct;

    PLDT_ENTRY* = POINTER TO _LDT_ENTRY_struct;

    AutoPtr__EXCEPTION_RECORD* = POINTER TO _EXCEPTION_RECORD_struct;

    _EXCEPTION_RECORD_struct* = RECORD [ALIGN8]
      ExceptionCode* : DWORD;
      ExceptionFlags* : DWORD;
      ExceptionRecord* : AutoPtr__EXCEPTION_RECORD;
      ExceptionAddress* : PVOID;
      NumberParameters* : DWORD;
      ExceptionInformation* : ARRAY 15 OF UINT_PTR
    END;

    EXCEPTION_RECORD* = _EXCEPTION_RECORD_struct;

    PEXCEPTION_RECORD* = POINTER TO EXCEPTION_RECORD;

    _EXCEPTION_POINTERS_struct* = RECORD [notag]
      ExceptionRecord* : PEXCEPTION_RECORD;
      ContextRecord* : PCONTEXT
    END;

    EXCEPTION_POINTERS* = _EXCEPTION_POINTERS_struct;

    PEXCEPTION_POINTERS* = POINTER TO _EXCEPTION_POINTERS_struct;

    PACCESS_TOKEN* = PVOID;

    PSECURITY_DESCRIPTOR* = PVOID;

    PSID* = PVOID;

    ACCESS_MASK* = DWORD;

    PACCESS_MASK* = POINTER TO ARRAY OF ACCESS_MASK;

    _GENERIC_MAPPING_struct* = RECORD [notag]
      GenericRead* : ACCESS_MASK;
      GenericWrite* : ACCESS_MASK;
      GenericExecute* : ACCESS_MASK;
      GenericAll* : ACCESS_MASK
    END;

    GENERIC_MAPPING* = _GENERIC_MAPPING_struct;

    PGENERIC_MAPPING* = POINTER TO GENERIC_MAPPING;

    _LUID_AND_ATTRIBUTES_struct* = RECORD [ALIGN4]
      Luid* : LUID;
      Attributes* : DWORD
    END;

    LUID_AND_ATTRIBUTES* = _LUID_AND_ATTRIBUTES_struct;

    PLUID_AND_ATTRIBUTES* = POINTER TO _LUID_AND_ATTRIBUTES_struct;

    LUID_AND_ATTRIBUTES_ARRAY* = ARRAY 1 OF LUID_AND_ATTRIBUTES;

    PLUID_AND_ATTRIBUTES_ARRAY* = POINTER TO LUID_AND_ATTRIBUTES_ARRAY;

    _SID_IDENTIFIER_AUTHORITY_struct* = RECORD [notag]
      Value* : ARRAY 6 OF BYTE
    END;

    SID_IDENTIFIER_AUTHORITY* = _SID_IDENTIFIER_AUTHORITY_struct;

    PSID_IDENTIFIER_AUTHORITY* = POINTER TO _SID_IDENTIFIER_AUTHORITY_struct;

    _SID_struct* = RECORD [notag]
      Revision* : BYTE;
      SubAuthorityCount* : BYTE;
      IdentifierAuthority* : SID_IDENTIFIER_AUTHORITY;
      SubAuthority* : ARRAY 1 OF DWORD
    END;

    SID* = _SID_struct;

    PISID* = POINTER TO _SID_struct;

    SID_NAME_USE* = EXCEPTION_DISPOSITION;

    PSID_NAME_USE* = POINTER TO ARRAY OF EXCEPTION_DISPOSITION;

    _SID_AND_ATTRIBUTES_struct* = RECORD [notag]
      Sid* : PSID;
      Attributes* : DWORD
    END;

    SID_AND_ATTRIBUTES* = _SID_AND_ATTRIBUTES_struct;

    PSID_AND_ATTRIBUTES* = POINTER TO _SID_AND_ATTRIBUTES_struct;

    SID_AND_ATTRIBUTES_ARRAY* = ARRAY 1 OF SID_AND_ATTRIBUTES;

    PSID_AND_ATTRIBUTES_ARRAY* = POINTER TO SID_AND_ATTRIBUTES_ARRAY;

    _ACL_struct* = RECORD [notag]
      AclRevision* : BYTE;
      Sbz1* : BYTE;
      AclSize* : WORD;
      AceCount* : WORD;
      Sbz2* : WORD
    END;

    ACL* = _ACL_struct;

    PACL* = POINTER TO ACL;

    _ACE_HEADER_struct* = RECORD [notag]
      AceType* : BYTE;
      AceFlags* : BYTE;
      AceSize* : WORD
    END;

    ACE_HEADER* = _ACE_HEADER_struct;

    PACE_HEADER* = POINTER TO ACE_HEADER;

    _ACCESS_ALLOWED_ACE_struct* = RECORD [notag]
      Header* : ACE_HEADER;
      Mask* : ACCESS_MASK;
      SidStart* : DWORD
    END;

    ACCESS_ALLOWED_ACE* = _ACCESS_ALLOWED_ACE_struct;

    PACCESS_ALLOWED_ACE* = POINTER TO ACCESS_ALLOWED_ACE;

    _ACCESS_DENIED_ACE_struct* = RECORD [notag]
      Header* : ACE_HEADER;
      Mask* : ACCESS_MASK;
      SidStart* : DWORD
    END;

    ACCESS_DENIED_ACE* = _ACCESS_DENIED_ACE_struct;

    PACCESS_DENIED_ACE* = POINTER TO ACCESS_DENIED_ACE;

    _SYSTEM_AUDIT_ACE_struct* = RECORD [notag]
      Header* : ACE_HEADER;
      Mask* : ACCESS_MASK;
      SidStart* : DWORD
    END;

    SYSTEM_AUDIT_ACE* = _SYSTEM_AUDIT_ACE_struct;

    PSYSTEM_AUDIT_ACE* = POINTER TO SYSTEM_AUDIT_ACE;

    _SYSTEM_ALARM_ACE_struct* = RECORD [notag]
      Header* : ACE_HEADER;
      Mask* : ACCESS_MASK;
      SidStart* : DWORD
    END;

    SYSTEM_ALARM_ACE* = _SYSTEM_ALARM_ACE_struct;

    PSYSTEM_ALARM_ACE* = POINTER TO SYSTEM_ALARM_ACE;

    _ACCESS_ALLOWED_OBJECT_ACE_struct* = RECORD [notag]
      Header* : ACE_HEADER;
      Mask* : ACCESS_MASK;
      Flags* : DWORD;
      ObjectType* : GUID;
      InheritedObjectType* : GUID;
      SidStart* : DWORD
    END;

    ACCESS_ALLOWED_OBJECT_ACE* = _ACCESS_ALLOWED_OBJECT_ACE_struct;

    PACCESS_ALLOWED_OBJECT_ACE* = POINTER TO _ACCESS_ALLOWED_OBJECT_ACE_struct;

    _ACCESS_DENIED_OBJECT_ACE_struct* = RECORD [notag]
      Header* : ACE_HEADER;
      Mask* : ACCESS_MASK;
      Flags* : DWORD;
      ObjectType* : GUID;
      InheritedObjectType* : GUID;
      SidStart* : DWORD
    END;

    ACCESS_DENIED_OBJECT_ACE* = _ACCESS_DENIED_OBJECT_ACE_struct;

    PACCESS_DENIED_OBJECT_ACE* = POINTER TO _ACCESS_DENIED_OBJECT_ACE_struct;

    _SYSTEM_AUDIT_OBJECT_ACE_struct* = RECORD [notag]
      Header* : ACE_HEADER;
      Mask* : ACCESS_MASK;
      Flags* : DWORD;
      ObjectType* : GUID;
      InheritedObjectType* : GUID;
      SidStart* : DWORD
    END;

    SYSTEM_AUDIT_OBJECT_ACE* = _SYSTEM_AUDIT_OBJECT_ACE_struct;

    PSYSTEM_AUDIT_OBJECT_ACE* = POINTER TO _SYSTEM_AUDIT_OBJECT_ACE_struct;

    _SYSTEM_ALARM_OBJECT_ACE_struct* = RECORD [notag]
      Header* : ACE_HEADER;
      Mask* : ACCESS_MASK;
      Flags* : DWORD;
      ObjectType* : GUID;
      InheritedObjectType* : GUID;
      SidStart* : DWORD
    END;

    SYSTEM_ALARM_OBJECT_ACE* = _SYSTEM_ALARM_OBJECT_ACE_struct;

    PSYSTEM_ALARM_OBJECT_ACE* = POINTER TO _SYSTEM_ALARM_OBJECT_ACE_struct;

    ACL_INFORMATION_CLASS* = EXCEPTION_DISPOSITION;

    _ACL_REVISION_INFORMATION_struct* = RECORD [notag]
      AclRevision* : DWORD
    END;

    ACL_REVISION_INFORMATION* = _ACL_REVISION_INFORMATION_struct;

    PACL_REVISION_INFORMATION* = POINTER TO ACL_REVISION_INFORMATION;

    _ACL_SIZE_INFORMATION_struct* = RECORD [notag]
      AceCount* : DWORD;
      AclBytesInUse* : DWORD;
      AclBytesFree* : DWORD
    END;

    ACL_SIZE_INFORMATION* = _ACL_SIZE_INFORMATION_struct;

    PACL_SIZE_INFORMATION* = POINTER TO ACL_SIZE_INFORMATION;

    SECURITY_DESCRIPTOR_CONTROL* = WORD;

    PSECURITY_DESCRIPTOR_CONTROL* = PWORD;

    _SECURITY_DESCRIPTOR_RELATIVE_struct* = RECORD [notag]
      Revision* : BYTE;
      Sbz1* : BYTE;
      Control* : SECURITY_DESCRIPTOR_CONTROL;
      Owner* : DWORD;
      Group* : DWORD;
      Sacl* : DWORD;
      Dacl* : DWORD
    END;

    SECURITY_DESCRIPTOR_RELATIVE* = _SECURITY_DESCRIPTOR_RELATIVE_struct;

    PISECURITY_DESCRIPTOR_RELATIVE* = POINTER TO _SECURITY_DESCRIPTOR_RELATIVE_struct;

    _SECURITY_DESCRIPTOR_struct* = RECORD [notag]
      Revision* : BYTE;
      Sbz1* : BYTE;
      Control* : SECURITY_DESCRIPTOR_CONTROL;
      Owner* : PSID;
      Group* : PSID;
      Sacl* : PACL;
      Dacl* : PACL
    END;

    SECURITY_DESCRIPTOR* = _SECURITY_DESCRIPTOR_struct;

    PISECURITY_DESCRIPTOR* = POINTER TO _SECURITY_DESCRIPTOR_struct;

    AutoPtr_GUID* = POINTER TO GUID;

    _OBJECT_TYPE_LIST_struct* = RECORD [notag]
      Level* : WORD;
      Sbz* : WORD;
      ObjectType* : AutoPtr_GUID
    END;

    OBJECT_TYPE_LIST* = _OBJECT_TYPE_LIST_struct;

    POBJECT_TYPE_LIST* = POINTER TO _OBJECT_TYPE_LIST_struct;

    AUDIT_EVENT_TYPE* = EXCEPTION_DISPOSITION;

    PAUDIT_EVENT_TYPE* = PSID_NAME_USE;

    _PRIVILEGE_SET_struct* = RECORD [notag]
      PrivilegeCount* : DWORD;
      Control* : DWORD;
      Privilege* : LUID_AND_ATTRIBUTES_ARRAY
    END;

    PRIVILEGE_SET* = _PRIVILEGE_SET_struct;

    PPRIVILEGE_SET* = POINTER TO _PRIVILEGE_SET_struct;

    SECURITY_IMPERSONATION_LEVEL* = EXCEPTION_DISPOSITION;

    PSECURITY_IMPERSONATION_LEVEL* = PSID_NAME_USE;

    TOKEN_TYPE* = EXCEPTION_DISPOSITION;

    PTOKEN_TYPE* = POINTER TO ARRAY OF TOKEN_TYPE;

    TOKEN_INFORMATION_CLASS* = EXCEPTION_DISPOSITION;

    PTOKEN_INFORMATION_CLASS* = PSID_NAME_USE;

    _TOKEN_USER_struct* = RECORD [notag]
      User* : SID_AND_ATTRIBUTES
    END;

    TOKEN_USER* = _TOKEN_USER_struct;

    PTOKEN_USER* = POINTER TO _TOKEN_USER_struct;

    _TOKEN_GROUPS_struct* = RECORD [notag]
      GroupCount* : DWORD;
      Groups* : SID_AND_ATTRIBUTES_ARRAY
    END;

    TOKEN_GROUPS* = _TOKEN_GROUPS_struct;

    PTOKEN_GROUPS* = POINTER TO _TOKEN_GROUPS_struct;

    _TOKEN_PRIVILEGES_struct* = RECORD [notag]
      PrivilegeCount* : DWORD;
      Privileges* : LUID_AND_ATTRIBUTES_ARRAY
    END;

    TOKEN_PRIVILEGES* = _TOKEN_PRIVILEGES_struct;

    PTOKEN_PRIVILEGES* = POINTER TO _TOKEN_PRIVILEGES_struct;

    _TOKEN_OWNER_struct* = RECORD [notag]
      Owner* : PSID
    END;

    TOKEN_OWNER* = _TOKEN_OWNER_struct;

    PTOKEN_OWNER* = POINTER TO _TOKEN_OWNER_struct;

    _TOKEN_PRIMARY_GROUP_struct* = RECORD [notag]
      PrimaryGroup* : PSID
    END;

    TOKEN_PRIMARY_GROUP* = _TOKEN_PRIMARY_GROUP_struct;

    PTOKEN_PRIMARY_GROUP* = POINTER TO _TOKEN_PRIMARY_GROUP_struct;

    _TOKEN_DEFAULT_DACL_struct* = RECORD [notag]
      DefaultDacl* : PACL
    END;

    TOKEN_DEFAULT_DACL* = _TOKEN_DEFAULT_DACL_struct;

    PTOKEN_DEFAULT_DACL* = POINTER TO _TOKEN_DEFAULT_DACL_struct;

    _TOKEN_SOURCE_struct* = RECORD [notag]
      SourceName* : ARRAY 8 OF CHAR;
      SourceIdentifier* : LUID
    END;

    TOKEN_SOURCE* = _TOKEN_SOURCE_struct;

    PTOKEN_SOURCE* = POINTER TO _TOKEN_SOURCE_struct;

    _TOKEN_STATISTICS_struct* = RECORD [notag]
      TokenId* : LUID;
      AuthenticationId* : LUID;
      ExpirationTime* : LARGE_INTEGER;
      TokenType* : TOKEN_TYPE;
      ImpersonationLevel* : SECURITY_IMPERSONATION_LEVEL;
      DynamicCharged* : DWORD;
      DynamicAvailable* : DWORD;
      GroupCount* : DWORD;
      PrivilegeCount* : DWORD;
      ModifiedId* : LUID
    END;

    TOKEN_STATISTICS* = _TOKEN_STATISTICS_struct;

    PTOKEN_STATISTICS* = POINTER TO _TOKEN_STATISTICS_struct;

    _TOKEN_CONTROL_struct* = RECORD [notag]
      TokenId* : LUID;
      AuthenticationId* : LUID;
      ModifiedId* : LUID;
      TokenSource* : TOKEN_SOURCE
    END;

    TOKEN_CONTROL* = _TOKEN_CONTROL_struct;

    PTOKEN_CONTROL* = POINTER TO _TOKEN_CONTROL_struct;

    SECURITY_CONTEXT_TRACKING_MODE* = BOOLEAN;

    PSECURITY_CONTEXT_TRACKING_MODE* = PBOOLEAN;

    _SECURITY_QUALITY_OF_SERVICE_struct* = RECORD [notag]
      Length* : DWORD;
      ImpersonationLevel* : SECURITY_IMPERSONATION_LEVEL;
      ContextTrackingMode* : SECURITY_CONTEXT_TRACKING_MODE;
      EffectiveOnly* : BOOLEAN
    END;

    SECURITY_QUALITY_OF_SERVICE* = _SECURITY_QUALITY_OF_SERVICE_struct;

    PSECURITY_QUALITY_OF_SERVICE* = POINTER TO _SECURITY_QUALITY_OF_SERVICE_struct;

    _SE_IMPERSONATION_STATE_struct* = RECORD [notag]
      Token* : PACCESS_TOKEN;
      CopyOnOpen* : BOOLEAN;
      EffectiveOnly* : BOOLEAN;
      Level* : SECURITY_IMPERSONATION_LEVEL
    END;

    SE_IMPERSONATION_STATE* = _SE_IMPERSONATION_STATE_struct;

    PSE_IMPERSONATION_STATE* = POINTER TO _SE_IMPERSONATION_STATE_struct;

    SECURITY_INFORMATION* = DWORD;

    PSECURITY_INFORMATION* = PDWORD;

    _NT_TIB_struct* = RECORD [notag]
      ExceptionList* : POINTER TO _EXCEPTION_REGISTRATION_RECORD_struct;
      StackBase* : PVOID;
      StackLimit* : PVOID;
      SubSystemTib* : PVOID;
      noname0* : RECORD [UNION]
        FiberData* : PVOID;
        Version* : DWORD
      END;
      ArbitraryUserPointer* : PVOID;
      Self* : POINTER TO _NT_TIB_struct
    END;

    NT_TIB* = _NT_TIB_struct;

    PNT_TIB* = POINTER TO NT_TIB;

    _QUOTA_LIMITS_struct* = RECORD [notag]
      PagedPoolLimit* : SIZE_T;
      NonPagedPoolLimit* : SIZE_T;
      MinimumWorkingSetSize* : DWORD;
      MaximumWorkingSetSize* : DWORD;
      PagefileLimit* : SIZE_T;
      TimeLimit* : LARGE_INTEGER
    END;

    QUOTA_LIMITS* = _QUOTA_LIMITS_struct;

    PQUOTA_LIMITS* = POINTER TO QUOTA_LIMITS;

    _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION_struct* = RECORD [notag]
      TotalUserTime* : LARGE_INTEGER;
      TotalKernelTime* : LARGE_INTEGER;
      ThisPeriodTotalUserTime* : LARGE_INTEGER;
      ThisPeriodTotalKernelTime* : LARGE_INTEGER;
      TotalPageFaultCount* : DWORD;
      TotalProcesses* : DWORD;
      ActiveProcesses* : DWORD;
      TotalTerminatedProcesses* : DWORD
    END;

    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION* = _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION_struct;

    PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION* = POINTER TO _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION_struct;

    _JOBOBJECT_BASIC_LIMIT_INFORMATION_struct* = RECORD [notag]
      PerProcessUserTimeLimit* : LARGE_INTEGER;
      PerJobUserTimeLimit* : LARGE_INTEGER;
      LimitFlags* : DWORD;
      MinimumWorkingSetSize* : DWORD;
      MaximumWorkingSetSize* : DWORD;
      ActiveProcessLimit* : DWORD;
      Affinity* : DWORD;
      PriorityClass* : DWORD
    END;

    JOBOBJECT_BASIC_LIMIT_INFORMATION* = _JOBOBJECT_BASIC_LIMIT_INFORMATION_struct;

    PJOBOBJECT_BASIC_LIMIT_INFORMATION* = POINTER TO _JOBOBJECT_BASIC_LIMIT_INFORMATION_struct;

    _JOBOBJECT_BASIC_PROCESS_ID_LIST_struct* = RECORD [notag]
      NumberOfAssignedProcesses* : DWORD;
      NumberOfProcessIdsInList* : DWORD;
      ProcessIdList* : ARRAY 1 OF UINT_PTR
    END;

    JOBOBJECT_BASIC_PROCESS_ID_LIST* = _JOBOBJECT_BASIC_PROCESS_ID_LIST_struct;

    PJOBOBJECT_BASIC_PROCESS_ID_LIST* = POINTER TO _JOBOBJECT_BASIC_PROCESS_ID_LIST_struct;

    _JOBOBJECT_BASIC_UI_RESTRICTIONS_struct* = RECORD [notag]
      UIRestrictionsClass* : DWORD
    END;

    JOBOBJECT_BASIC_UI_RESTRICTIONS* = _JOBOBJECT_BASIC_UI_RESTRICTIONS_struct;

    PJOBOBJECT_BASIC_UI_RESTRICTIONS* = POINTER TO _JOBOBJECT_BASIC_UI_RESTRICTIONS_struct;

    _JOBOBJECT_SECURITY_LIMIT_INFORMATION_struct* = RECORD [notag]
      SecurityLimitFlags* : DWORD;
      JobToken* : HANDLE;
      SidsToDisable* : PTOKEN_GROUPS;
      PrivilegesToDelete* : PTOKEN_PRIVILEGES;
      RestrictedSids* : PTOKEN_GROUPS
    END;

    JOBOBJECT_SECURITY_LIMIT_INFORMATION* = _JOBOBJECT_SECURITY_LIMIT_INFORMATION_struct;

    PJOBOBJECT_SECURITY_LIMIT_INFORMATION* = POINTER TO _JOBOBJECT_SECURITY_LIMIT_INFORMATION_struct;

    _JOBOBJECT_END_OF_JOB_TIME_INFORMATION_struct* = RECORD [notag]
      EndOfJobTimeAction* : DWORD
    END;

    JOBOBJECT_END_OF_JOB_TIME_INFORMATION* = _JOBOBJECT_END_OF_JOB_TIME_INFORMATION_struct;

    PJOBOBJECT_END_OF_JOB_TIME_INFORMATION* = POINTER TO _JOBOBJECT_END_OF_JOB_TIME_INFORMATION_struct;

    _JOBOBJECT_ASSOCIATE_COMPLETION_PORT_struct* = RECORD [notag]
      CompletionKey* : PVOID;
      CompletionPort* : HANDLE
    END;

    JOBOBJECT_ASSOCIATE_COMPLETION_PORT* = _JOBOBJECT_ASSOCIATE_COMPLETION_PORT_struct;

    PJOBOBJECT_ASSOCIATE_COMPLETION_PORT* = POINTER TO _JOBOBJECT_ASSOCIATE_COMPLETION_PORT_struct;

    JOBOBJECTINFOCLASS* = EXCEPTION_DISPOSITION;

    _MEMORY_BASIC_INFORMATION_struct* = RECORD [notag]
      BaseAddress* : PVOID;
      AllocationBase* : PVOID;
      AllocationProtect* : DWORD;
      RegionSize* : SIZE_T;
      State* : DWORD;
      Protect* : DWORD;
      Type* : DWORD
    END;

    MEMORY_BASIC_INFORMATION* = _MEMORY_BASIC_INFORMATION_struct;

    PMEMORY_BASIC_INFORMATION* = POINTER TO _MEMORY_BASIC_INFORMATION_struct;

    _MEMORY_BASIC_INFORMATION_VLM_struct* = RECORD [notag]
      noname0* : RECORD [UNION]
        BaseAddress* : PVOID64;
        BaseAddressAsUlongLong* : ULONGLONG
      END;
      noname1* : RECORD [UNION]
        AllocationBase* : PVOID64;
        AllocationBaseAsUlongLong* : ULONGLONG
      END;
      RegionSize* : ULONGLONG;
      AllocationProtect* : DWORD;
      State* : DWORD;
      Protect* : DWORD;
      Type* : DWORD
    END;

    MEMORY_BASIC_INFORMATION_VLM* = _MEMORY_BASIC_INFORMATION_VLM_struct;

    PMEMORY_BASIC_INFORMATION_VLM* = POINTER TO _MEMORY_BASIC_INFORMATION_VLM_struct;

    _FILE_NOTIFY_INFORMATION_struct* = RECORD [notag]
      NextEntryOffset* : DWORD;
      Action* : DWORD;
      FileNameLength* : DWORD;
      FileName* : ARRAY 1 OF WCHAR
    END;

    FILE_NOTIFY_INFORMATION* = _FILE_NOTIFY_INFORMATION_struct;

    PFILE_NOTIFY_INFORMATION* = POINTER TO _FILE_NOTIFY_INFORMATION_struct;

    _FILE_SEGMENT_ELEMENT_union* = RECORD [UNION]
      Buffer* : PVOID64;
      Alignment* : ULONGLONG
    END;

    FILE_SEGMENT_ELEMENT* = _FILE_SEGMENT_ELEMENT_union;

    PFILE_SEGMENT_ELEMENT* = POINTER TO _FILE_SEGMENT_ELEMENT_union;

    _REPARSE_DATA_BUFFER_struct* = RECORD [notag]
      ReparseTag* : DWORD;
      ReparseDataLength* : WORD;
      Reserved* : WORD;
      noname0* : RECORD [UNION]
        SymbolicLinkReparseBuffer* : RECORD [notag]
          SubstituteNameOffset* : WORD;
          SubstituteNameLength* : WORD;
          PrintNameOffset* : WORD;
          PrintNameLength* : WORD;
          PathBuffer* : ARRAY 1 OF WCHAR
        END;
        MountPointReparseBuffer* : RECORD [notag]
          SubstituteNameOffset* : WORD;
          SubstituteNameLength* : WORD;
          PrintNameOffset* : WORD;
          PrintNameLength* : WORD;
          PathBuffer* : ARRAY 1 OF WCHAR
        END;
        GenericReparseBuffer* : RECORD [notag]
          DataBuffer* : ARRAY 1 OF BYTE
        END
      END
    END;

    REPARSE_DATA_BUFFER* = _REPARSE_DATA_BUFFER_struct;

    PREPARSE_DATA_BUFFER* = POINTER TO _REPARSE_DATA_BUFFER_struct;

    _REPARSE_GUID_DATA_BUFFER_struct* = RECORD [notag]
      ReparseTag* : DWORD;
      ReparseDataLength* : WORD;
      Reserved* : WORD;
      ReparseGuid* : GUID;
      GenericReparseBuffer* : RECORD [notag]
        DataBuffer* : ARRAY 1 OF BYTE
      END
    END;

    REPARSE_GUID_DATA_BUFFER* = _REPARSE_GUID_DATA_BUFFER_struct;

    PREPARSE_GUID_DATA_BUFFER* = POINTER TO _REPARSE_GUID_DATA_BUFFER_struct;

    _REPARSE_POINT_INFORMATION_struct* = RECORD [notag]
      ReparseDataLength* : WORD;
      UnparsedNameLength* : WORD
    END;

    REPARSE_POINT_INFORMATION* = _REPARSE_POINT_INFORMATION_struct;

    PREPARSE_POINT_INFORMATION* = POINTER TO _REPARSE_POINT_INFORMATION_struct;

    EXECUTION_STATE* = DWORD;

    LATENCY_TIME* = EXCEPTION_DISPOSITION;

    _POWER_DEVICE_TIMEOUTS_struct* = RECORD [notag]
      ConservationIdleTime* : DWORD;
      PerformanceIdleTime* : DWORD
    END;

    POWER_DEVICE_TIMEOUTS* = _POWER_DEVICE_TIMEOUTS_struct;

    PPOWER_DEVICE_TIMEOUTS* = POINTER TO _POWER_DEVICE_TIMEOUTS_struct;

    _IMAGE_DOS_HEADER_struct* = RECORD [ALIGN2]
      e_magic* : WORD;
      e_cblp* : WORD;
      e_cp* : WORD;
      e_crlc* : WORD;
      e_cparhdr* : WORD;
      e_minalloc* : WORD;
      e_maxalloc* : WORD;
      e_ss* : WORD;
      e_sp* : WORD;
      e_csum* : WORD;
      e_ip* : WORD;
      e_cs* : WORD;
      e_lfarlc* : WORD;
      e_ovno* : WORD;
      e_res* : ARRAY 4 OF WORD;
      e_oemid* : WORD;
      e_oeminfo* : WORD;
      e_res2* : ARRAY 10 OF WORD;
      e_lfanew* : LONG
    END;

    IMAGE_DOS_HEADER* = _IMAGE_DOS_HEADER_struct;

    PIMAGE_DOS_HEADER* = POINTER TO _IMAGE_DOS_HEADER_struct;

    _IMAGE_OS2_HEADER_struct* = RECORD [ALIGN2]
      ne_magic* : WORD;
      ne_ver* : CHAR;
      ne_rev* : CHAR;
      ne_enttab* : WORD;
      ne_cbenttab* : WORD;
      ne_crc* : LONG;
      ne_flags* : WORD;
      ne_autodata* : WORD;
      ne_heap* : WORD;
      ne_stack* : WORD;
      ne_csip* : LONG;
      ne_sssp* : LONG;
      ne_cseg* : WORD;
      ne_cmod* : WORD;
      ne_cbnrestab* : WORD;
      ne_segtab* : WORD;
      ne_rsrctab* : WORD;
      ne_restab* : WORD;
      ne_modtab* : WORD;
      ne_imptab* : WORD;
      ne_nrestab* : LONG;
      ne_cmovent* : WORD;
      ne_align* : WORD;
      ne_cres* : WORD;
      ne_exetyp* : BYTE;
      ne_flagsothers* : BYTE;
      ne_pretthunks* : WORD;
      ne_psegrefbytes* : WORD;
      ne_swaparea* : WORD;
      ne_expver* : WORD
    END;

    IMAGE_OS2_HEADER* = _IMAGE_OS2_HEADER_struct;

    PIMAGE_OS2_HEADER* = POINTER TO _IMAGE_OS2_HEADER_struct;

    _IMAGE_VXD_HEADER_struct* = RECORD [ALIGN2]
      e32_magic* : WORD;
      e32_border* : BYTE;
      e32_worder* : BYTE;
      e32_level* : DWORD;
      e32_cpu* : WORD;
      e32_os* : WORD;
      e32_ver* : DWORD;
      e32_mflags* : DWORD;
      e32_mpages* : DWORD;
      e32_startobj* : DWORD;
      e32_eip* : DWORD;
      e32_stackobj* : DWORD;
      e32_esp* : DWORD;
      e32_pagesize* : DWORD;
      e32_lastpagesize* : DWORD;
      e32_fixupsize* : DWORD;
      e32_fixupsum* : DWORD;
      e32_ldrsize* : DWORD;
      e32_ldrsum* : DWORD;
      e32_objtab* : DWORD;
      e32_objcnt* : DWORD;
      e32_objmap* : DWORD;
      e32_itermap* : DWORD;
      e32_rsrctab* : DWORD;
      e32_rsrccnt* : DWORD;
      e32_restab* : DWORD;
      e32_enttab* : DWORD;
      e32_dirtab* : DWORD;
      e32_dircnt* : DWORD;
      e32_fpagetab* : DWORD;
      e32_frectab* : DWORD;
      e32_impmod* : DWORD;
      e32_impmodcnt* : DWORD;
      e32_impproc* : DWORD;
      e32_pagesum* : DWORD;
      e32_datapage* : DWORD;
      e32_preload* : DWORD;
      e32_nrestab* : DWORD;
      e32_cbnrestab* : DWORD;
      e32_nressum* : DWORD;
      e32_autodata* : DWORD;
      e32_debuginfo* : DWORD;
      e32_debuglen* : DWORD;
      e32_instpreload* : DWORD;
      e32_instdemand* : DWORD;
      e32_heapsize* : DWORD;
      e32_res3* : ARRAY 12 OF BYTE;
      e32_winresoff* : DWORD;
      e32_winreslen* : DWORD;
      e32_devid* : WORD;
      e32_ddkver* : WORD
    END;

    IMAGE_VXD_HEADER* = _IMAGE_VXD_HEADER_struct;

    PIMAGE_VXD_HEADER* = POINTER TO _IMAGE_VXD_HEADER_struct;

    _IMAGE_FILE_HEADER_struct* = RECORD [ALIGN4]
      Machine* : WORD;
      NumberOfSections* : WORD;
      TimeDateStamp* : DWORD;
      PointerToSymbolTable* : DWORD;
      NumberOfSymbols* : DWORD;
      SizeOfOptionalHeader* : WORD;
      Characteristics* : WORD
    END;

    IMAGE_FILE_HEADER* = _IMAGE_FILE_HEADER_struct;

    PIMAGE_FILE_HEADER* = POINTER TO _IMAGE_FILE_HEADER_struct;

    _IMAGE_DATA_DIRECTORY_struct* = RECORD [ALIGN4]
      VirtualAddress* : DWORD;
      Size* : DWORD
    END;

    IMAGE_DATA_DIRECTORY* = _IMAGE_DATA_DIRECTORY_struct;

    PIMAGE_DATA_DIRECTORY* = POINTER TO _IMAGE_DATA_DIRECTORY_struct;

    _IMAGE_OPTIONAL_HEADER_struct* = RECORD [ALIGN4]
      Magic* : WORD;
      MajorLinkerVersion* : BYTE;
      MinorLinkerVersion* : BYTE;
      SizeOfCode* : DWORD;
      SizeOfInitializedData* : DWORD;
      SizeOfUninitializedData* : DWORD;
      AddressOfEntryPoint* : DWORD;
      BaseOfCode* : DWORD;
      BaseOfData* : DWORD;
      ImageBase* : DWORD;
      SectionAlignment* : DWORD;
      FileAlignment* : DWORD;
      MajorOperatingSystemVersion* : WORD;
      MinorOperatingSystemVersion* : WORD;
      MajorImageVersion* : WORD;
      MinorImageVersion* : WORD;
      MajorSubsystemVersion* : WORD;
      MinorSubsystemVersion* : WORD;
      Win32VersionValue* : DWORD;
      SizeOfImage* : DWORD;
      SizeOfHeaders* : DWORD;
      CheckSum* : DWORD;
      Subsystem* : WORD;
      DllCharacteristics* : WORD;
      SizeOfStackReserve* : DWORD;
      SizeOfStackCommit* : DWORD;
      SizeOfHeapReserve* : DWORD;
      SizeOfHeapCommit* : DWORD;
      LoaderFlags* : DWORD;
      NumberOfRvaAndSizes* : DWORD;
      DataDirectory* : ARRAY 16 OF IMAGE_DATA_DIRECTORY
    END;

    IMAGE_OPTIONAL_HEADER32* = _IMAGE_OPTIONAL_HEADER_struct;

    PIMAGE_OPTIONAL_HEADER32* = POINTER TO _IMAGE_OPTIONAL_HEADER_struct;

    _IMAGE_ROM_OPTIONAL_HEADER_struct* = RECORD [ALIGN4]
      Magic* : WORD;
      MajorLinkerVersion* : BYTE;
      MinorLinkerVersion* : BYTE;
      SizeOfCode* : DWORD;
      SizeOfInitializedData* : DWORD;
      SizeOfUninitializedData* : DWORD;
      AddressOfEntryPoint* : DWORD;
      BaseOfCode* : DWORD;
      BaseOfData* : DWORD;
      BaseOfBss* : DWORD;
      GprMask* : DWORD;
      CprMask* : ARRAY 4 OF DWORD;
      GpValue* : DWORD
    END;

    IMAGE_ROM_OPTIONAL_HEADER* = _IMAGE_ROM_OPTIONAL_HEADER_struct;

    PIMAGE_ROM_OPTIONAL_HEADER* = POINTER TO _IMAGE_ROM_OPTIONAL_HEADER_struct;

    _IMAGE_OPTIONAL_HEADER64_struct* = RECORD [ALIGN4]
      Magic* : WORD;
      MajorLinkerVersion* : BYTE;
      MinorLinkerVersion* : BYTE;
      SizeOfCode* : DWORD;
      SizeOfInitializedData* : DWORD;
      SizeOfUninitializedData* : DWORD;
      AddressOfEntryPoint* : DWORD;
      BaseOfCode* : DWORD;
      ImageBase* : ULONGLONG;
      SectionAlignment* : DWORD;
      FileAlignment* : DWORD;
      MajorOperatingSystemVersion* : WORD;
      MinorOperatingSystemVersion* : WORD;
      MajorImageVersion* : WORD;
      MinorImageVersion* : WORD;
      MajorSubsystemVersion* : WORD;
      MinorSubsystemVersion* : WORD;
      Win32VersionValue* : DWORD;
      SizeOfImage* : DWORD;
      SizeOfHeaders* : DWORD;
      CheckSum* : DWORD;
      Subsystem* : WORD;
      DllCharacteristics* : WORD;
      SizeOfStackReserve* : ULONGLONG;
      SizeOfStackCommit* : ULONGLONG;
      SizeOfHeapReserve* : ULONGLONG;
      SizeOfHeapCommit* : ULONGLONG;
      LoaderFlags* : DWORD;
      NumberOfRvaAndSizes* : DWORD;
      DataDirectory* : ARRAY 16 OF IMAGE_DATA_DIRECTORY
    END;

    IMAGE_OPTIONAL_HEADER64* = _IMAGE_OPTIONAL_HEADER64_struct;

    PIMAGE_OPTIONAL_HEADER64* = POINTER TO _IMAGE_OPTIONAL_HEADER64_struct;

    IMAGE_OPTIONAL_HEADER* = IMAGE_OPTIONAL_HEADER32;

    PIMAGE_OPTIONAL_HEADER* = PIMAGE_OPTIONAL_HEADER32;

    _IMAGE_NT_HEADERS64_struct* = RECORD [ALIGN4]
      Signature* : DWORD;
      FileHeader* : IMAGE_FILE_HEADER;
      OptionalHeader* : IMAGE_OPTIONAL_HEADER64
    END;

    IMAGE_NT_HEADERS64* = _IMAGE_NT_HEADERS64_struct;

    PIMAGE_NT_HEADERS64* = POINTER TO _IMAGE_NT_HEADERS64_struct;

    _IMAGE_NT_HEADERS_struct* = RECORD [ALIGN4]
      Signature* : DWORD;
      FileHeader* : IMAGE_FILE_HEADER;
      OptionalHeader* : IMAGE_OPTIONAL_HEADER32
    END;

    IMAGE_NT_HEADERS32* = _IMAGE_NT_HEADERS_struct;

    PIMAGE_NT_HEADERS32* = POINTER TO _IMAGE_NT_HEADERS_struct;

    _IMAGE_ROM_HEADERS_struct* = RECORD [ALIGN4]
      FileHeader* : IMAGE_FILE_HEADER;
      OptionalHeader* : IMAGE_ROM_OPTIONAL_HEADER
    END;

    IMAGE_ROM_HEADERS* = _IMAGE_ROM_HEADERS_struct;

    PIMAGE_ROM_HEADERS* = POINTER TO _IMAGE_ROM_HEADERS_struct;

    IMAGE_NT_HEADERS* = IMAGE_NT_HEADERS32;

    PIMAGE_NT_HEADERS* = PIMAGE_NT_HEADERS32;

    _IMAGE_SECTION_HEADER_struct* = RECORD [ALIGN4]
      Name* : ARRAY 8 OF BYTE;
      Misc* : RECORD [UNION]
        PhysicalAddress* : DWORD;
        VirtualSize* : DWORD
      END;
      VirtualAddress* : DWORD;
      SizeOfRawData* : DWORD;
      PointerToRawData* : DWORD;
      PointerToRelocations* : DWORD;
      PointerToLinenumbers* : DWORD;
      NumberOfRelocations* : WORD;
      NumberOfLinenumbers* : WORD;
      Characteristics* : DWORD
    END;

    IMAGE_SECTION_HEADER* = _IMAGE_SECTION_HEADER_struct;

    PIMAGE_SECTION_HEADER* = POINTER TO _IMAGE_SECTION_HEADER_struct;

    _IMAGE_SYMBOL_struct* = RECORD [ALIGN2]
      N* : RECORD [UNION]
        ShortName* : ARRAY 8 OF BYTE;
        Name* : RECORD [ALIGN2]
          Short* : DWORD;
          Long* : DWORD
        END;
        LongName* : ARRAY 2 OF PBYTE
      END;
      Value* : DWORD;
      SectionNumber* : SHORT;
      Type* : WORD;
      StorageClass* : BYTE;
      NumberOfAuxSymbols* : BYTE
    END;

    IMAGE_SYMBOL* = _IMAGE_SYMBOL_struct;

    PIMAGE_SYMBOL* = POINTER TO IMAGE_SYMBOL;

    _IMAGE_AUX_SYMBOL_union* = RECORD [UNION]
      Sym* : RECORD [ALIGN2]
        TagIndex* : DWORD;
        Misc* : RECORD [UNION]
          LnSz* : RECORD [ALIGN2]
            Linenumber* : WORD;
            Size* : WORD
          END;
          TotalSize* : DWORD
        END;
        FcnAry* : RECORD [UNION]
          Function* : RECORD [ALIGN2]
            PointerToLinenumber* : DWORD;
            PointerToNextFunction* : DWORD
          END;
          Array* : RECORD [ALIGN2]
            Dimension* : ARRAY 4 OF WORD
          END
        END;
        TvIndex* : WORD
      END;
      File* : RECORD [ALIGN2]
        Name* : ARRAY 18 OF BYTE
      END;
      Section* : RECORD [ALIGN2]
        Length* : DWORD;
        NumberOfRelocations* : WORD;
        NumberOfLinenumbers* : WORD;
        CheckSum* : DWORD;
        Number* : SHORT;
        Selection* : BYTE
      END
    END;

    IMAGE_AUX_SYMBOL* = _IMAGE_AUX_SYMBOL_union;

    PIMAGE_AUX_SYMBOL* = POINTER TO IMAGE_AUX_SYMBOL;

    _IMAGE_RELOCATION_struct* = RECORD [ALIGN2]
      noname0* : RECORD [UNION]
        VirtualAddress* : DWORD;
        RelocCount* : DWORD
      END;
      SymbolTableIndex* : DWORD;
      Type* : WORD
    END;

    IMAGE_RELOCATION* = _IMAGE_RELOCATION_struct;

    PIMAGE_RELOCATION* = POINTER TO IMAGE_RELOCATION;

    _IMAGE_LINENUMBER_struct* = RECORD [ALIGN2]
      Type* : RECORD [UNION]
        SymbolTableIndex* : DWORD;
        VirtualAddress* : DWORD
      END;
      Linenumber* : WORD
    END;

    IMAGE_LINENUMBER* = _IMAGE_LINENUMBER_struct;

    PIMAGE_LINENUMBER* = POINTER TO IMAGE_LINENUMBER;

    _IMAGE_BASE_RELOCATION_struct* = RECORD [ALIGN4]
      VirtualAddress* : DWORD;
      SizeOfBlock* : DWORD
    END;

    IMAGE_BASE_RELOCATION* = _IMAGE_BASE_RELOCATION_struct;

    PIMAGE_BASE_RELOCATION* = POINTER TO IMAGE_BASE_RELOCATION;

    _IMAGE_ARCHIVE_MEMBER_HEADER_struct* = RECORD [ALIGN4]
      Name* : ARRAY 16 OF BYTE;
      Date* : ARRAY 12 OF BYTE;
      UserID* : ARRAY 6 OF BYTE;
      GroupID* : ARRAY 6 OF BYTE;
      Mode* : ARRAY 8 OF BYTE;
      Size* : ARRAY 10 OF BYTE;
      EndHeader* : ARRAY 2 OF BYTE
    END;

    IMAGE_ARCHIVE_MEMBER_HEADER* = _IMAGE_ARCHIVE_MEMBER_HEADER_struct;

    PIMAGE_ARCHIVE_MEMBER_HEADER* = POINTER TO _IMAGE_ARCHIVE_MEMBER_HEADER_struct;

    _IMAGE_EXPORT_DIRECTORY_struct* = RECORD [ALIGN4]
      Characteristics* : DWORD;
      TimeDateStamp* : DWORD;
      MajorVersion* : WORD;
      MinorVersion* : WORD;
      Name* : DWORD;
      Base* : DWORD;
      NumberOfFunctions* : DWORD;
      NumberOfNames* : DWORD;
      AddressOfFunctions* : DWORD;
      AddressOfNames* : DWORD;
      AddressOfNameOrdinals* : DWORD
    END;

    IMAGE_EXPORT_DIRECTORY* = _IMAGE_EXPORT_DIRECTORY_struct;

    PIMAGE_EXPORT_DIRECTORY* = POINTER TO _IMAGE_EXPORT_DIRECTORY_struct;

    _IMAGE_IMPORT_BY_NAME_struct* = RECORD [ALIGN4]
      Hint* : WORD;
      Name* : ARRAY 1 OF BYTE
    END;

    IMAGE_IMPORT_BY_NAME* = _IMAGE_IMPORT_BY_NAME_struct;

    PIMAGE_IMPORT_BY_NAME* = POINTER TO _IMAGE_IMPORT_BY_NAME_struct;

    _IMAGE_THUNK_DATA64_struct* = RECORD [ALIGN8]
      u1* : RECORD [UNION]
        ForwarderString* : PBYTE;
        Function* : PDWORD;
        Ordinal* : ULONGLONG;
        AddressOfData* : PIMAGE_IMPORT_BY_NAME
      END
    END;

    IMAGE_THUNK_DATA64* = _IMAGE_THUNK_DATA64_struct;

    PIMAGE_THUNK_DATA64* = POINTER TO IMAGE_THUNK_DATA64;

    _IMAGE_THUNK_DATA32_struct* = RECORD [ALIGN4]
      u1* : RECORD [UNION]
        ForwarderString* : PBYTE;
        Function* : PDWORD;
        Ordinal* : DWORD;
        AddressOfData* : PIMAGE_IMPORT_BY_NAME
      END
    END;

    IMAGE_THUNK_DATA32* = _IMAGE_THUNK_DATA32_struct;

    PIMAGE_THUNK_DATA32* = POINTER TO IMAGE_THUNK_DATA32;

    PIMAGE_TLS_CALLBACK* = PROCEDURE (DllHandle : PVOID; Reason : DWORD; Reserved : PVOID);

    _IMAGE_TLS_DIRECTORY64_struct* = RECORD [ALIGN4]
      StartAddressOfRawData* : ULONGLONG;
      EndAddressOfRawData* : ULONGLONG;
      AddressOfIndex* : PDWORD;
      AddressOfCallBacks* : POINTER TO ARRAY OF PIMAGE_TLS_CALLBACK;
      SizeOfZeroFill* : DWORD;
      Characteristics* : DWORD
    END;

    IMAGE_TLS_DIRECTORY64* = _IMAGE_TLS_DIRECTORY64_struct;

    PIMAGE_TLS_DIRECTORY64* = POINTER TO IMAGE_TLS_DIRECTORY64;

    _IMAGE_TLS_DIRECTORY32_struct* = RECORD [ALIGN4]
      StartAddressOfRawData* : DWORD;
      EndAddressOfRawData* : DWORD;
      AddressOfIndex* : PDWORD;
      AddressOfCallBacks* : POINTER TO ARRAY OF PIMAGE_TLS_CALLBACK;
      SizeOfZeroFill* : DWORD;
      Characteristics* : DWORD
    END;

    IMAGE_TLS_DIRECTORY32* = _IMAGE_TLS_DIRECTORY32_struct;

    PIMAGE_TLS_DIRECTORY32* = POINTER TO IMAGE_TLS_DIRECTORY32;

    IMAGE_THUNK_DATA* = IMAGE_THUNK_DATA32;

    PIMAGE_THUNK_DATA* = PIMAGE_THUNK_DATA32;

    IMAGE_TLS_DIRECTORY* = IMAGE_TLS_DIRECTORY32;

    PIMAGE_TLS_DIRECTORY* = PIMAGE_TLS_DIRECTORY32;

    _IMAGE_IMPORT_DESCRIPTOR_struct* = RECORD [ALIGN4]
      noname0* : RECORD [UNION]
        Characteristics* : DWORD;
        OriginalFirstThunk* : DWORD
      END;
      TimeDateStamp* : DWORD;
      ForwarderChain* : DWORD;
      Name* : DWORD;
      FirstThunk* : DWORD
    END;

    IMAGE_IMPORT_DESCRIPTOR* = _IMAGE_IMPORT_DESCRIPTOR_struct;

    PIMAGE_IMPORT_DESCRIPTOR* = POINTER TO IMAGE_IMPORT_DESCRIPTOR;

    _IMAGE_BOUND_IMPORT_DESCRIPTOR_struct* = RECORD [ALIGN4]
      TimeDateStamp* : DWORD;
      OffsetModuleName* : WORD;
      NumberOfModuleForwarderRefs* : WORD
    END;

    IMAGE_BOUND_IMPORT_DESCRIPTOR* = _IMAGE_BOUND_IMPORT_DESCRIPTOR_struct;

    PIMAGE_BOUND_IMPORT_DESCRIPTOR* = POINTER TO _IMAGE_BOUND_IMPORT_DESCRIPTOR_struct;

    _IMAGE_BOUND_FORWARDER_REF_struct* = RECORD [ALIGN4]
      TimeDateStamp* : DWORD;
      OffsetModuleName* : WORD;
      Reserved* : WORD
    END;

    IMAGE_BOUND_FORWARDER_REF* = _IMAGE_BOUND_FORWARDER_REF_struct;

    PIMAGE_BOUND_FORWARDER_REF* = POINTER TO _IMAGE_BOUND_FORWARDER_REF_struct;

    _IMAGE_STUB_DIRECTORY_struct* = RECORD [ALIGN4]
      SecondaryImportAddressTable* : DWORD;
      ExpectedISA* : ARRAY 2 OF WORD;
      StubAddressTable* : ARRAY 2 OF DWORD
    END;

    IMAGE_STUB_DIRECTORY* = _IMAGE_STUB_DIRECTORY_struct;

    PIMAGE_STUB_DIRECTORY* = POINTER TO _IMAGE_STUB_DIRECTORY_struct;

    _IMAGE_RESOURCE_DIRECTORY_struct* = RECORD [ALIGN4]
      Characteristics* : DWORD;
      TimeDateStamp* : DWORD;
      MajorVersion* : WORD;
      MinorVersion* : WORD;
      NumberOfNamedEntries* : WORD;
      NumberOfIdEntries* : WORD
    END;

    IMAGE_RESOURCE_DIRECTORY* = _IMAGE_RESOURCE_DIRECTORY_struct;

    PIMAGE_RESOURCE_DIRECTORY* = POINTER TO _IMAGE_RESOURCE_DIRECTORY_struct;

    _IMAGE_RESOURCE_DIRECTORY_ENTRY_struct* = RECORD [ALIGN4]
      noname0* : RECORD [UNION]
        noname0* : RECORD [ALIGN4]
          NameOffset* : DWORD;
          NameIsString* : DWORD
        END;
        Name* : DWORD;
        Id* : WORD
      END;
      noname1* : RECORD [UNION]
        OffsetToData* : DWORD;
        noname0* : RECORD [ALIGN4]
          OffsetToDirectory* : DWORD;
          DataIsDirectory* : DWORD
        END
      END
    END;

    IMAGE_RESOURCE_DIRECTORY_ENTRY* = _IMAGE_RESOURCE_DIRECTORY_ENTRY_struct;

    PIMAGE_RESOURCE_DIRECTORY_ENTRY* = POINTER TO _IMAGE_RESOURCE_DIRECTORY_ENTRY_struct;

    _IMAGE_RESOURCE_DIRECTORY_STRING_struct* = RECORD [ALIGN4]
      Length* : WORD;
      NameString* : ARRAY 1 OF CHAR
    END;

    IMAGE_RESOURCE_DIRECTORY_STRING* = _IMAGE_RESOURCE_DIRECTORY_STRING_struct;

    PIMAGE_RESOURCE_DIRECTORY_STRING* = POINTER TO _IMAGE_RESOURCE_DIRECTORY_STRING_struct;

    _IMAGE_RESOURCE_DIR_STRING_U_struct* = RECORD [ALIGN4]
      Length* : WORD;
      NameString* : ARRAY 1 OF WCHAR
    END;

    IMAGE_RESOURCE_DIR_STRING_U* = _IMAGE_RESOURCE_DIR_STRING_U_struct;

    PIMAGE_RESOURCE_DIR_STRING_U* = POINTER TO _IMAGE_RESOURCE_DIR_STRING_U_struct;

    _IMAGE_RESOURCE_DATA_ENTRY_struct* = RECORD [ALIGN4]
      OffsetToData* : DWORD;
      Size* : DWORD;
      CodePage* : DWORD;
      Reserved* : DWORD
    END;

    IMAGE_RESOURCE_DATA_ENTRY* = _IMAGE_RESOURCE_DATA_ENTRY_struct;

    PIMAGE_RESOURCE_DATA_ENTRY* = POINTER TO _IMAGE_RESOURCE_DATA_ENTRY_struct;

    _IMAGE_LOAD_CONFIG_DIRECTORY_struct* = RECORD [ALIGN4]
      Characteristics* : DWORD;
      TimeDateStamp* : DWORD;
      MajorVersion* : WORD;
      MinorVersion* : WORD;
      GlobalFlagsClear* : DWORD;
      GlobalFlagsSet* : DWORD;
      CriticalSectionDefaultTimeout* : DWORD;
      DeCommitFreeBlockThreshold* : DWORD;
      DeCommitTotalFreeThreshold* : DWORD;
      LockPrefixTable* : PVOID;
      MaximumAllocationSize* : DWORD;
      VirtualMemoryThreshold* : DWORD;
      ProcessHeapFlags* : DWORD;
      ProcessAffinityMask* : DWORD;
      CSDVersion* : WORD;
      Reserved1* : WORD;
      EditList* : PVOID;
      Reserved* : ARRAY 1 OF DWORD
    END;

    IMAGE_LOAD_CONFIG_DIRECTORY* = _IMAGE_LOAD_CONFIG_DIRECTORY_struct;

    PIMAGE_LOAD_CONFIG_DIRECTORY* = POINTER TO _IMAGE_LOAD_CONFIG_DIRECTORY_struct;

    _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY_struct* = RECORD [ALIGN4]
      BeginAddress* : DWORD;
      EndAddress* : DWORD;
      UnwindInfoAddress* : DWORD
    END;

    IMAGE_IA64_RUNTIME_FUNCTION_ENTRY* = _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY_struct;

    PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY* = POINTER TO _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY_struct;

    _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY_struct* = RECORD [ALIGN4]
      BeginAddress* : DWORD;
      EndAddress* : DWORD;
      ExceptionHandler* : DWORD;
      HandlerData* : DWORD;
      PrologEndAddress* : DWORD
    END;

    IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY* = _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY_struct;

    PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY* = POINTER TO _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY_struct;

    _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY_struct* = RECORD [ALIGN4]
      BeginAddress* : ULONGLONG;
      EndAddress* : ULONGLONG;
      ExceptionHandler* : ULONGLONG;
      HandlerData* : ULONGLONG;
      PrologEndAddress* : ULONGLONG
    END;

    IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY* = _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY_struct;

    PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY* = POINTER TO _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY_struct;

    IMAGE_AXP64_RUNTIME_FUNCTION_ENTRY* = IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

    PIMAGE_AXP64_RUNTIME_FUNCTION_ENTRY* = PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

    _IMAGE_CE_RUNTIME_FUNCTION_ENTRY_struct* = RECORD [ALIGN4]
      FuncStart* : DWORD;
      PrologLen* : DWORD;
      FuncLen* : DWORD;
      ThirtyTwoBit* : DWORD;
      ExceptionFlag* : DWORD
    END;

    IMAGE_CE_RUNTIME_FUNCTION_ENTRY* = _IMAGE_CE_RUNTIME_FUNCTION_ENTRY_struct;

    PIMAGE_CE_RUNTIME_FUNCTION_ENTRY* = POINTER TO _IMAGE_CE_RUNTIME_FUNCTION_ENTRY_struct;

    IMAGE_RUNTIME_FUNCTION_ENTRY* = IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

    PIMAGE_RUNTIME_FUNCTION_ENTRY* = PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

    _IMAGE_DEBUG_DIRECTORY_struct* = RECORD [ALIGN4]
      Characteristics* : DWORD;
      TimeDateStamp* : DWORD;
      MajorVersion* : WORD;
      MinorVersion* : WORD;
      Type* : DWORD;
      SizeOfData* : DWORD;
      AddressOfRawData* : DWORD;
      PointerToRawData* : DWORD
    END;

    IMAGE_DEBUG_DIRECTORY* = _IMAGE_DEBUG_DIRECTORY_struct;

    PIMAGE_DEBUG_DIRECTORY* = POINTER TO _IMAGE_DEBUG_DIRECTORY_struct;

    _IMAGE_COFF_SYMBOLS_HEADER_struct* = RECORD [ALIGN4]
      NumberOfSymbols* : DWORD;
      LvaToFirstSymbol* : DWORD;
      NumberOfLinenumbers* : DWORD;
      LvaToFirstLinenumber* : DWORD;
      RvaToFirstByteOfCode* : DWORD;
      RvaToLastByteOfCode* : DWORD;
      RvaToFirstByteOfData* : DWORD;
      RvaToLastByteOfData* : DWORD
    END;

    IMAGE_COFF_SYMBOLS_HEADER* = _IMAGE_COFF_SYMBOLS_HEADER_struct;

    PIMAGE_COFF_SYMBOLS_HEADER* = POINTER TO _IMAGE_COFF_SYMBOLS_HEADER_struct;

    _FPO_DATA_struct* = RECORD [ALIGN4]
      ulOffStart* : DWORD;
      cbProcSize* : DWORD;
      cdwLocals* : DWORD;
      cdwParams* : WORD;
      cbProlog* : WORD;
      cbRegs* : WORD;
      fHasSEH* : WORD;
      fUseBP* : WORD;
      reserved* : WORD;
      cbFrame* : WORD
    END;

    FPO_DATA* = _FPO_DATA_struct;

    PFPO_DATA* = POINTER TO _FPO_DATA_struct;

    _IMAGE_DEBUG_MISC_struct* = RECORD [ALIGN4]
      DataType* : DWORD;
      Length* : DWORD;
      Unicode* : BOOLEAN;
      Reserved* : ARRAY 3 OF BYTE;
      Data* : ARRAY 1 OF BYTE
    END;

    IMAGE_DEBUG_MISC* = _IMAGE_DEBUG_MISC_struct;

    PIMAGE_DEBUG_MISC* = POINTER TO _IMAGE_DEBUG_MISC_struct;

    _IMAGE_FUNCTION_ENTRY_struct* = RECORD [ALIGN4]
      StartingAddress* : DWORD;
      EndingAddress* : DWORD;
      EndOfPrologue* : DWORD
    END;

    IMAGE_FUNCTION_ENTRY* = _IMAGE_FUNCTION_ENTRY_struct;

    PIMAGE_FUNCTION_ENTRY* = POINTER TO _IMAGE_FUNCTION_ENTRY_struct;

    _IMAGE_FUNCTION_ENTRY64_struct* = RECORD [ALIGN4]
      StartingAddress* : ULONGLONG;
      EndingAddress* : ULONGLONG;
      EndOfPrologue* : ULONGLONG
    END;

    IMAGE_FUNCTION_ENTRY64* = _IMAGE_FUNCTION_ENTRY64_struct;

    PIMAGE_FUNCTION_ENTRY64* = POINTER TO _IMAGE_FUNCTION_ENTRY64_struct;

    _IMAGE_SEPARATE_DEBUG_HEADER_struct* = RECORD [ALIGN4]
      Signature* : WORD;
      Flags* : WORD;
      Machine* : WORD;
      Characteristics* : WORD;
      TimeDateStamp* : DWORD;
      CheckSum* : DWORD;
      ImageBase* : DWORD;
      SizeOfImage* : DWORD;
      NumberOfSections* : DWORD;
      ExportedNamesSize* : DWORD;
      DebugDirectorySize* : DWORD;
      SectionAlignment* : DWORD;
      Reserved* : ARRAY 2 OF DWORD
    END;

    IMAGE_SEPARATE_DEBUG_HEADER* = _IMAGE_SEPARATE_DEBUG_HEADER_struct;

    PIMAGE_SEPARATE_DEBUG_HEADER* = POINTER TO _IMAGE_SEPARATE_DEBUG_HEADER_struct;

    _ImageArchitectureHeader_struct* = RECORD [ALIGN4]
      AmaskValue* : LONGINT;
      noname0* : LONGINT;
      AmaskShift* : LONGINT;
      noname1* : LONGINT;
      FirstEntryRVA* : DWORD
    END;

    IMAGE_ARCHITECTURE_HEADER* = _ImageArchitectureHeader_struct;

    PIMAGE_ARCHITECTURE_HEADER* = POINTER TO _ImageArchitectureHeader_struct;

    _ImageArchitectureEntry_struct* = RECORD [ALIGN4]
      FixupInstRVA* : DWORD;
      NewInst* : DWORD
    END;

    IMAGE_ARCHITECTURE_ENTRY* = _ImageArchitectureEntry_struct;

    PIMAGE_ARCHITECTURE_ENTRY* = POINTER TO _ImageArchitectureEntry_struct;

    IMPORT_OBJECT_HEADER_struct* = RECORD [notag]
      Sig1* : WORD;
      Sig2* : WORD;
      Version* : WORD;
      Machine* : WORD;
      TimeDateStamp* : DWORD;
      SizeOfData* : DWORD;
      noname0* : RECORD [UNION]
        Ordinal* : WORD;
        Hint* : WORD
      END;
      Type* : WORD;
      NameType* : WORD;
      Reserved* : WORD
    END;

    IMPORT_OBJECT_HEADER* = IMPORT_OBJECT_HEADER_struct;

    IMPORT_OBJECT_TYPE* = EXCEPTION_DISPOSITION;

    IMPORT_OBJECT_NAME_TYPE* = EXCEPTION_DISPOSITION;

    size_t* = LONGINT;

    _MESSAGE_RESOURCE_ENTRY_struct* = RECORD [notag]
      Length* : WORD;
      Flags* : WORD;
      Text* : ARRAY 1 OF BYTE
    END;

    MESSAGE_RESOURCE_ENTRY* = _MESSAGE_RESOURCE_ENTRY_struct;

    PMESSAGE_RESOURCE_ENTRY* = POINTER TO _MESSAGE_RESOURCE_ENTRY_struct;

    _MESSAGE_RESOURCE_BLOCK_struct* = RECORD [notag]
      LowId* : DWORD;
      HighId* : DWORD;
      OffsetToEntries* : DWORD
    END;

    MESSAGE_RESOURCE_BLOCK* = _MESSAGE_RESOURCE_BLOCK_struct;

    PMESSAGE_RESOURCE_BLOCK* = POINTER TO _MESSAGE_RESOURCE_BLOCK_struct;

    _MESSAGE_RESOURCE_DATA_struct* = RECORD [notag]
      NumberOfBlocks* : DWORD;
      Blocks* : ARRAY 1 OF MESSAGE_RESOURCE_BLOCK
    END;

    MESSAGE_RESOURCE_DATA* = _MESSAGE_RESOURCE_DATA_struct;

    PMESSAGE_RESOURCE_DATA* = POINTER TO _MESSAGE_RESOURCE_DATA_struct;

    PRTL_CRITICAL_SECTION* = POINTER TO _RTL_CRITICAL_SECTION_struct;

    _RTL_CRITICAL_SECTION_DEBUG_struct* = RECORD [notag]
      Type* : WORD;
      CreatorBackTraceIndex* : WORD;
      CriticalSection* : PRTL_CRITICAL_SECTION;
      ProcessLocksList* : LIST_ENTRY;
      EntryCount* : DWORD;
      ContentionCount* : DWORD;
      Spare* : ARRAY 2 OF DWORD
    END;

    RTL_CRITICAL_SECTION_DEBUG* = _RTL_CRITICAL_SECTION_DEBUG_struct;

    PRTL_CRITICAL_SECTION_DEBUG* = POINTER TO _RTL_CRITICAL_SECTION_DEBUG_struct;

    RTL_RESOURCE_DEBUG* = _RTL_CRITICAL_SECTION_DEBUG_struct;

    PRTL_RESOURCE_DEBUG* = PRTL_CRITICAL_SECTION_DEBUG;

    _RTL_CRITICAL_SECTION_struct* = RECORD [notag]
      DebugInfo* : PRTL_CRITICAL_SECTION_DEBUG;
      LockCount* : LONG;
      RecursionCount* : LONG;
      OwningThread* : HANDLE;
      LockSemaphore* : HANDLE;
      SpinCount* : DWORD
    END;

    RTL_CRITICAL_SECTION* = _RTL_CRITICAL_SECTION_struct;

    WAITORTIMERCALLBACKFUNC* = PROCEDURE (p0 : PVOID; p1 : BOOLEAN);

    WORKERCALLBACKFUNC* = PROCEDURE (p0 : PVOID);

    _EVENTLOGRECORD_struct* = RECORD [notag]
      Length* : DWORD;
      Reserved* : DWORD;
      RecordNumber* : DWORD;
      TimeGenerated* : DWORD;
      TimeWritten* : DWORD;
      EventID* : DWORD;
      EventType* : WORD;
      NumStrings* : WORD;
      EventCategory* : WORD;
      ReservedFlags* : WORD;
      ClosingRecordNumber* : DWORD;
      StringOffset* : DWORD;
      UserSidLength* : DWORD;
      UserSidOffset* : DWORD;
      DataLength* : DWORD;
      DataOffset* : DWORD
    END;

    EVENTLOGRECORD* = _EVENTLOGRECORD_struct;

    PEVENTLOGRECORD* = POINTER TO _EVENTLOGRECORD_struct;

    _EVENTSFORLOGFILE_struct* = RECORD [notag]
      ulSize* : DWORD;
      szLogicalLogFile* : ARRAY 256 OF WCHAR;
      ulNumRecords* : DWORD;
      pEventLogRecords* : ARRAY 1 OF EVENTLOGRECORD
    END;

    EVENTSFORLOGFILE* = _EVENTSFORLOGFILE_struct;

    PEVENTSFORLOGFILE* = POINTER TO _EVENTSFORLOGFILE_struct;

    _PACKEDEVENTINFO_struct* = RECORD [notag]
      ulSize* : DWORD;
      ulNumEventsForLogFile* : DWORD;
      ulOffsets* : ARRAY 1 OF DWORD
    END;

    PACKEDEVENTINFO* = _PACKEDEVENTINFO_struct;

    PPACKEDEVENTINFO* = POINTER TO _PACKEDEVENTINFO_struct;

    SERVICE_NODE_TYPE* = EXCEPTION_DISPOSITION;

    SERVICE_LOAD_TYPE* = EXCEPTION_DISPOSITION;

    SERVICE_ERROR_TYPE* = EXCEPTION_DISPOSITION;

    _TAPE_ERASE_struct* = RECORD [notag]
      Type* : DWORD;
      Immediate* : BOOLEAN
    END;

    TAPE_ERASE* = _TAPE_ERASE_struct;

    PTAPE_ERASE* = POINTER TO _TAPE_ERASE_struct;

    _TAPE_PREPARE_struct* = RECORD [notag]
      Operation* : DWORD;
      Immediate* : BOOLEAN
    END;

    TAPE_PREPARE* = _TAPE_PREPARE_struct;

    PTAPE_PREPARE* = POINTER TO _TAPE_PREPARE_struct;

    _TAPE_WRITE_MARKS_struct* = RECORD [notag]
      Type* : DWORD;
      Count* : DWORD;
      Immediate* : BOOLEAN
    END;

    TAPE_WRITE_MARKS* = _TAPE_WRITE_MARKS_struct;

    PTAPE_WRITE_MARKS* = POINTER TO _TAPE_WRITE_MARKS_struct;

    _TAPE_GET_POSITION_struct* = RECORD [notag]
      Type* : DWORD;
      Partition* : DWORD;
      Offset* : LARGE_INTEGER
    END;

    TAPE_GET_POSITION* = _TAPE_GET_POSITION_struct;

    PTAPE_GET_POSITION* = POINTER TO _TAPE_GET_POSITION_struct;

    _TAPE_SET_POSITION_struct* = RECORD [notag]
      Method* : DWORD;
      Partition* : DWORD;
      Offset* : LARGE_INTEGER;
      Immediate* : BOOLEAN
    END;

    TAPE_SET_POSITION* = _TAPE_SET_POSITION_struct;

    PTAPE_SET_POSITION* = POINTER TO _TAPE_SET_POSITION_struct;

    _TAPE_GET_DRIVE_PARAMETERS_struct* = RECORD [notag]
      ECC* : BOOLEAN;
      Compression* : BOOLEAN;
      DataPadding* : BOOLEAN;
      ReportSetmarks* : BOOLEAN;
      DefaultBlockSize* : DWORD;
      MaximumBlockSize* : DWORD;
      MinimumBlockSize* : DWORD;
      MaximumPartitionCount* : DWORD;
      FeaturesLow* : DWORD;
      FeaturesHigh* : DWORD;
      EOTWarningZoneSize* : DWORD
    END;

    TAPE_GET_DRIVE_PARAMETERS* = _TAPE_GET_DRIVE_PARAMETERS_struct;

    PTAPE_GET_DRIVE_PARAMETERS* = POINTER TO _TAPE_GET_DRIVE_PARAMETERS_struct;

    _TAPE_SET_DRIVE_PARAMETERS_struct* = RECORD [notag]
      ECC* : BOOLEAN;
      Compression* : BOOLEAN;
      DataPadding* : BOOLEAN;
      ReportSetmarks* : BOOLEAN;
      EOTWarningZoneSize* : DWORD
    END;

    TAPE_SET_DRIVE_PARAMETERS* = _TAPE_SET_DRIVE_PARAMETERS_struct;

    PTAPE_SET_DRIVE_PARAMETERS* = POINTER TO _TAPE_SET_DRIVE_PARAMETERS_struct;

    _TAPE_GET_MEDIA_PARAMETERS_struct* = RECORD [notag]
      Capacity* : LARGE_INTEGER;
      Remaining* : LARGE_INTEGER;
      BlockSize* : DWORD;
      PartitionCount* : DWORD;
      WriteProtected* : BOOLEAN
    END;

    TAPE_GET_MEDIA_PARAMETERS* = _TAPE_GET_MEDIA_PARAMETERS_struct;

    PTAPE_GET_MEDIA_PARAMETERS* = POINTER TO _TAPE_GET_MEDIA_PARAMETERS_struct;

    _TAPE_SET_MEDIA_PARAMETERS_struct* = RECORD [notag]
      BlockSize* : DWORD
    END;

    TAPE_SET_MEDIA_PARAMETERS* = _TAPE_SET_MEDIA_PARAMETERS_struct;

    PTAPE_SET_MEDIA_PARAMETERS* = POINTER TO _TAPE_SET_MEDIA_PARAMETERS_struct;

    _TAPE_CREATE_PARTITION_struct* = RECORD [notag]
      Method* : DWORD;
      Count* : DWORD;
      Size* : DWORD
    END;

    TAPE_CREATE_PARTITION* = _TAPE_CREATE_PARTITION_struct;

    PTAPE_CREATE_PARTITION* = POINTER TO _TAPE_CREATE_PARTITION_struct;

    WPARAM* = UINT;

    LPARAM* = LONG;

    LRESULT* = LONG;

    HWND* = HANDLE;

    HHOOK* = HANDLE;

    ATOM* = WORD;

    SPHANDLE* = PHANDLE;

    LPHANDLE* = PHANDLE;

    HGLOBAL* = HANDLE;

    HLOCAL* = HANDLE;

    GLOBALHANDLE* = HANDLE;

    LOCALHANDLE* = HANDLE;

    FARPROC* = PROCEDURE () : LONGINT;

    NEARPROC* = FARPROC;

    PROC* = FARPROC;

    HGDIOBJ* = HANDLE;

    HACCEL* = HANDLE;

    HBITMAP* = HANDLE;

    HBRUSH* = HANDLE;

    HCOLORSPACE* = HANDLE;

    HDC* = HANDLE;

    HGLRC* = HANDLE;

    HDESK* = HANDLE;

    HENHMETAFILE* = HANDLE;

    HFONT* = HANDLE;

    HICON* = HANDLE;

    HMENU* = HANDLE;

    HMETAFILE* = HANDLE;

    HINSTANCE* = HANDLE;

    HMODULE* = HINSTANCE;

    HPALETTE* = HANDLE;

    HPEN* = HANDLE;

    HRGN* = HANDLE;

    HRSRC* = HANDLE;

    HSTR* = HANDLE;

    HTASK* = HANDLE;

    HWINSTA* = HANDLE;

    HKL* = HANDLE;

    HFILE* = LONGINT;

    HCURSOR* = HICON;

    COLORREF* = DWORD;

    LPCOLORREF* = PDWORD;

    tagRECT_struct* = RECORD [notag]
      left* : LONG;
      top* : LONG;
      right* : LONG;
      bottom* : LONG
    END;

    RECT* = tagRECT_struct;

    PRECT* = POINTER TO tagRECT_struct;

    NPRECT* = PRECT;

    LPRECT* = PRECT;

    LPCRECT* = POINTER TO RECT;

    _RECTL_struct* = RECORD [notag]
      left* : LONG;
      top* : LONG;
      right* : LONG;
      bottom* : LONG
    END;

    RECTL* = _RECTL_struct;

    PRECTL* = POINTER TO _RECTL_struct;

    LPRECTL* = PRECTL;

    LPCRECTL* = POINTER TO RECTL;

    tagPOINT_struct* = RECORD [notag]
      x* : LONG;
      y* : LONG
    END;

    POINT* = tagPOINT_struct;

    PPOINT* = POINTER TO tagPOINT_struct;

    NPPOINT* = PPOINT;

    LPPOINT* = PPOINT;

    _POINTL_struct* = RECORD [notag]
      x* : LONG;
      y* : LONG
    END;

    POINTL* = _POINTL_struct;

    PPOINTL* = POINTER TO _POINTL_struct;

    tagSIZE_struct* = RECORD [notag]
      cx* : LONG;
      cy* : LONG
    END;

    SIZE* = tagSIZE_struct;

    PSIZE* = POINTER TO tagSIZE_struct;

    LPSIZE* = PSIZE;

    SIZEL* = SIZE;

    PSIZEL* = POINTER TO SIZE;

    LPSIZEL* = PSIZEL;

    tagPOINTS_struct* = RECORD [notag]
      x* : SHORT;
      y* : SHORT
    END;

    POINTS* = tagPOINTS_struct;

    PPOINTS* = POINTER TO tagPOINTS_struct;

    LPPOINTS* = PPOINTS;

    _OVERLAPPED_struct* = RECORD [notag]
      Internal* : DWORD;
      InternalHigh* : DWORD;
      Offset* : DWORD;
      OffsetHigh* : DWORD;
      hEvent* : HANDLE
    END;

    OVERLAPPED* = _OVERLAPPED_struct;

    LPOVERLAPPED* = POINTER TO _OVERLAPPED_struct;

    _SECURITY_ATTRIBUTES_struct* = RECORD [notag]
      nLength* : DWORD;
      lpSecurityDescriptor* : LPVOID;
      bInheritHandle* : BOOL
    END;

    SECURITY_ATTRIBUTES* = _SECURITY_ATTRIBUTES_struct;

    PSECURITY_ATTRIBUTES* = POINTER TO _SECURITY_ATTRIBUTES_struct;

    LPSECURITY_ATTRIBUTES* = PSECURITY_ATTRIBUTES;

    _PROCESS_INFORMATION_struct* = RECORD [notag]
      hProcess* : HANDLE;
      hThread* : HANDLE;
      dwProcessId* : DWORD;
      dwThreadId* : DWORD
    END;

    PROCESS_INFORMATION* = _PROCESS_INFORMATION_struct;

    PPROCESS_INFORMATION* = POINTER TO _PROCESS_INFORMATION_struct;

    LPPROCESS_INFORMATION* = PPROCESS_INFORMATION;

    _FILETIME_struct* = RECORD [notag]
      dwLowDateTime* : DWORD;
      dwHighDateTime* : DWORD
    END;

    FILETIME* = _FILETIME_struct;

    PFILETIME* = POINTER TO _FILETIME_struct;

    LPFILETIME* = PFILETIME;

    _SYSTEMTIME_struct* = RECORD [notag]
      wYear* : WORD;
      wMonth* : WORD;
      wDayOfWeek* : WORD;
      wDay* : WORD;
      wHour* : WORD;
      wMinute* : WORD;
      wSecond* : WORD;
      wMilliseconds* : WORD
    END;

    SYSTEMTIME* = _SYSTEMTIME_struct;

    PSYSTEMTIME* = POINTER TO _SYSTEMTIME_struct;

    LPSYSTEMTIME* = PSYSTEMTIME;

    PTHREAD_START_ROUTINE* = PROCEDURE (lpThreadParameter : LPVOID) : DWORD;

    LPTHREAD_START_ROUTINE* = PTHREAD_START_ROUTINE;

    PFIBER_START_ROUTINE* = WORKERCALLBACKFUNC;

    LPFIBER_START_ROUTINE* = PFIBER_START_ROUTINE;

    CRITICAL_SECTION* = RTL_CRITICAL_SECTION;

    PCRITICAL_SECTION* = PRTL_CRITICAL_SECTION;

    LPCRITICAL_SECTION* = PRTL_CRITICAL_SECTION;

    CRITICAL_SECTION_DEBUG* = RTL_CRITICAL_SECTION_DEBUG;

    PCRITICAL_SECTION_DEBUG* = PRTL_CRITICAL_SECTION_DEBUG;

    LPCRITICAL_SECTION_DEBUG* = PRTL_CRITICAL_SECTION_DEBUG;

    LPLDT_ENTRY* = PLDT_ENTRY;

    _COMMPROP_struct* = RECORD [notag]
      wPacketLength* : WORD;
      wPacketVersion* : WORD;
      dwServiceMask* : DWORD;
      dwReserved1* : DWORD;
      dwMaxTxQueue* : DWORD;
      dwMaxRxQueue* : DWORD;
      dwMaxBaud* : DWORD;
      dwProvSubType* : DWORD;
      dwProvCapabilities* : DWORD;
      dwSettableParams* : DWORD;
      dwSettableBaud* : DWORD;
      wSettableData* : WORD;
      wSettableStopParity* : WORD;
      dwCurrentTxQueue* : DWORD;
      dwCurrentRxQueue* : DWORD;
      dwProvSpec1* : DWORD;
      dwProvSpec2* : DWORD;
      wcProvChar* : ARRAY 1 OF WCHAR
    END;

    COMMPROP* = _COMMPROP_struct;

    LPCOMMPROP* = POINTER TO _COMMPROP_struct;

    _COMSTAT_struct* = RECORD [notag]
      fCtsHold* : DWORD;
      fDsrHold* : DWORD;
      fRlsdHold* : DWORD;
      fXoffHold* : DWORD;
      fXoffSent* : DWORD;
      fEof* : DWORD;
      fTxim* : DWORD;
      fReserved* : DWORD;
      cbInQue* : DWORD;
      cbOutQue* : DWORD
    END;

    COMSTAT* = _COMSTAT_struct;

    LPCOMSTAT* = POINTER TO _COMSTAT_struct;

    _DCB_struct* = RECORD [notag]
      DCBlength* : DWORD;
      BaudRate* : DWORD;
      fBinary* : DWORD;
      fParity* : DWORD;
      fOutxCtsFlow* : DWORD;
      fOutxDsrFlow* : DWORD;
      fDtrControl* : DWORD;
      fDsrSensitivity* : DWORD;
      fTXContinueOnXoff* : DWORD;
      fOutX* : DWORD;
      fInX* : DWORD;
      fErrorChar* : DWORD;
      fNull* : DWORD;
      fRtsControl* : DWORD;
      fAbortOnError* : DWORD;
      fDummy2* : DWORD;
      wReserved* : WORD;
      XonLim* : WORD;
      XoffLim* : WORD;
      ByteSize* : BYTE;
      Parity* : BYTE;
      StopBits* : BYTE;
      XonChar* : CHAR;
      XoffChar* : CHAR;
      ErrorChar* : CHAR;
      EofChar* : CHAR;
      EvtChar* : CHAR;
      wReserved1* : WORD
    END;

    DCB* = _DCB_struct;

    LPDCB* = POINTER TO _DCB_struct;

    _COMMTIMEOUTS_struct* = RECORD [notag]
      ReadIntervalTimeout* : DWORD;
      ReadTotalTimeoutMultiplier* : DWORD;
      ReadTotalTimeoutConstant* : DWORD;
      WriteTotalTimeoutMultiplier* : DWORD;
      WriteTotalTimeoutConstant* : DWORD
    END;

    COMMTIMEOUTS* = _COMMTIMEOUTS_struct;

    LPCOMMTIMEOUTS* = POINTER TO _COMMTIMEOUTS_struct;

    _COMMCONFIG_struct* = RECORD [notag]
      dwSize* : DWORD;
      wVersion* : WORD;
      wReserved* : WORD;
      dcb* : DCB;
      dwProviderSubType* : DWORD;
      dwProviderOffset* : DWORD;
      dwProviderSize* : DWORD;
      wcProviderData* : ARRAY 1 OF WCHAR
    END;

    COMMCONFIG* = _COMMCONFIG_struct;

    LPCOMMCONFIG* = POINTER TO _COMMCONFIG_struct;

    _SYSTEM_INFO_struct* = RECORD [notag]
      noname0* : RECORD [UNION]
        dwOemId* : DWORD;
        noname0* : RECORD [notag]
          wProcessorArchitecture* : WORD;
          wReserved* : WORD
        END
      END;
      dwPageSize* : DWORD;
      lpMinimumApplicationAddress* : LPVOID;
      lpMaximumApplicationAddress* : LPVOID;
      dwActiveProcessorMask* : DWORD;
      dwNumberOfProcessors* : DWORD;
      dwProcessorType* : DWORD;
      dwAllocationGranularity* : DWORD;
      wProcessorLevel* : WORD;
      wProcessorRevision* : WORD
    END;

    SYSTEM_INFO* = _SYSTEM_INFO_struct;

    LPSYSTEM_INFO* = POINTER TO _SYSTEM_INFO_struct;

    _MEMORYSTATUS_struct* = RECORD [notag]
      dwLength* : DWORD;
      dwMemoryLoad* : DWORD;
      dwTotalPhys* : DWORD;
      dwAvailPhys* : DWORD;
      dwTotalPageFile* : DWORD;
      dwAvailPageFile* : DWORD;
      dwTotalVirtual* : DWORD;
      dwAvailVirtual* : DWORD
    END;

    MEMORYSTATUS* = _MEMORYSTATUS_struct;

    LPMEMORYSTATUS* = POINTER TO _MEMORYSTATUS_struct;

    _EXCEPTION_DEBUG_INFO_struct* = RECORD [notag]
      ExceptionRecord* : EXCEPTION_RECORD;
      dwFirstChance* : DWORD
    END;

    EXCEPTION_DEBUG_INFO* = _EXCEPTION_DEBUG_INFO_struct;

    LPEXCEPTION_DEBUG_INFO* = POINTER TO _EXCEPTION_DEBUG_INFO_struct;

    _CREATE_THREAD_DEBUG_INFO_struct* = RECORD [notag]
      hThread* : HANDLE;
      lpThreadLocalBase* : LPVOID;
      lpStartAddress* : LPTHREAD_START_ROUTINE
    END;

    CREATE_THREAD_DEBUG_INFO* = _CREATE_THREAD_DEBUG_INFO_struct;

    LPCREATE_THREAD_DEBUG_INFO* = POINTER TO _CREATE_THREAD_DEBUG_INFO_struct;

    _CREATE_PROCESS_DEBUG_INFO_struct* = RECORD [notag]
      hFile* : HANDLE;
      hProcess* : HANDLE;
      hThread* : HANDLE;
      lpBaseOfImage* : LPVOID;
      dwDebugInfoFileOffset* : DWORD;
      nDebugInfoSize* : DWORD;
      lpThreadLocalBase* : LPVOID;
      lpStartAddress* : LPTHREAD_START_ROUTINE;
      lpImageName* : LPVOID;
      fUnicode* : WORD
    END;

    CREATE_PROCESS_DEBUG_INFO* = _CREATE_PROCESS_DEBUG_INFO_struct;

    LPCREATE_PROCESS_DEBUG_INFO* = POINTER TO _CREATE_PROCESS_DEBUG_INFO_struct;

    _EXIT_THREAD_DEBUG_INFO_struct* = RECORD [notag]
      dwExitCode* : DWORD
    END;

    EXIT_THREAD_DEBUG_INFO* = _EXIT_THREAD_DEBUG_INFO_struct;

    LPEXIT_THREAD_DEBUG_INFO* = POINTER TO _EXIT_THREAD_DEBUG_INFO_struct;

    _EXIT_PROCESS_DEBUG_INFO_struct* = RECORD [notag]
      dwExitCode* : DWORD
    END;

    EXIT_PROCESS_DEBUG_INFO* = _EXIT_PROCESS_DEBUG_INFO_struct;

    LPEXIT_PROCESS_DEBUG_INFO* = POINTER TO _EXIT_PROCESS_DEBUG_INFO_struct;

    _LOAD_DLL_DEBUG_INFO_struct* = RECORD [notag]
      hFile* : HANDLE;
      lpBaseOfDll* : LPVOID;
      dwDebugInfoFileOffset* : DWORD;
      nDebugInfoSize* : DWORD;
      lpImageName* : LPVOID;
      fUnicode* : WORD
    END;

    LOAD_DLL_DEBUG_INFO* = _LOAD_DLL_DEBUG_INFO_struct;

    LPLOAD_DLL_DEBUG_INFO* = POINTER TO _LOAD_DLL_DEBUG_INFO_struct;

    _UNLOAD_DLL_DEBUG_INFO_struct* = RECORD [notag]
      lpBaseOfDll* : LPVOID
    END;

    UNLOAD_DLL_DEBUG_INFO* = _UNLOAD_DLL_DEBUG_INFO_struct;

    LPUNLOAD_DLL_DEBUG_INFO* = POINTER TO _UNLOAD_DLL_DEBUG_INFO_struct;

    _OUTPUT_DEBUG_STRING_INFO_struct* = RECORD [notag]
      lpDebugStringData* : LPSTR;
      fUnicode* : WORD;
      nDebugStringLength* : WORD
    END;

    OUTPUT_DEBUG_STRING_INFO* = _OUTPUT_DEBUG_STRING_INFO_struct;

    LPOUTPUT_DEBUG_STRING_INFO* = POINTER TO _OUTPUT_DEBUG_STRING_INFO_struct;

    _RIP_INFO_struct* = RECORD [notag]
      dwError* : DWORD;
      dwType* : DWORD
    END;

    RIP_INFO* = _RIP_INFO_struct;

    LPRIP_INFO* = POINTER TO _RIP_INFO_struct;

    _DEBUG_EVENT_struct* = RECORD [notag]
      dwDebugEventCode* : DWORD;
      dwProcessId* : DWORD;
      dwThreadId* : DWORD;
      u* : RECORD [UNION]
        Exception* : EXCEPTION_DEBUG_INFO;
        CreateThread* : CREATE_THREAD_DEBUG_INFO;
        CreateProcessInfo* : CREATE_PROCESS_DEBUG_INFO;
        ExitThread* : EXIT_THREAD_DEBUG_INFO;
        ExitProcess* : EXIT_PROCESS_DEBUG_INFO;
        LoadDll* : LOAD_DLL_DEBUG_INFO;
        UnloadDll* : UNLOAD_DLL_DEBUG_INFO;
        DebugString* : OUTPUT_DEBUG_STRING_INFO;
        RipInfo* : RIP_INFO
      END
    END;

    DEBUG_EVENT* = _DEBUG_EVENT_struct;

    LPDEBUG_EVENT* = POINTER TO _DEBUG_EVENT_struct;

    LPCONTEXT* = PCONTEXT;

    LPEXCEPTION_RECORD* = PEXCEPTION_RECORD;

    LPEXCEPTION_POINTERS* = PEXCEPTION_POINTERS;

    _OFSTRUCT_struct* = RECORD [notag]
      cBytes* : BYTE;
      fFixedDisk* : BYTE;
      nErrCode* : WORD;
      Reserved1* : WORD;
      Reserved2* : WORD;
      szPathName* : ARRAY 128 OF CHAR
    END;

    OFSTRUCT* = _OFSTRUCT_struct;

    LPOFSTRUCT* = POINTER TO _OFSTRUCT_struct;

    POFSTRUCT* = LPOFSTRUCT;

    _PROCESS_HEAP_ENTRY_struct* = RECORD [notag]
      lpData* : PVOID;
      cbData* : DWORD;
      cbOverhead* : BYTE;
      iRegionIndex* : BYTE;
      wFlags* : WORD;
      noname0* : RECORD [UNION]
        Block* : RECORD [notag]
          hMem* : HANDLE;
          dwReserved* : ARRAY 3 OF DWORD
        END;
        Region* : RECORD [notag]
          dwCommittedSize* : DWORD;
          dwUnCommittedSize* : DWORD;
          lpFirstBlock* : LPVOID;
          lpLastBlock* : LPVOID
        END
      END
    END;

    PROCESS_HEAP_ENTRY* = _PROCESS_HEAP_ENTRY_struct;

    LPPROCESS_HEAP_ENTRY* = POINTER TO _PROCESS_HEAP_ENTRY_struct;

    PPROCESS_HEAP_ENTRY* = LPPROCESS_HEAP_ENTRY;

    PTOP_LEVEL_EXCEPTION_FILTER* = PROCEDURE (VAR [nil] ExceptionInfo : _EXCEPTION_POINTERS_struct) : LONG;

    LPTOP_LEVEL_EXCEPTION_FILTER* = PTOP_LEVEL_EXCEPTION_FILTER;

    PAPCFUNC* = WORKERCALLBACKFUNC;

    _BY_HANDLE_FILE_INFORMATION_struct* = RECORD [notag]
      dwFileAttributes* : DWORD;
      ftCreationTime* : FILETIME;
      ftLastAccessTime* : FILETIME;
      ftLastWriteTime* : FILETIME;
      dwVolumeSerialNumber* : DWORD;
      nFileSizeHigh* : DWORD;
      nFileSizeLow* : DWORD;
      nNumberOfLinks* : DWORD;
      nFileIndexHigh* : DWORD;
      nFileIndexLow* : DWORD
    END;

    BY_HANDLE_FILE_INFORMATION* = _BY_HANDLE_FILE_INFORMATION_struct;

    PBY_HANDLE_FILE_INFORMATION* = POINTER TO _BY_HANDLE_FILE_INFORMATION_struct;

    LPBY_HANDLE_FILE_INFORMATION* = PBY_HANDLE_FILE_INFORMATION;

    _TIME_ZONE_INFORMATION_struct* = RECORD [notag]
      Bias* : LONG;
      StandardName* : ARRAY 32 OF WCHAR;
      StandardDate* : SYSTEMTIME;
      StandardBias* : LONG;
      DaylightName* : ARRAY 32 OF WCHAR;
      DaylightDate* : SYSTEMTIME;
      DaylightBias* : LONG
    END;

    TIME_ZONE_INFORMATION* = _TIME_ZONE_INFORMATION_struct;

    PTIME_ZONE_INFORMATION* = POINTER TO _TIME_ZONE_INFORMATION_struct;

    LPTIME_ZONE_INFORMATION* = PTIME_ZONE_INFORMATION;

    PFE_EXPORT_FUNC* = PROCEDURE (pbData : PBYTE; pvCallbackContext : PVOID; ulLength : ULONG) : DWORD;

    PFE_IMPORT_FUNC* = PFE_EXPORT_FUNC;

    _RECOVERY_AGENT_INFORMATIONA_struct* = RECORD [notag]
      NextEntryOffset* : DWORD;
      AgentNameLength* : DWORD;
      AgentInformation* : ARRAY 1 OF CHAR
    END;

    RECOVERY_AGENT_INFORMATIONA* = _RECOVERY_AGENT_INFORMATIONA_struct;

    LPRECOVERY_AGENT_INFORMATIONA* = POINTER TO _RECOVERY_AGENT_INFORMATIONA_struct;

    _RECOVERY_AGENT_INFORMATIONW_struct* = RECORD [notag]
      NextEntryOffset* : DWORD;
      AgentNameLength* : DWORD;
      AgentInformation* : ARRAY 1 OF WCHAR
    END;

    RECOVERY_AGENT_INFORMATIONW* = _RECOVERY_AGENT_INFORMATIONW_struct;

    LPRECOVERY_AGENT_INFORMATIONW* = POINTER TO _RECOVERY_AGENT_INFORMATIONW_struct;

    RECOVERY_AGENT_INFORMATION* = RECOVERY_AGENT_INFORMATIONA;

    LPRECOVERY_AGENT_INFORMATION* = LPRECOVERY_AGENT_INFORMATIONA;

    LPOVERLAPPED_COMPLETION_ROUTINE* = PROCEDURE (dwErrorCode : DWORD; dwNumberOfBytesTransfered : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct);

    _WIN32_STREAM_ID_struct* = RECORD [notag]
      dwStreamId* : DWORD;
      dwStreamAttributes* : DWORD;
      Size* : LARGE_INTEGER;
      dwStreamNameSize* : DWORD;
      cStreamName* : ARRAY 1 OF WCHAR
    END;

    WIN32_STREAM_ID* = _WIN32_STREAM_ID_struct;

    LPWIN32_STREAM_ID* = POINTER TO _WIN32_STREAM_ID_struct;

    _STARTUPINFOA_struct* = RECORD [notag]
      cb* : DWORD;
      lpReserved* : LPSTR;
      lpDesktop* : LPSTR;
      lpTitle* : LPSTR;
      dwX* : DWORD;
      dwY* : DWORD;
      dwXSize* : DWORD;
      dwYSize* : DWORD;
      dwXCountChars* : DWORD;
      dwYCountChars* : DWORD;
      dwFillAttribute* : DWORD;
      dwFlags* : DWORD;
      wShowWindow* : WORD;
      cbReserved2* : WORD;
      lpReserved2* : LPBYTE;
      hStdInput* : HANDLE;
      hStdOutput* : HANDLE;
      hStdError* : HANDLE
    END;

    STARTUPINFOA* = _STARTUPINFOA_struct;

    LPSTARTUPINFOA* = POINTER TO _STARTUPINFOA_struct;

    _STARTUPINFOW_struct* = RECORD [notag]
      cb* : DWORD;
      lpReserved* : LPWSTR;
      lpDesktop* : LPWSTR;
      lpTitle* : LPWSTR;
      dwX* : DWORD;
      dwY* : DWORD;
      dwXSize* : DWORD;
      dwYSize* : DWORD;
      dwXCountChars* : DWORD;
      dwYCountChars* : DWORD;
      dwFillAttribute* : DWORD;
      dwFlags* : DWORD;
      wShowWindow* : WORD;
      cbReserved2* : WORD;
      lpReserved2* : LPBYTE;
      hStdInput* : HANDLE;
      hStdOutput* : HANDLE;
      hStdError* : HANDLE
    END;

    STARTUPINFOW* = _STARTUPINFOW_struct;

    LPSTARTUPINFOW* = POINTER TO _STARTUPINFOW_struct;

    STARTUPINFO* = STARTUPINFOA;

    LPSTARTUPINFO* = LPSTARTUPINFOA;

    _WIN32_FIND_DATAA_struct* = RECORD [notag]
      dwFileAttributes* : DWORD;
      ftCreationTime* : FILETIME;
      ftLastAccessTime* : FILETIME;
      ftLastWriteTime* : FILETIME;
      nFileSizeHigh* : DWORD;
      nFileSizeLow* : DWORD;
      dwReserved0* : DWORD;
      dwReserved1* : DWORD;
      cFileName* : ARRAY 260 OF CHAR;
      cAlternateFileName* : ARRAY 14 OF CHAR
    END;

    WIN32_FIND_DATAA* = _WIN32_FIND_DATAA_struct;

    PWIN32_FIND_DATAA* = POINTER TO _WIN32_FIND_DATAA_struct;

    LPWIN32_FIND_DATAA* = PWIN32_FIND_DATAA;

    _WIN32_FIND_DATAW_struct* = RECORD [notag]
      dwFileAttributes* : DWORD;
      ftCreationTime* : FILETIME;
      ftLastAccessTime* : FILETIME;
      ftLastWriteTime* : FILETIME;
      nFileSizeHigh* : DWORD;
      nFileSizeLow* : DWORD;
      dwReserved0* : DWORD;
      dwReserved1* : DWORD;
      cFileName* : ARRAY 260 OF WCHAR;
      cAlternateFileName* : ARRAY 14 OF WCHAR
    END;

    WIN32_FIND_DATAW* = _WIN32_FIND_DATAW_struct;

    PWIN32_FIND_DATAW* = POINTER TO _WIN32_FIND_DATAW_struct;

    LPWIN32_FIND_DATAW* = PWIN32_FIND_DATAW;

    WIN32_FIND_DATA* = WIN32_FIND_DATAA;

    PWIN32_FIND_DATA* = PWIN32_FIND_DATAA;

    LPWIN32_FIND_DATA* = LPWIN32_FIND_DATAA;

    _WIN32_FILE_ATTRIBUTE_DATA_struct* = RECORD [notag]
      dwFileAttributes* : DWORD;
      ftCreationTime* : FILETIME;
      ftLastAccessTime* : FILETIME;
      ftLastWriteTime* : FILETIME;
      nFileSizeHigh* : DWORD;
      nFileSizeLow* : DWORD
    END;

    WIN32_FILE_ATTRIBUTE_DATA* = _WIN32_FILE_ATTRIBUTE_DATA_struct;

    LPWIN32_FILE_ATTRIBUTE_DATA* = POINTER TO _WIN32_FILE_ATTRIBUTE_DATA_struct;

    PTIMERAPCROUTINE* = PROCEDURE (lpArgToCompletionRoutine : LPVOID; dwTimerLowValue : DWORD; dwTimerHighValue : DWORD);

    ENUMRESTYPEPROC* = FARPROC;

    ENUMRESNAMEPROC* = FARPROC;

    ENUMRESLANGPROC* = FARPROC;

    GET_FILEEX_INFO_LEVELS* = EXCEPTION_DISPOSITION;

    FINDEX_INFO_LEVELS* = EXCEPTION_DISPOSITION;

    FINDEX_SEARCH_OPS* = EXCEPTION_DISPOSITION;

    LPPROGRESS_ROUTINE* = PROCEDURE (TotalFileSize : LARGE_INTEGER; TotalBytesTransferred : LARGE_INTEGER; StreamSize : LARGE_INTEGER; StreamBytesTransferred : LARGE_INTEGER; dwStreamNumber : DWORD; dwCallbackReason : DWORD; hSourceFile : HANDLE; hDestinationFile : HANDLE; lpData : LPVOID) : DWORD;

    tagHW_PROFILE_INFOA_struct* = RECORD [notag]
      dwDockInfo* : DWORD;
      szHwProfileGuid* : ARRAY 39 OF CHAR;
      szHwProfileName* : ARRAY 80 OF CHAR
    END;

    HW_PROFILE_INFOA* = tagHW_PROFILE_INFOA_struct;

    LPHW_PROFILE_INFOA* = POINTER TO tagHW_PROFILE_INFOA_struct;

    tagHW_PROFILE_INFOW_struct* = RECORD [notag]
      dwDockInfo* : DWORD;
      szHwProfileGuid* : ARRAY 39 OF WCHAR;
      szHwProfileName* : ARRAY 80 OF WCHAR
    END;

    HW_PROFILE_INFOW* = tagHW_PROFILE_INFOW_struct;

    LPHW_PROFILE_INFOW* = POINTER TO tagHW_PROFILE_INFOW_struct;

    HW_PROFILE_INFO* = HW_PROFILE_INFOA;

    LPHW_PROFILE_INFO* = LPHW_PROFILE_INFOA;

    _OSVERSIONINFOA_struct* = RECORD [notag]
      dwOSVersionInfoSize* : DWORD;
      dwMajorVersion* : DWORD;
      dwMinorVersion* : DWORD;
      dwBuildNumber* : DWORD;
      dwPlatformId* : DWORD;
      szCSDVersion* : ARRAY 128 OF CHAR
    END;

    OSVERSIONINFOA* = _OSVERSIONINFOA_struct;

    POSVERSIONINFOA* = POINTER TO _OSVERSIONINFOA_struct;

    LPOSVERSIONINFOA* = POSVERSIONINFOA;

    _OSVERSIONINFOW_struct* = RECORD [notag]
      dwOSVersionInfoSize* : DWORD;
      dwMajorVersion* : DWORD;
      dwMinorVersion* : DWORD;
      dwBuildNumber* : DWORD;
      dwPlatformId* : DWORD;
      szCSDVersion* : ARRAY 128 OF WCHAR
    END;

    OSVERSIONINFOW* = _OSVERSIONINFOW_struct;

    POSVERSIONINFOW* = POINTER TO _OSVERSIONINFOW_struct;

    LPOSVERSIONINFOW* = POSVERSIONINFOW;

    OSVERSIONINFO* = OSVERSIONINFOA;

    POSVERSIONINFO* = POSVERSIONINFOA;

    LPOSVERSIONINFO* = LPOSVERSIONINFOA;

    _OSVERSIONINFOEXA_struct* = RECORD [notag]
      dwOSVersionInfoSize* : DWORD;
      dwMajorVersion* : DWORD;
      dwMinorVersion* : DWORD;
      dwBuildNumber* : DWORD;
      dwPlatformId* : DWORD;
      szCSDVersion* : ARRAY 128 OF CHAR;
      wServicePackMajor* : WORD;
      wServicePackMinor* : WORD;
      wReserved* : ARRAY 2 OF WORD
    END;

    OSVERSIONINFOEXA* = _OSVERSIONINFOEXA_struct;

    POSVERSIONINFOEXA* = POINTER TO _OSVERSIONINFOEXA_struct;

    LPOSVERSIONINFOEXA* = POSVERSIONINFOEXA;

    _OSVERSIONINFOEXW_struct* = RECORD [notag]
      dwOSVersionInfoSize* : DWORD;
      dwMajorVersion* : DWORD;
      dwMinorVersion* : DWORD;
      dwBuildNumber* : DWORD;
      dwPlatformId* : DWORD;
      szCSDVersion* : ARRAY 128 OF WCHAR;
      wServicePackMajor* : WORD;
      wServicePackMinor* : WORD;
      wReserved* : ARRAY 2 OF WORD
    END;

    OSVERSIONINFOEXW* = _OSVERSIONINFOEXW_struct;

    POSVERSIONINFOEXW* = POINTER TO _OSVERSIONINFOEXW_struct;

    LPOSVERSIONINFOEXW* = POSVERSIONINFOEXW;

    OSVERSIONINFOEX* = OSVERSIONINFOEXA;

    POSVERSIONINFOEX* = POSVERSIONINFOEXA;

    LPOSVERSIONINFOEX* = LPOSVERSIONINFOEXA;

    _SYSTEM_POWER_STATUS_struct* = RECORD [notag]
      ACLineStatus* : BYTE;
      BatteryFlag* : BYTE;
      BatteryLifePercent* : BYTE;
      Reserved1* : BYTE;
      BatteryLifeTime* : DWORD;
      BatteryFullLifeTime* : DWORD
    END;

    SYSTEM_POWER_STATUS* = _SYSTEM_POWER_STATUS_struct;

    LPSYSTEM_POWER_STATUS* = POINTER TO _SYSTEM_POWER_STATUS_struct;

    _WIN_CERTIFICATE_struct* = RECORD [notag]
      dwLength* : DWORD;
      wRevision* : WORD;
      wCertificateType* : WORD;
      bCertificate* : ARRAY 1 OF BYTE
    END;

    WIN_CERTIFICATE* = _WIN_CERTIFICATE_struct;

    LPWIN_CERTIFICATE* = POINTER TO _WIN_CERTIFICATE_struct;

    WIN_TRUST_SUBJECT* = LPVOID;

    _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT_struct* = RECORD [notag]
      hClientToken* : HANDLE;
      SubjectType* : AutoPtr_GUID;
      Subject* : WIN_TRUST_SUBJECT
    END;

    WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT* = _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT_struct;

    LPWIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT* = POINTER TO _WIN_TRUST_ACTDATA_CONTEXT_WITH_SUBJECT_struct;

    _WIN_TRUST_ACTDATA_SUBJECT_ONLY_struct* = RECORD [notag]
      SubjectType* : AutoPtr_GUID;
      Subject* : WIN_TRUST_SUBJECT
    END;

    WIN_TRUST_ACTDATA_SUBJECT_ONLY* = _WIN_TRUST_ACTDATA_SUBJECT_ONLY_struct;

    LPWIN_TRUST_ACTDATA_SUBJECT_ONLY* = POINTER TO _WIN_TRUST_ACTDATA_SUBJECT_ONLY_struct;

    _WIN_TRUST_SUBJECT_FILE_struct* = RECORD [notag]
      hFile* : HANDLE;
      lpPath* : LPCWSTR
    END;

    WIN_TRUST_SUBJECT_FILE* = _WIN_TRUST_SUBJECT_FILE_struct;

    LPWIN_TRUST_SUBJECT_FILE* = POINTER TO _WIN_TRUST_SUBJECT_FILE_struct;

    _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY_struct* = RECORD [notag]
      hFile* : HANDLE;
      lpPath* : LPCWSTR;
      lpDisplayName* : LPCWSTR
    END;

    WIN_TRUST_SUBJECT_FILE_AND_DISPLAY* = _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY_struct;

    LPWIN_TRUST_SUBJECT_FILE_AND_DISPLAY* = POINTER TO _WIN_TRUST_SUBJECT_FILE_AND_DISPLAY_struct;

    _WIN_SPUB_TRUSTED_PUBLISHER_DATA_struct* = RECORD [notag]
      hClientToken* : HANDLE;
      lpCertificate* : LPWIN_CERTIFICATE
    END;

    WIN_SPUB_TRUSTED_PUBLISHER_DATA* = _WIN_SPUB_TRUSTED_PUBLISHER_DATA_struct;

    LPWIN_SPUB_TRUSTED_PUBLISHER_DATA* = POINTER TO _WIN_SPUB_TRUSTED_PUBLISHER_DATA_struct;

    _DRAWPATRECT_struct* = RECORD [notag]
      ptPosition* : POINT;
      ptSize* : POINT;
      wStyle* : WORD;
      wPattern* : WORD
    END;

    DRAWPATRECT* = _DRAWPATRECT_struct;

    PDRAWPATRECT* = POINTER TO _DRAWPATRECT_struct;

    _PSINJECTDATA_struct* = RECORD [notag]
      DataBytes* : DWORD;
      InjectionPoint* : DWORD;
      Flags* : DWORD;
      Reserved* : DWORD
    END;

    PSINJECTDATA* = _PSINJECTDATA_struct;

    PPSINJECTDATA* = POINTER TO _PSINJECTDATA_struct;

    tagXFORM_struct* = RECORD [notag]
      eM11* : FLOAT;
      eM12* : FLOAT;
      eM21* : FLOAT;
      eM22* : FLOAT;
      eDx* : FLOAT;
      eDy* : FLOAT
    END;

    XFORM* = tagXFORM_struct;

    PXFORM* = POINTER TO tagXFORM_struct;

    LPXFORM* = PXFORM;

    tagBITMAP_struct* = RECORD [notag]
      bmType* : LONG;
      bmWidth* : LONG;
      bmHeight* : LONG;
      bmWidthBytes* : LONG;
      bmPlanes* : WORD;
      bmBitsPixel* : WORD;
      bmBits* : LPVOID
    END;

    BITMAP* = tagBITMAP_struct;

    PBITMAP* = POINTER TO tagBITMAP_struct;

    NPBITMAP* = PBITMAP;

    LPBITMAP* = PBITMAP;

    tagRGBTRIPLE_struct* = RECORD [ALIGN1]
      rgbtBlue* : BYTE;
      rgbtGreen* : BYTE;
      rgbtRed* : BYTE
    END;

    RGBTRIPLE* = tagRGBTRIPLE_struct;

    tagRGBQUAD_struct* = RECORD [notag]
      rgbBlue* : BYTE;
      rgbGreen* : BYTE;
      rgbRed* : BYTE;
      rgbReserved* : BYTE
    END;

    RGBQUAD* = tagRGBQUAD_struct;

    LPRGBQUAD* = POINTER TO RGBQUAD;

    LCSCSTYPE* = LONG;

    LCSGAMUTMATCH* = LONG;

    FXPT16DOT16* = LONGINT;

    LPFXPT16DOT16* = LPLONG;

    FXPT2DOT30* = LONGINT;

    LPFXPT2DOT30* = LPLONG;

    tagCIEXYZ_struct* = RECORD [notag]
      ciexyzX* : FXPT2DOT30;
      ciexyzY* : FXPT2DOT30;
      ciexyzZ* : FXPT2DOT30
    END;

    CIEXYZ* = tagCIEXYZ_struct;

    LPCIEXYZ* = POINTER TO CIEXYZ;

    tagICEXYZTRIPLE_struct* = RECORD [notag]
      ciexyzRed* : CIEXYZ;
      ciexyzGreen* : CIEXYZ;
      ciexyzBlue* : CIEXYZ
    END;

    CIEXYZTRIPLE* = tagICEXYZTRIPLE_struct;

    LPCIEXYZTRIPLE* = POINTER TO CIEXYZTRIPLE;

    tagLOGCOLORSPACEA_struct* = RECORD [notag]
      lcsSignature* : DWORD;
      lcsVersion* : DWORD;
      lcsSize* : DWORD;
      lcsCSType* : LCSCSTYPE;
      lcsIntent* : LCSGAMUTMATCH;
      lcsEndpoints* : CIEXYZTRIPLE;
      lcsGammaRed* : DWORD;
      lcsGammaGreen* : DWORD;
      lcsGammaBlue* : DWORD;
      lcsFilename* : ARRAY 260 OF CHAR
    END;

    LOGCOLORSPACEA* = tagLOGCOLORSPACEA_struct;

    LPLOGCOLORSPACEA* = POINTER TO tagLOGCOLORSPACEA_struct;

    tagLOGCOLORSPACEW_struct* = RECORD [notag]
      lcsSignature* : DWORD;
      lcsVersion* : DWORD;
      lcsSize* : DWORD;
      lcsCSType* : LCSCSTYPE;
      lcsIntent* : LCSGAMUTMATCH;
      lcsEndpoints* : CIEXYZTRIPLE;
      lcsGammaRed* : DWORD;
      lcsGammaGreen* : DWORD;
      lcsGammaBlue* : DWORD;
      lcsFilename* : ARRAY 260 OF WCHAR
    END;

    LOGCOLORSPACEW* = tagLOGCOLORSPACEW_struct;

    LPLOGCOLORSPACEW* = POINTER TO tagLOGCOLORSPACEW_struct;

    LOGCOLORSPACE* = LOGCOLORSPACEA;

    LPLOGCOLORSPACE* = LPLOGCOLORSPACEA;

    tagBITMAPCOREHEADER_struct* = RECORD [notag]
      bcSize* : DWORD;
      bcWidth* : WORD;
      bcHeight* : WORD;
      bcPlanes* : WORD;
      bcBitCount* : WORD
    END;

    BITMAPCOREHEADER* = tagBITMAPCOREHEADER_struct;

    LPBITMAPCOREHEADER* = POINTER TO tagBITMAPCOREHEADER_struct;

    PBITMAPCOREHEADER* = LPBITMAPCOREHEADER;

    tagBITMAPINFOHEADER_struct* = RECORD [notag]
      biSize* : DWORD;
      biWidth* : LONG;
      biHeight* : LONG;
      biPlanes* : WORD;
      biBitCount* : WORD;
      biCompression* : DWORD;
      biSizeImage* : DWORD;
      biXPelsPerMeter* : LONG;
      biYPelsPerMeter* : LONG;
      biClrUsed* : DWORD;
      biClrImportant* : DWORD
    END;

    BITMAPINFOHEADER* = tagBITMAPINFOHEADER_struct;

    LPBITMAPINFOHEADER* = POINTER TO tagBITMAPINFOHEADER_struct;

    PBITMAPINFOHEADER* = LPBITMAPINFOHEADER;

    BITMAPV4HEADER* = RECORD [notag]
      bV4Size* : DWORD;
      bV4Width* : LONG;
      bV4Height* : LONG;
      bV4Planes* : WORD;
      bV4BitCount* : WORD;
      bV4V4Compression* : DWORD;
      bV4SizeImage* : DWORD;
      bV4XPelsPerMeter* : LONG;
      bV4YPelsPerMeter* : LONG;
      bV4ClrUsed* : DWORD;
      bV4ClrImportant* : DWORD;
      bV4RedMask* : DWORD;
      bV4GreenMask* : DWORD;
      bV4BlueMask* : DWORD;
      bV4AlphaMask* : DWORD;
      bV4CSType* : DWORD;
      bV4Endpoints* : CIEXYZTRIPLE;
      bV4GammaRed* : DWORD;
      bV4GammaGreen* : DWORD;
      bV4GammaBlue* : DWORD
    END;

    LPBITMAPV4HEADER* = POINTER TO RECORD [notag]
      bV4Size* : DWORD;
      bV4Width* : LONG;
      bV4Height* : LONG;
      bV4Planes* : WORD;
      bV4BitCount* : WORD;
      bV4V4Compression* : DWORD;
      bV4SizeImage* : DWORD;
      bV4XPelsPerMeter* : LONG;
      bV4YPelsPerMeter* : LONG;
      bV4ClrUsed* : DWORD;
      bV4ClrImportant* : DWORD;
      bV4RedMask* : DWORD;
      bV4GreenMask* : DWORD;
      bV4BlueMask* : DWORD;
      bV4AlphaMask* : DWORD;
      bV4CSType* : DWORD;
      bV4Endpoints* : CIEXYZTRIPLE;
      bV4GammaRed* : DWORD;
      bV4GammaGreen* : DWORD;
      bV4GammaBlue* : DWORD
    END;

    PBITMAPV4HEADER* = LPBITMAPV4HEADER;

    tagBITMAPINFO_struct* = RECORD [notag]
      bmiHeader* : BITMAPINFOHEADER;
      bmiColors* : ARRAY 1 OF RGBQUAD
    END;

    BITMAPINFO* = tagBITMAPINFO_struct;

    LPBITMAPINFO* = POINTER TO tagBITMAPINFO_struct;

    PBITMAPINFO* = LPBITMAPINFO;

    tagBITMAPCOREINFO_struct* = RECORD [notag]
      bmciHeader* : BITMAPCOREHEADER;
      bmciColors* : ARRAY 1 OF RGBTRIPLE
    END;

    BITMAPCOREINFO* = tagBITMAPCOREINFO_struct;

    LPBITMAPCOREINFO* = POINTER TO tagBITMAPCOREINFO_struct;

    PBITMAPCOREINFO* = LPBITMAPCOREINFO;

    tagBITMAPFILEHEADER_struct* = RECORD [ALIGN2]
      bfType* : WORD;
      bfSize* : DWORD;
      bfReserved1* : WORD;
      bfReserved2* : WORD;
      bfOffBits* : DWORD
    END;

    BITMAPFILEHEADER* = tagBITMAPFILEHEADER_struct;

    LPBITMAPFILEHEADER* = POINTER TO tagBITMAPFILEHEADER_struct;

    PBITMAPFILEHEADER* = LPBITMAPFILEHEADER;

    tagFONTSIGNATURE_struct* = RECORD [notag]
      fsUsb* : ARRAY 4 OF DWORD;
      fsCsb* : ARRAY 2 OF DWORD
    END;

    FONTSIGNATURE* = tagFONTSIGNATURE_struct;

    PFONTSIGNATURE* = POINTER TO tagFONTSIGNATURE_struct;

    LPFONTSIGNATURE* = PFONTSIGNATURE;

    tagCHARSETINFO_struct* = RECORD [notag]
      ciCharset* : UINT;
      ciACP* : UINT;
      fs* : FONTSIGNATURE
    END;

    CHARSETINFO* = tagCHARSETINFO_struct;

    PCHARSETINFO* = POINTER TO tagCHARSETINFO_struct;

    NPCHARSETINFO* = PCHARSETINFO;

    LPCHARSETINFO* = PCHARSETINFO;

    tagLOCALESIGNATURE_struct* = RECORD [notag]
      lsUsb* : ARRAY 4 OF DWORD;
      lsCsbDefault* : ARRAY 2 OF DWORD;
      lsCsbSupported* : ARRAY 2 OF DWORD
    END;

    LOCALESIGNATURE* = tagLOCALESIGNATURE_struct;

    PLOCALESIGNATURE* = POINTER TO tagLOCALESIGNATURE_struct;

    LPLOCALESIGNATURE* = PLOCALESIGNATURE;

    tagHANDLETABLE_struct* = RECORD [notag]
      objectHandle* : ARRAY 1 OF HGDIOBJ
    END;

    HANDLETABLE* = tagHANDLETABLE_struct;

    PHANDLETABLE* = POINTER TO tagHANDLETABLE_struct;

    LPHANDLETABLE* = PHANDLETABLE;

    tagMETARECORD_struct* = RECORD [notag]
      rdSize* : DWORD;
      rdFunction* : WORD;
      rdParm* : ARRAY 1 OF WORD
    END;

    METARECORD* = tagMETARECORD_struct;

    PMETARECORD* = POINTER TO tagMETARECORD_struct;

    LPMETARECORD* = PMETARECORD;

    tagMETAFILEPICT_struct* = RECORD [notag]
      mm* : LONG;
      xExt* : LONG;
      yExt* : LONG;
      hMF* : HMETAFILE
    END;

    METAFILEPICT* = tagMETAFILEPICT_struct;

    LPMETAFILEPICT* = POINTER TO tagMETAFILEPICT_struct;

    tagMETAHEADER_struct* = RECORD [ALIGN2]
      mtType* : WORD;
      mtHeaderSize* : WORD;
      mtVersion* : WORD;
      mtSize* : DWORD;
      mtNoObjects* : WORD;
      mtMaxRecord* : DWORD;
      mtNoParameters* : WORD
    END;

    METAHEADER* = tagMETAHEADER_struct;

    PMETAHEADER* = POINTER TO tagMETAHEADER_struct;

    LPMETAHEADER* = PMETAHEADER;

    tagENHMETARECORD_struct* = RECORD [notag]
      iType* : DWORD;
      nSize* : DWORD;
      dParm* : ARRAY 1 OF DWORD
    END;

    ENHMETARECORD* = tagENHMETARECORD_struct;

    PENHMETARECORD* = POINTER TO tagENHMETARECORD_struct;

    LPENHMETARECORD* = PENHMETARECORD;

    tagENHMETAHEADER_struct* = RECORD [notag]
      iType* : DWORD;
      nSize* : DWORD;
      rclBounds* : RECTL;
      rclFrame* : RECTL;
      dSignature* : DWORD;
      nVersion* : DWORD;
      nBytes* : DWORD;
      nRecords* : DWORD;
      nHandles* : WORD;
      sReserved* : WORD;
      nDescription* : DWORD;
      offDescription* : DWORD;
      nPalEntries* : DWORD;
      szlDevice* : SIZEL;
      szlMillimeters* : SIZEL;
      cbPixelFormat* : DWORD;
      offPixelFormat* : DWORD;
      bOpenGL* : DWORD
    END;

    ENHMETAHEADER* = tagENHMETAHEADER_struct;

    PENHMETAHEADER* = POINTER TO tagENHMETAHEADER_struct;

    LPENHMETAHEADER* = PENHMETAHEADER;

    BCHAR* = BYTE;

    tagTEXTMETRICA_struct* = RECORD [notag]
      tmHeight* : LONG;
      tmAscent* : LONG;
      tmDescent* : LONG;
      tmInternalLeading* : LONG;
      tmExternalLeading* : LONG;
      tmAveCharWidth* : LONG;
      tmMaxCharWidth* : LONG;
      tmWeight* : LONG;
      tmOverhang* : LONG;
      tmDigitizedAspectX* : LONG;
      tmDigitizedAspectY* : LONG;
      tmFirstChar* : BYTE;
      tmLastChar* : BYTE;
      tmDefaultChar* : BYTE;
      tmBreakChar* : BYTE;
      tmItalic* : BYTE;
      tmUnderlined* : BYTE;
      tmStruckOut* : BYTE;
      tmPitchAndFamily* : BYTE;
      tmCharSet* : BYTE
    END;

    TEXTMETRICA* = tagTEXTMETRICA_struct;

    PTEXTMETRICA* = POINTER TO tagTEXTMETRICA_struct;

    NPTEXTMETRICA* = PTEXTMETRICA;

    LPTEXTMETRICA* = PTEXTMETRICA;

    tagTEXTMETRICW_struct* = RECORD [notag]
      tmHeight* : LONG;
      tmAscent* : LONG;
      tmDescent* : LONG;
      tmInternalLeading* : LONG;
      tmExternalLeading* : LONG;
      tmAveCharWidth* : LONG;
      tmMaxCharWidth* : LONG;
      tmWeight* : LONG;
      tmOverhang* : LONG;
      tmDigitizedAspectX* : LONG;
      tmDigitizedAspectY* : LONG;
      tmFirstChar* : WCHAR;
      tmLastChar* : WCHAR;
      tmDefaultChar* : WCHAR;
      tmBreakChar* : WCHAR;
      tmItalic* : BYTE;
      tmUnderlined* : BYTE;
      tmStruckOut* : BYTE;
      tmPitchAndFamily* : BYTE;
      tmCharSet* : BYTE
    END;

    TEXTMETRICW* = tagTEXTMETRICW_struct;

    PTEXTMETRICW* = POINTER TO tagTEXTMETRICW_struct;

    NPTEXTMETRICW* = PTEXTMETRICW;

    LPTEXTMETRICW* = PTEXTMETRICW;

    TEXTMETRIC* = TEXTMETRICA;

    PTEXTMETRIC* = PTEXTMETRICA;

    NPTEXTMETRIC* = NPTEXTMETRICA;

    LPTEXTMETRIC* = LPTEXTMETRICA;

    tagNEWTEXTMETRICA_struct* = RECORD [ALIGN4]
      tmHeight* : LONG;
      tmAscent* : LONG;
      tmDescent* : LONG;
      tmInternalLeading* : LONG;
      tmExternalLeading* : LONG;
      tmAveCharWidth* : LONG;
      tmMaxCharWidth* : LONG;
      tmWeight* : LONG;
      tmOverhang* : LONG;
      tmDigitizedAspectX* : LONG;
      tmDigitizedAspectY* : LONG;
      tmFirstChar* : BYTE;
      tmLastChar* : BYTE;
      tmDefaultChar* : BYTE;
      tmBreakChar* : BYTE;
      tmItalic* : BYTE;
      tmUnderlined* : BYTE;
      tmStruckOut* : BYTE;
      tmPitchAndFamily* : BYTE;
      tmCharSet* : BYTE;
      ntmFlags* : DWORD;
      ntmSizeEM* : UINT;
      ntmCellHeight* : UINT;
      ntmAvgWidth* : UINT
    END;

    NEWTEXTMETRICA* = tagNEWTEXTMETRICA_struct;

    PNEWTEXTMETRICA* = POINTER TO tagNEWTEXTMETRICA_struct;

    NPNEWTEXTMETRICA* = PNEWTEXTMETRICA;

    LPNEWTEXTMETRICA* = PNEWTEXTMETRICA;

    tagNEWTEXTMETRICW_struct* = RECORD [ALIGN4]
      tmHeight* : LONG;
      tmAscent* : LONG;
      tmDescent* : LONG;
      tmInternalLeading* : LONG;
      tmExternalLeading* : LONG;
      tmAveCharWidth* : LONG;
      tmMaxCharWidth* : LONG;
      tmWeight* : LONG;
      tmOverhang* : LONG;
      tmDigitizedAspectX* : LONG;
      tmDigitizedAspectY* : LONG;
      tmFirstChar* : WCHAR;
      tmLastChar* : WCHAR;
      tmDefaultChar* : WCHAR;
      tmBreakChar* : WCHAR;
      tmItalic* : BYTE;
      tmUnderlined* : BYTE;
      tmStruckOut* : BYTE;
      tmPitchAndFamily* : BYTE;
      tmCharSet* : BYTE;
      ntmFlags* : DWORD;
      ntmSizeEM* : UINT;
      ntmCellHeight* : UINT;
      ntmAvgWidth* : UINT
    END;

    NEWTEXTMETRICW* = tagNEWTEXTMETRICW_struct;

    PNEWTEXTMETRICW* = POINTER TO tagNEWTEXTMETRICW_struct;

    NPNEWTEXTMETRICW* = PNEWTEXTMETRICW;

    LPNEWTEXTMETRICW* = PNEWTEXTMETRICW;

    NEWTEXTMETRIC* = NEWTEXTMETRICA;

    PNEWTEXTMETRIC* = PNEWTEXTMETRICA;

    NPNEWTEXTMETRIC* = NPNEWTEXTMETRICA;

    LPNEWTEXTMETRIC* = LPNEWTEXTMETRICA;

    tagNEWTEXTMETRICEXA_struct* = RECORD [notag]
      ntmTm* : NEWTEXTMETRICA;
      ntmFontSig* : FONTSIGNATURE
    END;

    NEWTEXTMETRICEXA* = tagNEWTEXTMETRICEXA_struct;

    tagNEWTEXTMETRICEXW_struct* = RECORD [notag]
      ntmTm* : NEWTEXTMETRICW;
      ntmFontSig* : FONTSIGNATURE
    END;

    NEWTEXTMETRICEXW* = tagNEWTEXTMETRICEXW_struct;

    NEWTEXTMETRICEX* = NEWTEXTMETRICEXA;

    tagPELARRAY_struct* = RECORD [notag]
      paXCount* : LONG;
      paYCount* : LONG;
      paXExt* : LONG;
      paYExt* : LONG;
      paRGBs* : BYTE
    END;

    PELARRAY* = tagPELARRAY_struct;

    PPELARRAY* = POINTER TO tagPELARRAY_struct;

    NPPELARRAY* = PPELARRAY;

    LPPELARRAY* = PPELARRAY;

    tagLOGBRUSH_struct* = RECORD [notag]
      lbStyle* : UINT;
      lbColor* : COLORREF;
      lbHatch* : LONG
    END;

    LOGBRUSH* = tagLOGBRUSH_struct;

    PLOGBRUSH* = POINTER TO tagLOGBRUSH_struct;

    NPLOGBRUSH* = PLOGBRUSH;

    LPLOGBRUSH* = PLOGBRUSH;

    PATTERN* = LOGBRUSH;

    PPATTERN* = POINTER TO PATTERN;

    NPPATTERN* = PPATTERN;

    LPPATTERN* = PPATTERN;

    tagLOGPEN_struct* = RECORD [notag]
      lopnStyle* : UINT;
      lopnWidth* : POINT;
      lopnColor* : COLORREF
    END;

    LOGPEN* = tagLOGPEN_struct;

    PLOGPEN* = POINTER TO tagLOGPEN_struct;

    NPLOGPEN* = PLOGPEN;

    LPLOGPEN* = PLOGPEN;

    tagEXTLOGPEN_struct* = RECORD [notag]
      elpPenStyle* : DWORD;
      elpWidth* : DWORD;
      elpBrushStyle* : UINT;
      elpColor* : COLORREF;
      elpHatch* : LONG;
      elpNumEntries* : DWORD;
      elpStyleEntry* : ARRAY 1 OF DWORD
    END;

    EXTLOGPEN* = tagEXTLOGPEN_struct;

    PEXTLOGPEN* = POINTER TO tagEXTLOGPEN_struct;

    NPEXTLOGPEN* = PEXTLOGPEN;

    LPEXTLOGPEN* = PEXTLOGPEN;

    tagPALETTEENTRY_struct* = RECORD [notag]
      peRed* : BYTE;
      peGreen* : BYTE;
      peBlue* : BYTE;
      peFlags* : BYTE
    END;

    PALETTEENTRY* = tagPALETTEENTRY_struct;

    PPALETTEENTRY* = POINTER TO tagPALETTEENTRY_struct;

    LPPALETTEENTRY* = PPALETTEENTRY;

    tagLOGPALETTE_struct* = RECORD [notag]
      palVersion* : WORD;
      palNumEntries* : WORD;
      palPalEntry* : ARRAY 1 OF PALETTEENTRY
    END;

    LOGPALETTE* = tagLOGPALETTE_struct;

    PLOGPALETTE* = POINTER TO tagLOGPALETTE_struct;

    NPLOGPALETTE* = PLOGPALETTE;

    LPLOGPALETTE* = PLOGPALETTE;

    tagLOGFONTA_struct* = RECORD [notag]
      lfHeight* : LONG;
      lfWidth* : LONG;
      lfEscapement* : LONG;
      lfOrientation* : LONG;
      lfWeight* : LONG;
      lfItalic* : BYTE;
      lfUnderline* : BYTE;
      lfStrikeOut* : BYTE;
      lfCharSet* : BYTE;
      lfOutPrecision* : BYTE;
      lfClipPrecision* : BYTE;
      lfQuality* : BYTE;
      lfPitchAndFamily* : BYTE;
      lfFaceName* : ARRAY 32 OF CHAR
    END;

    LOGFONTA* = tagLOGFONTA_struct;

    PLOGFONTA* = POINTER TO tagLOGFONTA_struct;

    NPLOGFONTA* = PLOGFONTA;

    LPLOGFONTA* = PLOGFONTA;

    tagLOGFONTW_struct* = RECORD [notag]
      lfHeight* : LONG;
      lfWidth* : LONG;
      lfEscapement* : LONG;
      lfOrientation* : LONG;
      lfWeight* : LONG;
      lfItalic* : BYTE;
      lfUnderline* : BYTE;
      lfStrikeOut* : BYTE;
      lfCharSet* : BYTE;
      lfOutPrecision* : BYTE;
      lfClipPrecision* : BYTE;
      lfQuality* : BYTE;
      lfPitchAndFamily* : BYTE;
      lfFaceName* : ARRAY 32 OF WCHAR
    END;

    LOGFONTW* = tagLOGFONTW_struct;

    PLOGFONTW* = POINTER TO tagLOGFONTW_struct;

    NPLOGFONTW* = PLOGFONTW;

    LPLOGFONTW* = PLOGFONTW;

    LOGFONT* = LOGFONTA;

    PLOGFONT* = PLOGFONTA;

    NPLOGFONT* = NPLOGFONTA;

    LPLOGFONT* = LPLOGFONTA;

    tagENUMLOGFONTA_struct* = RECORD [notag]
      elfLogFont* : LOGFONTA;
      elfFullName* : ARRAY 64 OF BYTE;
      elfStyle* : ARRAY 32 OF BYTE
    END;

    ENUMLOGFONTA* = tagENUMLOGFONTA_struct;

    LPENUMLOGFONTA* = POINTER TO tagENUMLOGFONTA_struct;

    tagENUMLOGFONTW_struct* = RECORD [notag]
      elfLogFont* : LOGFONTW;
      elfFullName* : ARRAY 64 OF WCHAR;
      elfStyle* : ARRAY 32 OF WCHAR
    END;

    ENUMLOGFONTW* = tagENUMLOGFONTW_struct;

    LPENUMLOGFONTW* = POINTER TO tagENUMLOGFONTW_struct;

    ENUMLOGFONT* = ENUMLOGFONTA;

    LPENUMLOGFONT* = LPENUMLOGFONTA;

    tagENUMLOGFONTEXA_struct* = RECORD [notag]
      elfLogFont* : LOGFONTA;
      elfFullName* : ARRAY 64 OF BYTE;
      elfStyle* : ARRAY 32 OF BYTE;
      elfScript* : ARRAY 32 OF BYTE
    END;

    ENUMLOGFONTEXA* = tagENUMLOGFONTEXA_struct;

    LPENUMLOGFONTEXA* = POINTER TO tagENUMLOGFONTEXA_struct;

    tagENUMLOGFONTEXW_struct* = RECORD [notag]
      elfLogFont* : LOGFONTW;
      elfFullName* : ARRAY 64 OF WCHAR;
      elfStyle* : ARRAY 32 OF WCHAR;
      elfScript* : ARRAY 32 OF WCHAR
    END;

    ENUMLOGFONTEXW* = tagENUMLOGFONTEXW_struct;

    LPENUMLOGFONTEXW* = POINTER TO tagENUMLOGFONTEXW_struct;

    ENUMLOGFONTEX* = ENUMLOGFONTEXA;

    LPENUMLOGFONTEX* = LPENUMLOGFONTEXA;

    tagPANOSE_struct* = RECORD [notag]
      bFamilyType* : BYTE;
      bSerifStyle* : BYTE;
      bWeight* : BYTE;
      bProportion* : BYTE;
      bContrast* : BYTE;
      bStrokeVariation* : BYTE;
      bArmStyle* : BYTE;
      bLetterform* : BYTE;
      bMidline* : BYTE;
      bXHeight* : BYTE
    END;

    PANOSE* = tagPANOSE_struct;

    LPPANOSE* = POINTER TO tagPANOSE_struct;

    tagEXTLOGFONTA_struct* = RECORD [notag]
      elfLogFont* : LOGFONTA;
      elfFullName* : ARRAY 64 OF BYTE;
      elfStyle* : ARRAY 32 OF BYTE;
      elfVersion* : DWORD;
      elfStyleSize* : DWORD;
      elfMatch* : DWORD;
      elfReserved* : DWORD;
      elfVendorId* : ARRAY 4 OF BYTE;
      elfCulture* : DWORD;
      elfPanose* : PANOSE
    END;

    EXTLOGFONTA* = tagEXTLOGFONTA_struct;

    PEXTLOGFONTA* = POINTER TO tagEXTLOGFONTA_struct;

    NPEXTLOGFONTA* = PEXTLOGFONTA;

    LPEXTLOGFONTA* = PEXTLOGFONTA;

    tagEXTLOGFONTW_struct* = RECORD [notag]
      elfLogFont* : LOGFONTW;
      elfFullName* : ARRAY 64 OF WCHAR;
      elfStyle* : ARRAY 32 OF WCHAR;
      elfVersion* : DWORD;
      elfStyleSize* : DWORD;
      elfMatch* : DWORD;
      elfReserved* : DWORD;
      elfVendorId* : ARRAY 4 OF BYTE;
      elfCulture* : DWORD;
      elfPanose* : PANOSE
    END;

    EXTLOGFONTW* = tagEXTLOGFONTW_struct;

    PEXTLOGFONTW* = POINTER TO tagEXTLOGFONTW_struct;

    NPEXTLOGFONTW* = PEXTLOGFONTW;

    LPEXTLOGFONTW* = PEXTLOGFONTW;

    EXTLOGFONT* = EXTLOGFONTA;

    PEXTLOGFONT* = PEXTLOGFONTA;

    NPEXTLOGFONT* = NPEXTLOGFONTA;

    LPEXTLOGFONT* = LPEXTLOGFONTA;

    _devicemodeA_struct* = RECORD [notag]
      dmDeviceName* : ARRAY 32 OF BYTE;
      dmSpecVersion* : WORD;
      dmDriverVersion* : WORD;
      dmSize* : WORD;
      dmDriverExtra* : WORD;
      dmFields* : DWORD;
      noname0* : RECORD [UNION]
        noname0* : RECORD [notag]
          dmOrientation* : INTEGER;
          dmPaperSize* : INTEGER;
          dmPaperLength* : INTEGER;
          dmPaperWidth* : INTEGER
        END;
        dmPosition* : POINTL
      END;
      dmScale* : INTEGER;
      dmCopies* : INTEGER;
      dmDefaultSource* : INTEGER;
      dmPrintQuality* : INTEGER;
      dmColor* : INTEGER;
      dmDuplex* : INTEGER;
      dmYResolution* : INTEGER;
      dmTTOption* : INTEGER;
      dmCollate* : INTEGER;
      dmFormName* : ARRAY 32 OF BYTE;
      dmLogPixels* : WORD;
      dmBitsPerPel* : DWORD;
      dmPelsWidth* : DWORD;
      dmPelsHeight* : DWORD;
      dmDisplayFlags* : DWORD;
      dmDisplayFrequency* : DWORD;
      dmICMMethod* : DWORD;
      dmICMIntent* : DWORD;
      dmMediaType* : DWORD;
      dmDitherType* : DWORD;
      dmReserved1* : DWORD;
      dmReserved2* : DWORD;
      dmPanningWidth* : DWORD;
      dmPanningHeight* : DWORD
    END;

    DEVMODEA* = _devicemodeA_struct;

    PDEVMODEA* = POINTER TO _devicemodeA_struct;

    NPDEVMODEA* = PDEVMODEA;

    LPDEVMODEA* = PDEVMODEA;

    _devicemodeW_struct* = RECORD [notag]
      dmDeviceName* : ARRAY 32 OF WCHAR;
      dmSpecVersion* : WORD;
      dmDriverVersion* : WORD;
      dmSize* : WORD;
      dmDriverExtra* : WORD;
      dmFields* : DWORD;
      noname0* : RECORD [UNION]
        noname0* : RECORD [notag]
          dmOrientation* : INTEGER;
          dmPaperSize* : INTEGER;
          dmPaperLength* : INTEGER;
          dmPaperWidth* : INTEGER
        END;
        dmPosition* : POINTL
      END;
      dmScale* : INTEGER;
      dmCopies* : INTEGER;
      dmDefaultSource* : INTEGER;
      dmPrintQuality* : INTEGER;
      dmColor* : INTEGER;
      dmDuplex* : INTEGER;
      dmYResolution* : INTEGER;
      dmTTOption* : INTEGER;
      dmCollate* : INTEGER;
      dmFormName* : ARRAY 32 OF WCHAR;
      dmLogPixels* : WORD;
      dmBitsPerPel* : DWORD;
      dmPelsWidth* : DWORD;
      dmPelsHeight* : DWORD;
      dmDisplayFlags* : DWORD;
      dmDisplayFrequency* : DWORD;
      dmICMMethod* : DWORD;
      dmICMIntent* : DWORD;
      dmMediaType* : DWORD;
      dmDitherType* : DWORD;
      dmReserved1* : DWORD;
      dmReserved2* : DWORD;
      dmPanningWidth* : DWORD;
      dmPanningHeight* : DWORD
    END;

    DEVMODEW* = _devicemodeW_struct;

    PDEVMODEW* = POINTER TO _devicemodeW_struct;

    NPDEVMODEW* = PDEVMODEW;

    LPDEVMODEW* = PDEVMODEW;

    DEVMODE* = DEVMODEA;

    PDEVMODE* = PDEVMODEA;

    NPDEVMODE* = NPDEVMODEA;

    LPDEVMODE* = LPDEVMODEA;

    _DISPLAY_DEVICEA_struct* = RECORD [notag]
      cb* : DWORD;
      DeviceName* : ARRAY 32 OF BYTE;
      DeviceString* : ARRAY 128 OF BYTE;
      StateFlags* : DWORD
    END;

    DISPLAY_DEVICEA* = _DISPLAY_DEVICEA_struct;

    PDISPLAY_DEVICEA* = POINTER TO _DISPLAY_DEVICEA_struct;

    LPDISPLAY_DEVICEA* = PDISPLAY_DEVICEA;

    _DISPLAY_DEVICEW_struct* = RECORD [notag]
      cb* : DWORD;
      DeviceName* : ARRAY 32 OF WCHAR;
      DeviceString* : ARRAY 128 OF WCHAR;
      StateFlags* : DWORD
    END;

    DISPLAY_DEVICEW* = _DISPLAY_DEVICEW_struct;

    PDISPLAY_DEVICEW* = POINTER TO _DISPLAY_DEVICEW_struct;

    LPDISPLAY_DEVICEW* = PDISPLAY_DEVICEW;

    DISPLAY_DEVICE* = DISPLAY_DEVICEA;

    PDISPLAY_DEVICE* = PDISPLAY_DEVICEA;

    LPDISPLAY_DEVICE* = LPDISPLAY_DEVICEA;

    _RGNDATAHEADER_struct* = RECORD [notag]
      dwSize* : DWORD;
      iType* : DWORD;
      nCount* : DWORD;
      nRgnSize* : DWORD;
      rcBound* : RECT
    END;

    RGNDATAHEADER* = _RGNDATAHEADER_struct;

    PRGNDATAHEADER* = POINTER TO _RGNDATAHEADER_struct;

    _RGNDATA_struct* = RECORD [notag]
      rdh* : RGNDATAHEADER;
      Buffer* : ARRAY 1 OF CHAR
    END;

    RGNDATA* = _RGNDATA_struct;

    PRGNDATA* = POINTER TO _RGNDATA_struct;

    NPRGNDATA* = PRGNDATA;

    LPRGNDATA* = PRGNDATA;

    _ABC_struct* = RECORD [notag]
      abcA* : LONGINT;
      abcB* : UINT;
      abcC* : LONGINT
    END;

    ABC* = _ABC_struct;

    PABC* = POINTER TO _ABC_struct;

    NPABC* = PABC;

    LPABC* = PABC;

    _ABCFLOAT_struct* = RECORD [notag]
      abcfA* : FLOAT;
      abcfB* : FLOAT;
      abcfC* : FLOAT
    END;

    ABCFLOAT* = _ABCFLOAT_struct;

    PABCFLOAT* = POINTER TO _ABCFLOAT_struct;

    NPABCFLOAT* = PABCFLOAT;

    LPABCFLOAT* = PABCFLOAT;

    _OUTLINETEXTMETRICA_struct* = RECORD [notag]
      otmSize* : UINT;
      otmTextMetrics* : TEXTMETRICA;
      otmFiller* : BYTE;
      otmPanoseNumber* : PANOSE;
      otmfsSelection* : UINT;
      otmfsType* : UINT;
      otmsCharSlopeRise* : LONGINT;
      otmsCharSlopeRun* : LONGINT;
      otmItalicAngle* : LONGINT;
      otmEMSquare* : UINT;
      otmAscent* : LONGINT;
      otmDescent* : LONGINT;
      otmLineGap* : UINT;
      otmsCapEmHeight* : UINT;
      otmsXHeight* : UINT;
      otmrcFontBox* : RECT;
      otmMacAscent* : LONGINT;
      otmMacDescent* : LONGINT;
      otmMacLineGap* : UINT;
      otmusMinimumPPEM* : UINT;
      otmptSubscriptSize* : POINT;
      otmptSubscriptOffset* : POINT;
      otmptSuperscriptSize* : POINT;
      otmptSuperscriptOffset* : POINT;
      otmsStrikeoutSize* : UINT;
      otmsStrikeoutPosition* : LONGINT;
      otmsUnderscoreSize* : LONGINT;
      otmsUnderscorePosition* : LONGINT;
      otmpFamilyName* : PSTR;
      otmpFaceName* : PSTR;
      otmpStyleName* : PSTR;
      otmpFullName* : PSTR
    END;

    OUTLINETEXTMETRICA* = _OUTLINETEXTMETRICA_struct;

    POUTLINETEXTMETRICA* = POINTER TO _OUTLINETEXTMETRICA_struct;

    NPOUTLINETEXTMETRICA* = POUTLINETEXTMETRICA;

    LPOUTLINETEXTMETRICA* = POUTLINETEXTMETRICA;

    _OUTLINETEXTMETRICW_struct* = RECORD [notag]
      otmSize* : UINT;
      otmTextMetrics* : TEXTMETRICW;
      otmFiller* : BYTE;
      otmPanoseNumber* : PANOSE;
      otmfsSelection* : UINT;
      otmfsType* : UINT;
      otmsCharSlopeRise* : LONGINT;
      otmsCharSlopeRun* : LONGINT;
      otmItalicAngle* : LONGINT;
      otmEMSquare* : UINT;
      otmAscent* : LONGINT;
      otmDescent* : LONGINT;
      otmLineGap* : UINT;
      otmsCapEmHeight* : UINT;
      otmsXHeight* : UINT;
      otmrcFontBox* : RECT;
      otmMacAscent* : LONGINT;
      otmMacDescent* : LONGINT;
      otmMacLineGap* : UINT;
      otmusMinimumPPEM* : UINT;
      otmptSubscriptSize* : POINT;
      otmptSubscriptOffset* : POINT;
      otmptSuperscriptSize* : POINT;
      otmptSuperscriptOffset* : POINT;
      otmsStrikeoutSize* : UINT;
      otmsStrikeoutPosition* : LONGINT;
      otmsUnderscoreSize* : LONGINT;
      otmsUnderscorePosition* : LONGINT;
      otmpFamilyName* : PSTR;
      otmpFaceName* : PSTR;
      otmpStyleName* : PSTR;
      otmpFullName* : PSTR
    END;

    OUTLINETEXTMETRICW* = _OUTLINETEXTMETRICW_struct;

    POUTLINETEXTMETRICW* = POINTER TO _OUTLINETEXTMETRICW_struct;

    NPOUTLINETEXTMETRICW* = POUTLINETEXTMETRICW;

    LPOUTLINETEXTMETRICW* = POUTLINETEXTMETRICW;

    OUTLINETEXTMETRIC* = OUTLINETEXTMETRICA;

    POUTLINETEXTMETRIC* = POUTLINETEXTMETRICA;

    NPOUTLINETEXTMETRIC* = NPOUTLINETEXTMETRICA;

    LPOUTLINETEXTMETRIC* = LPOUTLINETEXTMETRICA;

    tagPOLYTEXTA_struct* = RECORD [notag]
      x* : LONGINT;
      y* : LONGINT;
      n* : UINT;
      lpstr* : LPCSTR;
      uiFlags* : UINT;
      rcl* : RECT;
      pdx* : PINT
    END;

    POLYTEXTA* = tagPOLYTEXTA_struct;

    PPOLYTEXTA* = POINTER TO tagPOLYTEXTA_struct;

    NPPOLYTEXTA* = PPOLYTEXTA;

    LPPOLYTEXTA* = PPOLYTEXTA;

    tagPOLYTEXTW_struct* = RECORD [notag]
      x* : LONGINT;
      y* : LONGINT;
      n* : UINT;
      lpstr* : LPCWSTR;
      uiFlags* : UINT;
      rcl* : RECT;
      pdx* : PINT
    END;

    POLYTEXTW* = tagPOLYTEXTW_struct;

    PPOLYTEXTW* = POINTER TO tagPOLYTEXTW_struct;

    NPPOLYTEXTW* = PPOLYTEXTW;

    LPPOLYTEXTW* = PPOLYTEXTW;

    POLYTEXT* = POLYTEXTA;

    PPOLYTEXT* = PPOLYTEXTA;

    NPPOLYTEXT* = NPPOLYTEXTA;

    LPPOLYTEXT* = LPPOLYTEXTA;

    _FIXED_struct* = RECORD [ALIGN2]
      fract* : WORD;
      value* : INTEGER
    END;

    FIXED* = _FIXED_struct;

    _MAT2_struct* = RECORD [ALIGN2]
      eM11* : FIXED;
      eM12* : FIXED;
      eM21* : FIXED;
      eM22* : FIXED
    END;

    MAT2* = _MAT2_struct;

    LPMAT2* = POINTER TO _MAT2_struct;

    _GLYPHMETRICS_struct* = RECORD [notag]
      gmBlackBoxX* : UINT;
      gmBlackBoxY* : UINT;
      gmptGlyphOrigin* : POINT;
      gmCellIncX* : INTEGER;
      gmCellIncY* : INTEGER
    END;

    GLYPHMETRICS* = _GLYPHMETRICS_struct;

    LPGLYPHMETRICS* = POINTER TO _GLYPHMETRICS_struct;

    tagPOINTFX_struct* = RECORD [notag]
      x* : FIXED;
      y* : FIXED
    END;

    POINTFX* = tagPOINTFX_struct;

    LPPOINTFX* = POINTER TO tagPOINTFX_struct;

    tagTTPOLYCURVE_struct* = RECORD [notag]
      wType* : WORD;
      cpfx* : WORD;
      apfx* : ARRAY 1 OF POINTFX
    END;

    TTPOLYCURVE* = tagTTPOLYCURVE_struct;

    LPTTPOLYCURVE* = POINTER TO tagTTPOLYCURVE_struct;

    tagTTPOLYGONHEADER_struct* = RECORD [notag]
      cb* : DWORD;
      dwType* : DWORD;
      pfxStart* : POINTFX
    END;

    TTPOLYGONHEADER* = tagTTPOLYGONHEADER_struct;

    LPTTPOLYGONHEADER* = POINTER TO tagTTPOLYGONHEADER_struct;

    LPUINT* = POINTER TO ARRAY OF UINT;

    tagGCP_RESULTSA_struct* = RECORD [notag]
      lStructSize* : DWORD;
      lpOutString* : LPSTR;
      lpOrder* : LPUINT;
      lpDx* : PINT;
      lpCaretPos* : PINT;
      lpClass* : LPSTR;
      lpGlyphs* : LPWSTR;
      nGlyphs* : UINT;
      nMaxFit* : LONGINT
    END;

    GCP_RESULTSA* = tagGCP_RESULTSA_struct;

    LPGCP_RESULTSA* = POINTER TO tagGCP_RESULTSA_struct;

    tagGCP_RESULTSW_struct* = RECORD [notag]
      lStructSize* : DWORD;
      lpOutString* : LPWSTR;
      lpOrder* : LPUINT;
      lpDx* : PINT;
      lpCaretPos* : PINT;
      lpClass* : LPSTR;
      lpGlyphs* : LPWSTR;
      nGlyphs* : UINT;
      nMaxFit* : LONGINT
    END;

    GCP_RESULTSW* = tagGCP_RESULTSW_struct;

    LPGCP_RESULTSW* = POINTER TO tagGCP_RESULTSW_struct;

    GCP_RESULTS* = GCP_RESULTSA;

    LPGCP_RESULTS* = LPGCP_RESULTSA;

    _RASTERIZER_STATUS_struct* = RECORD [notag]
      nSize* : INTEGER;
      wFlags* : INTEGER;
      nLanguageID* : INTEGER
    END;

    RASTERIZER_STATUS* = _RASTERIZER_STATUS_struct;

    LPRASTERIZER_STATUS* = POINTER TO _RASTERIZER_STATUS_struct;

    tagPIXELFORMATDESCRIPTOR_struct* = RECORD [notag]
      nSize* : WORD;
      nVersion* : WORD;
      dwFlags* : DWORD;
      iPixelType* : BYTE;
      cColorBits* : BYTE;
      cRedBits* : BYTE;
      cRedShift* : BYTE;
      cGreenBits* : BYTE;
      cGreenShift* : BYTE;
      cBlueBits* : BYTE;
      cBlueShift* : BYTE;
      cAlphaBits* : BYTE;
      cAlphaShift* : BYTE;
      cAccumBits* : BYTE;
      cAccumRedBits* : BYTE;
      cAccumGreenBits* : BYTE;
      cAccumBlueBits* : BYTE;
      cAccumAlphaBits* : BYTE;
      cDepthBits* : BYTE;
      cStencilBits* : BYTE;
      cAuxBuffers* : BYTE;
      iLayerType* : BYTE;
      bReserved* : BYTE;
      dwLayerMask* : DWORD;
      dwVisibleMask* : DWORD;
      dwDamageMask* : DWORD
    END;

    PIXELFORMATDESCRIPTOR* = tagPIXELFORMATDESCRIPTOR_struct;

    PPIXELFORMATDESCRIPTOR* = POINTER TO tagPIXELFORMATDESCRIPTOR_struct;

    LPPIXELFORMATDESCRIPTOR* = PPIXELFORMATDESCRIPTOR;

    OLDFONTENUMPROC* = FARPROC;

    FONTENUMPROCA* = FARPROC;

    FONTENUMPROCW* = FARPROC;

    FONTENUMPROC* = FONTENUMPROCA;

    GOBJENUMPROC* = FARPROC;

    LINEDDAPROC* = FARPROC;

    LPFNDEVMODE* = PROCEDURE (p0 : HWND; p1 : HMODULE; VAR [nil] p2 : _devicemodeA_struct; p3 : LPSTR; p4 : LPSTR; VAR [nil] p5 : _devicemodeA_struct; p6 : LPSTR; p7 : UINT) : UINT;

    LPFNDEVCAPS* = PROCEDURE (p0 : LPSTR; p1 : LPSTR; p2 : UINT; p3 : LPSTR; VAR [nil] p4 : _devicemodeA_struct) : DWORD;

    COLOR16* = USHORT;

    _TRIVERTEX_struct* = RECORD [notag]
      x* : LONG;
      y* : LONG;
      Red* : COLOR16;
      Green* : COLOR16;
      Blue* : COLOR16;
      Alpha* : COLOR16
    END;

    TRIVERTEX* = _TRIVERTEX_struct;

    PTRIVERTEX* = POINTER TO _TRIVERTEX_struct;

    LPTRIVERTEX* = PTRIVERTEX;

    _GRADIENT_TRIANGLE_struct* = RECORD [notag]
      Vertex1* : ULONG;
      Vertex2* : ULONG;
      Vertex3* : ULONG
    END;

    GRADIENT_TRIANGLE* = _GRADIENT_TRIANGLE_struct;

    PGRADIENT_TRIANGLE* = POINTER TO _GRADIENT_TRIANGLE_struct;

    LPGRADIENT_TRIANGLE* = PGRADIENT_TRIANGLE;

    _GRADIENT_RECT_struct* = RECORD [notag]
      UpperLeft* : ULONG;
      LowerRight* : ULONG
    END;

    GRADIENT_RECT* = _GRADIENT_RECT_struct;

    PGRADIENT_RECT* = POINTER TO _GRADIENT_RECT_struct;

    LPGRADIENT_RECT* = PGRADIENT_RECT;

    _BLENDFUNCTION_struct* = RECORD [notag]
      BlendOp* : BYTE;
      BlendFlags* : BYTE;
      SourceConstantAlpha* : BYTE;
      AlphaFormat* : BYTE
    END;

    BLENDFUNCTION* = _BLENDFUNCTION_struct;

    PBLENDFUNCTION* = POINTER TO _BLENDFUNCTION_struct;

    AutoPtr_HANDLETABLE* = POINTER TO HANDLETABLE;

    AutoPtr_METARECORD* = POINTER TO METARECORD;

    MFENUMPROC* = PROCEDURE (p0 : HDC; VAR [nil] p1 : HANDLETABLE; VAR [nil] p2 : METARECORD; p3 : LONGINT; p4 : LPARAM) : LONGINT;

    AutoPtr_ENHMETARECORD* = POINTER TO ENHMETARECORD;

    ENHMFENUMPROC* = PROCEDURE (p0 : HDC; VAR [nil] p1 : HANDLETABLE; VAR [nil] p2 : ENHMETARECORD; p3 : LONGINT; p4 : LPARAM) : LONGINT;

    tagDIBSECTION_struct* = RECORD [notag]
      dsBm* : BITMAP;
      dsBmih* : BITMAPINFOHEADER;
      dsBitfields* : ARRAY 3 OF DWORD;
      dshSection* : HANDLE;
      dsOffset* : DWORD
    END;

    DIBSECTION* = tagDIBSECTION_struct;

    LPDIBSECTION* = POINTER TO tagDIBSECTION_struct;

    PDIBSECTION* = LPDIBSECTION;

    tagCOLORADJUSTMENT_struct* = RECORD [notag]
      caSize* : WORD;
      caFlags* : WORD;
      caIlluminantIndex* : WORD;
      caRedGamma* : WORD;
      caGreenGamma* : WORD;
      caBlueGamma* : WORD;
      caReferenceBlack* : WORD;
      caReferenceWhite* : WORD;
      caContrast* : SHORT;
      caBrightness* : SHORT;
      caColorfulness* : SHORT;
      caRedGreenTint* : SHORT
    END;

    COLORADJUSTMENT* = tagCOLORADJUSTMENT_struct;

    PCOLORADJUSTMENT* = POINTER TO tagCOLORADJUSTMENT_struct;

    LPCOLORADJUSTMENT* = PCOLORADJUSTMENT;

    ABORTPROC* = FARPROC;

    _DOCINFOA_struct* = RECORD [notag]
      cbSize* : LONGINT;
      lpszDocName* : LPCSTR;
      lpszOutput* : LPCSTR;
      lpszDatatype* : LPCSTR;
      fwType* : DWORD
    END;

    DOCINFOA* = _DOCINFOA_struct;

    LPDOCINFOA* = POINTER TO _DOCINFOA_struct;

    _DOCINFOW_struct* = RECORD [notag]
      cbSize* : LONGINT;
      lpszDocName* : LPCWSTR;
      lpszOutput* : LPCWSTR;
      lpszDatatype* : LPCWSTR;
      fwType* : DWORD
    END;

    DOCINFOW* = _DOCINFOW_struct;

    LPDOCINFOW* = POINTER TO _DOCINFOW_struct;

    DOCINFO* = DOCINFOA;

    LPDOCINFO* = LPDOCINFOA;

    tagKERNINGPAIR_struct* = RECORD [notag]
      wFirst* : WORD;
      wSecond* : WORD;
      iKernAmount* : LONGINT
    END;

    KERNINGPAIR* = tagKERNINGPAIR_struct;

    LPKERNINGPAIR* = POINTER TO tagKERNINGPAIR_struct;

    ICMENUMPROCA* = PROCEDURE (p0 : LPSTR; p1 : LPARAM) : LONGINT;

    ICMENUMPROCW* = PROCEDURE (p0 : LPWSTR; p1 : LPARAM) : LONGINT;

    tagEMR_struct* = RECORD [notag]
      iType* : DWORD;
      nSize* : DWORD
    END;

    EMR* = tagEMR_struct;

    PEMR* = POINTER TO tagEMR_struct;

    tagEMRTEXT_struct* = RECORD [notag]
      ptlReference* : POINTL;
      nChars* : DWORD;
      offString* : DWORD;
      fOptions* : DWORD;
      rcl* : RECTL;
      offDx* : DWORD
    END;

    EMRTEXT* = tagEMRTEXT_struct;

    PEMRTEXT* = POINTER TO tagEMRTEXT_struct;

    tagABORTPATH_struct* = RECORD [notag]
      emr* : EMR
    END;

    EMRABORTPATH* = tagABORTPATH_struct;

    PEMRABORTPATH* = POINTER TO tagABORTPATH_struct;

    EMRBEGINPATH* = tagABORTPATH_struct;

    PEMRBEGINPATH* = PEMRABORTPATH;

    EMRENDPATH* = tagABORTPATH_struct;

    PEMRENDPATH* = PEMRABORTPATH;

    EMRCLOSEFIGURE* = tagABORTPATH_struct;

    PEMRCLOSEFIGURE* = PEMRABORTPATH;

    EMRFLATTENPATH* = tagABORTPATH_struct;

    PEMRFLATTENPATH* = PEMRABORTPATH;

    EMRWIDENPATH* = tagABORTPATH_struct;

    PEMRWIDENPATH* = PEMRABORTPATH;

    EMRSETMETARGN* = tagABORTPATH_struct;

    PEMRSETMETARGN* = PEMRABORTPATH;

    EMRSAVEDC* = tagABORTPATH_struct;

    PEMRSAVEDC* = PEMRABORTPATH;

    EMRREALIZEPALETTE* = tagABORTPATH_struct;

    PEMRREALIZEPALETTE* = PEMRABORTPATH;

    tagEMRSELECTCLIPPATH_struct* = RECORD [notag]
      emr* : EMR;
      iMode* : DWORD
    END;

    EMRSELECTCLIPPATH* = tagEMRSELECTCLIPPATH_struct;

    PEMRSELECTCLIPPATH* = POINTER TO tagEMRSELECTCLIPPATH_struct;

    EMRSETBKMODE* = tagEMRSELECTCLIPPATH_struct;

    PEMRSETBKMODE* = PEMRSELECTCLIPPATH;

    EMRSETMAPMODE* = tagEMRSELECTCLIPPATH_struct;

    PEMRSETMAPMODE* = PEMRSELECTCLIPPATH;

    EMRSETPOLYFILLMODE* = tagEMRSELECTCLIPPATH_struct;

    PEMRSETPOLYFILLMODE* = PEMRSELECTCLIPPATH;

    EMRSETROP2* = tagEMRSELECTCLIPPATH_struct;

    PEMRSETROP2* = PEMRSELECTCLIPPATH;

    EMRSETSTRETCHBLTMODE* = tagEMRSELECTCLIPPATH_struct;

    PEMRSETSTRETCHBLTMODE* = PEMRSELECTCLIPPATH;

    EMRSETICMMODE* = tagEMRSELECTCLIPPATH_struct;

    PEMRSETICMMODE* = PEMRSELECTCLIPPATH;

    EMRSETTEXTALIGN* = tagEMRSELECTCLIPPATH_struct;

    PEMRSETTEXTALIGN* = PEMRSELECTCLIPPATH;

    tagEMRSETMITERLIMIT_struct* = RECORD [notag]
      emr* : EMR;
      eMiterLimit* : FLOAT
    END;

    EMRSETMITERLIMIT* = tagEMRSETMITERLIMIT_struct;

    PEMRSETMITERLIMIT* = POINTER TO tagEMRSETMITERLIMIT_struct;

    tagEMRRESTOREDC_struct* = RECORD [notag]
      emr* : EMR;
      iRelative* : LONG
    END;

    EMRRESTOREDC* = tagEMRRESTOREDC_struct;

    PEMRRESTOREDC* = POINTER TO tagEMRRESTOREDC_struct;

    tagEMRSETARCDIRECTION_struct* = RECORD [notag]
      emr* : EMR;
      iArcDirection* : DWORD
    END;

    EMRSETARCDIRECTION* = tagEMRSETARCDIRECTION_struct;

    PEMRSETARCDIRECTION* = POINTER TO tagEMRSETARCDIRECTION_struct;

    tagEMRSETMAPPERFLAGS_struct* = RECORD [notag]
      emr* : EMR;
      dwFlags* : DWORD
    END;

    EMRSETMAPPERFLAGS* = tagEMRSETMAPPERFLAGS_struct;

    PEMRSETMAPPERFLAGS* = POINTER TO tagEMRSETMAPPERFLAGS_struct;

    tagEMRSETTEXTCOLOR_struct* = RECORD [notag]
      emr* : EMR;
      crColor* : COLORREF
    END;

    EMRSETBKCOLOR* = tagEMRSETTEXTCOLOR_struct;

    PEMRSETBKCOLOR* = POINTER TO tagEMRSETTEXTCOLOR_struct;

    EMRSETTEXTCOLOR* = tagEMRSETTEXTCOLOR_struct;

    PEMRSETTEXTCOLOR* = PEMRSETBKCOLOR;

    tagEMRSELECTOBJECT_struct* = RECORD [notag]
      emr* : EMR;
      ihObject* : DWORD
    END;

    EMRSELECTOBJECT* = tagEMRSELECTOBJECT_struct;

    PEMRSELECTOBJECT* = POINTER TO tagEMRSELECTOBJECT_struct;

    EMRDELETEOBJECT* = tagEMRSELECTOBJECT_struct;

    PEMRDELETEOBJECT* = PEMRSELECTOBJECT;

    tagEMRSELECTCOLORSPACE_struct* = RECORD [notag]
      emr* : EMR;
      ihCS* : DWORD
    END;

    EMRSELECTCOLORSPACE* = tagEMRSELECTCOLORSPACE_struct;

    PEMRSELECTCOLORSPACE* = POINTER TO tagEMRSELECTCOLORSPACE_struct;

    EMRDELETECOLORSPACE* = tagEMRSELECTCOLORSPACE_struct;

    PEMRDELETECOLORSPACE* = PEMRSELECTCOLORSPACE;

    tagEMRSELECTPALETTE_struct* = RECORD [notag]
      emr* : EMR;
      ihPal* : DWORD
    END;

    EMRSELECTPALETTE* = tagEMRSELECTPALETTE_struct;

    PEMRSELECTPALETTE* = POINTER TO tagEMRSELECTPALETTE_struct;

    tagEMRRESIZEPALETTE_struct* = RECORD [notag]
      emr* : EMR;
      ihPal* : DWORD;
      cEntries* : DWORD
    END;

    EMRRESIZEPALETTE* = tagEMRRESIZEPALETTE_struct;

    PEMRRESIZEPALETTE* = POINTER TO tagEMRRESIZEPALETTE_struct;

    tagEMRSETPALETTEENTRIES_struct* = RECORD [notag]
      emr* : EMR;
      ihPal* : DWORD;
      iStart* : DWORD;
      cEntries* : DWORD;
      aPalEntries* : ARRAY 1 OF PALETTEENTRY
    END;

    EMRSETPALETTEENTRIES* = tagEMRSETPALETTEENTRIES_struct;

    PEMRSETPALETTEENTRIES* = POINTER TO tagEMRSETPALETTEENTRIES_struct;

    tagEMRSETCOLORADJUSTMENT_struct* = RECORD [notag]
      emr* : EMR;
      ColorAdjustment* : COLORADJUSTMENT
    END;

    EMRSETCOLORADJUSTMENT* = tagEMRSETCOLORADJUSTMENT_struct;

    PEMRSETCOLORADJUSTMENT* = POINTER TO tagEMRSETCOLORADJUSTMENT_struct;

    tagEMRGDICOMMENT_struct* = RECORD [notag]
      emr* : EMR;
      cbData* : DWORD;
      Data* : ARRAY 1 OF BYTE
    END;

    EMRGDICOMMENT* = tagEMRGDICOMMENT_struct;

    PEMRGDICOMMENT* = POINTER TO tagEMRGDICOMMENT_struct;

    tagEMREOF_struct* = RECORD [notag]
      emr* : EMR;
      nPalEntries* : DWORD;
      offPalEntries* : DWORD;
      nSizeLast* : DWORD
    END;

    EMREOF* = tagEMREOF_struct;

    PEMREOF* = POINTER TO tagEMREOF_struct;

    tagEMRLINETO_struct* = RECORD [notag]
      emr* : EMR;
      ptl* : POINTL
    END;

    EMRLINETO* = tagEMRLINETO_struct;

    PEMRLINETO* = POINTER TO tagEMRLINETO_struct;

    EMRMOVETOEX* = tagEMRLINETO_struct;

    PEMRMOVETOEX* = PEMRLINETO;

    tagEMROFFSETCLIPRGN_struct* = RECORD [notag]
      emr* : EMR;
      ptlOffset* : POINTL
    END;

    EMROFFSETCLIPRGN* = tagEMROFFSETCLIPRGN_struct;

    PEMROFFSETCLIPRGN* = POINTER TO tagEMROFFSETCLIPRGN_struct;

    tagEMRFILLPATH_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL
    END;

    EMRFILLPATH* = tagEMRFILLPATH_struct;

    PEMRFILLPATH* = POINTER TO tagEMRFILLPATH_struct;

    EMRSTROKEANDFILLPATH* = tagEMRFILLPATH_struct;

    PEMRSTROKEANDFILLPATH* = PEMRFILLPATH;

    EMRSTROKEPATH* = tagEMRFILLPATH_struct;

    PEMRSTROKEPATH* = PEMRFILLPATH;

    tagEMREXCLUDECLIPRECT_struct* = RECORD [notag]
      emr* : EMR;
      rclClip* : RECTL
    END;

    EMREXCLUDECLIPRECT* = tagEMREXCLUDECLIPRECT_struct;

    PEMREXCLUDECLIPRECT* = POINTER TO tagEMREXCLUDECLIPRECT_struct;

    EMRINTERSECTCLIPRECT* = tagEMREXCLUDECLIPRECT_struct;

    PEMRINTERSECTCLIPRECT* = PEMREXCLUDECLIPRECT;

    tagEMRSETVIEWPORTORGEX_struct* = RECORD [notag]
      emr* : EMR;
      ptlOrigin* : POINTL
    END;

    EMRSETVIEWPORTORGEX* = tagEMRSETVIEWPORTORGEX_struct;

    PEMRSETVIEWPORTORGEX* = POINTER TO tagEMRSETVIEWPORTORGEX_struct;

    EMRSETWINDOWORGEX* = tagEMRSETVIEWPORTORGEX_struct;

    PEMRSETWINDOWORGEX* = PEMRSETVIEWPORTORGEX;

    EMRSETBRUSHORGEX* = tagEMRSETVIEWPORTORGEX_struct;

    PEMRSETBRUSHORGEX* = PEMRSETVIEWPORTORGEX;

    tagEMRSETVIEWPORTEXTEX_struct* = RECORD [notag]
      emr* : EMR;
      szlExtent* : SIZEL
    END;

    EMRSETVIEWPORTEXTEX* = tagEMRSETVIEWPORTEXTEX_struct;

    PEMRSETVIEWPORTEXTEX* = POINTER TO tagEMRSETVIEWPORTEXTEX_struct;

    EMRSETWINDOWEXTEX* = tagEMRSETVIEWPORTEXTEX_struct;

    PEMRSETWINDOWEXTEX* = PEMRSETVIEWPORTEXTEX;

    tagEMRSCALEVIEWPORTEXTEX_struct* = RECORD [notag]
      emr* : EMR;
      xNum* : LONG;
      xDenom* : LONG;
      yNum* : LONG;
      yDenom* : LONG
    END;

    EMRSCALEVIEWPORTEXTEX* = tagEMRSCALEVIEWPORTEXTEX_struct;

    PEMRSCALEVIEWPORTEXTEX* = POINTER TO tagEMRSCALEVIEWPORTEXTEX_struct;

    EMRSCALEWINDOWEXTEX* = tagEMRSCALEVIEWPORTEXTEX_struct;

    PEMRSCALEWINDOWEXTEX* = PEMRSCALEVIEWPORTEXTEX;

    tagEMRSETWORLDTRANSFORM_struct* = RECORD [notag]
      emr* : EMR;
      xform* : XFORM
    END;

    EMRSETWORLDTRANSFORM* = tagEMRSETWORLDTRANSFORM_struct;

    PEMRSETWORLDTRANSFORM* = POINTER TO tagEMRSETWORLDTRANSFORM_struct;

    tagEMRMODIFYWORLDTRANSFORM_struct* = RECORD [notag]
      emr* : EMR;
      xform* : XFORM;
      iMode* : DWORD
    END;

    EMRMODIFYWORLDTRANSFORM* = tagEMRMODIFYWORLDTRANSFORM_struct;

    PEMRMODIFYWORLDTRANSFORM* = POINTER TO tagEMRMODIFYWORLDTRANSFORM_struct;

    tagEMRSETPIXELV_struct* = RECORD [notag]
      emr* : EMR;
      ptlPixel* : POINTL;
      crColor* : COLORREF
    END;

    EMRSETPIXELV* = tagEMRSETPIXELV_struct;

    PEMRSETPIXELV* = POINTER TO tagEMRSETPIXELV_struct;

    tagEMREXTFLOODFILL_struct* = RECORD [notag]
      emr* : EMR;
      ptlStart* : POINTL;
      crColor* : COLORREF;
      iMode* : DWORD
    END;

    EMREXTFLOODFILL* = tagEMREXTFLOODFILL_struct;

    PEMREXTFLOODFILL* = POINTER TO tagEMREXTFLOODFILL_struct;

    tagEMRELLIPSE_struct* = RECORD [notag]
      emr* : EMR;
      rclBox* : RECTL
    END;

    EMRELLIPSE* = tagEMRELLIPSE_struct;

    PEMRELLIPSE* = POINTER TO tagEMRELLIPSE_struct;

    EMRRECTANGLE* = tagEMRELLIPSE_struct;

    PEMRRECTANGLE* = PEMRELLIPSE;

    tagEMRROUNDRECT_struct* = RECORD [notag]
      emr* : EMR;
      rclBox* : RECTL;
      szlCorner* : SIZEL
    END;

    EMRROUNDRECT* = tagEMRROUNDRECT_struct;

    PEMRROUNDRECT* = POINTER TO tagEMRROUNDRECT_struct;

    tagEMRARC_struct* = RECORD [notag]
      emr* : EMR;
      rclBox* : RECTL;
      ptlStart* : POINTL;
      ptlEnd* : POINTL
    END;

    EMRARC* = tagEMRARC_struct;

    PEMRARC* = POINTER TO tagEMRARC_struct;

    EMRARCTO* = tagEMRARC_struct;

    PEMRARCTO* = PEMRARC;

    EMRCHORD* = tagEMRARC_struct;

    PEMRCHORD* = PEMRARC;

    EMRPIE* = tagEMRARC_struct;

    PEMRPIE* = PEMRARC;

    tagEMRANGLEARC_struct* = RECORD [notag]
      emr* : EMR;
      ptlCenter* : POINTL;
      nRadius* : DWORD;
      eStartAngle* : FLOAT;
      eSweepAngle* : FLOAT
    END;

    EMRANGLEARC* = tagEMRANGLEARC_struct;

    PEMRANGLEARC* = POINTER TO tagEMRANGLEARC_struct;

    tagEMRPOLYLINE_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      cptl* : DWORD;
      aptl* : ARRAY 1 OF POINTL
    END;

    EMRPOLYLINE* = tagEMRPOLYLINE_struct;

    PEMRPOLYLINE* = POINTER TO tagEMRPOLYLINE_struct;

    EMRPOLYBEZIER* = tagEMRPOLYLINE_struct;

    PEMRPOLYBEZIER* = PEMRPOLYLINE;

    EMRPOLYGON* = tagEMRPOLYLINE_struct;

    PEMRPOLYGON* = PEMRPOLYLINE;

    EMRPOLYBEZIERTO* = tagEMRPOLYLINE_struct;

    PEMRPOLYBEZIERTO* = PEMRPOLYLINE;

    EMRPOLYLINETO* = tagEMRPOLYLINE_struct;

    PEMRPOLYLINETO* = PEMRPOLYLINE;

    tagEMRPOLYLINE16_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      cpts* : DWORD;
      apts* : ARRAY 1 OF POINTS
    END;

    EMRPOLYLINE16* = tagEMRPOLYLINE16_struct;

    PEMRPOLYLINE16* = POINTER TO tagEMRPOLYLINE16_struct;

    EMRPOLYBEZIER16* = tagEMRPOLYLINE16_struct;

    PEMRPOLYBEZIER16* = PEMRPOLYLINE16;

    EMRPOLYGON16* = tagEMRPOLYLINE16_struct;

    PEMRPOLYGON16* = PEMRPOLYLINE16;

    EMRPOLYBEZIERTO16* = tagEMRPOLYLINE16_struct;

    PEMRPOLYBEZIERTO16* = PEMRPOLYLINE16;

    EMRPOLYLINETO16* = tagEMRPOLYLINE16_struct;

    PEMRPOLYLINETO16* = PEMRPOLYLINE16;

    tagEMRPOLYDRAW_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      cptl* : DWORD;
      aptl* : ARRAY 1 OF POINTL;
      abTypes* : ARRAY 1 OF BYTE
    END;

    EMRPOLYDRAW* = tagEMRPOLYDRAW_struct;

    PEMRPOLYDRAW* = POINTER TO tagEMRPOLYDRAW_struct;

    tagEMRPOLYDRAW16_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      cpts* : DWORD;
      apts* : ARRAY 1 OF POINTS;
      abTypes* : ARRAY 1 OF BYTE
    END;

    EMRPOLYDRAW16* = tagEMRPOLYDRAW16_struct;

    PEMRPOLYDRAW16* = POINTER TO tagEMRPOLYDRAW16_struct;

    tagEMRPOLYPOLYLINE_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      nPolys* : DWORD;
      cptl* : DWORD;
      aPolyCounts* : ARRAY 1 OF DWORD;
      aptl* : ARRAY 1 OF POINTL
    END;

    EMRPOLYPOLYLINE* = tagEMRPOLYPOLYLINE_struct;

    PEMRPOLYPOLYLINE* = POINTER TO tagEMRPOLYPOLYLINE_struct;

    EMRPOLYPOLYGON* = tagEMRPOLYPOLYLINE_struct;

    PEMRPOLYPOLYGON* = PEMRPOLYPOLYLINE;

    tagEMRPOLYPOLYLINE16_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      nPolys* : DWORD;
      cpts* : DWORD;
      aPolyCounts* : ARRAY 1 OF DWORD;
      apts* : ARRAY 1 OF POINTS
    END;

    EMRPOLYPOLYLINE16* = tagEMRPOLYPOLYLINE16_struct;

    PEMRPOLYPOLYLINE16* = POINTER TO tagEMRPOLYPOLYLINE16_struct;

    EMRPOLYPOLYGON16* = tagEMRPOLYPOLYLINE16_struct;

    PEMRPOLYPOLYGON16* = PEMRPOLYPOLYLINE16;

    tagEMRINVERTRGN_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      cbRgnData* : DWORD;
      RgnData* : ARRAY 1 OF BYTE
    END;

    EMRINVERTRGN* = tagEMRINVERTRGN_struct;

    PEMRINVERTRGN* = POINTER TO tagEMRINVERTRGN_struct;

    EMRPAINTRGN* = tagEMRINVERTRGN_struct;

    PEMRPAINTRGN* = PEMRINVERTRGN;

    tagEMRFILLRGN_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      cbRgnData* : DWORD;
      ihBrush* : DWORD;
      RgnData* : ARRAY 1 OF BYTE
    END;

    EMRFILLRGN* = tagEMRFILLRGN_struct;

    PEMRFILLRGN* = POINTER TO tagEMRFILLRGN_struct;

    tagEMRFRAMERGN_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      cbRgnData* : DWORD;
      ihBrush* : DWORD;
      szlStroke* : SIZEL;
      RgnData* : ARRAY 1 OF BYTE
    END;

    EMRFRAMERGN* = tagEMRFRAMERGN_struct;

    PEMRFRAMERGN* = POINTER TO tagEMRFRAMERGN_struct;

    tagEMREXTSELECTCLIPRGN_struct* = RECORD [notag]
      emr* : EMR;
      cbRgnData* : DWORD;
      iMode* : DWORD;
      RgnData* : ARRAY 1 OF BYTE
    END;

    EMREXTSELECTCLIPRGN* = tagEMREXTSELECTCLIPRGN_struct;

    PEMREXTSELECTCLIPRGN* = POINTER TO tagEMREXTSELECTCLIPRGN_struct;

    tagEMREXTTEXTOUTA_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      iGraphicsMode* : DWORD;
      exScale* : FLOAT;
      eyScale* : FLOAT;
      emrtext* : EMRTEXT
    END;

    EMREXTTEXTOUTA* = tagEMREXTTEXTOUTA_struct;

    PEMREXTTEXTOUTA* = POINTER TO tagEMREXTTEXTOUTA_struct;

    EMREXTTEXTOUTW* = tagEMREXTTEXTOUTA_struct;

    PEMREXTTEXTOUTW* = PEMREXTTEXTOUTA;

    tagEMRPOLYTEXTOUTA_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      iGraphicsMode* : DWORD;
      exScale* : FLOAT;
      eyScale* : FLOAT;
      cStrings* : LONG;
      aemrtext* : ARRAY 1 OF EMRTEXT
    END;

    EMRPOLYTEXTOUTA* = tagEMRPOLYTEXTOUTA_struct;

    PEMRPOLYTEXTOUTA* = POINTER TO tagEMRPOLYTEXTOUTA_struct;

    EMRPOLYTEXTOUTW* = tagEMRPOLYTEXTOUTA_struct;

    PEMRPOLYTEXTOUTW* = PEMRPOLYTEXTOUTA;

    tagEMRBITBLT_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      xDest* : LONG;
      yDest* : LONG;
      cxDest* : LONG;
      cyDest* : LONG;
      dwRop* : DWORD;
      xSrc* : LONG;
      ySrc* : LONG;
      xformSrc* : XFORM;
      crBkColorSrc* : COLORREF;
      iUsageSrc* : DWORD;
      offBmiSrc* : DWORD;
      cbBmiSrc* : DWORD;
      offBitsSrc* : DWORD;
      cbBitsSrc* : DWORD
    END;

    EMRBITBLT* = tagEMRBITBLT_struct;

    PEMRBITBLT* = POINTER TO tagEMRBITBLT_struct;

    tagEMRSTRETCHBLT_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      xDest* : LONG;
      yDest* : LONG;
      cxDest* : LONG;
      cyDest* : LONG;
      dwRop* : DWORD;
      xSrc* : LONG;
      ySrc* : LONG;
      xformSrc* : XFORM;
      crBkColorSrc* : COLORREF;
      iUsageSrc* : DWORD;
      offBmiSrc* : DWORD;
      cbBmiSrc* : DWORD;
      offBitsSrc* : DWORD;
      cbBitsSrc* : DWORD;
      cxSrc* : LONG;
      cySrc* : LONG
    END;

    EMRSTRETCHBLT* = tagEMRSTRETCHBLT_struct;

    PEMRSTRETCHBLT* = POINTER TO tagEMRSTRETCHBLT_struct;

    tagEMRMASKBLT_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      xDest* : LONG;
      yDest* : LONG;
      cxDest* : LONG;
      cyDest* : LONG;
      dwRop* : DWORD;
      xSrc* : LONG;
      ySrc* : LONG;
      xformSrc* : XFORM;
      crBkColorSrc* : COLORREF;
      iUsageSrc* : DWORD;
      offBmiSrc* : DWORD;
      cbBmiSrc* : DWORD;
      offBitsSrc* : DWORD;
      cbBitsSrc* : DWORD;
      xMask* : LONG;
      yMask* : LONG;
      iUsageMask* : DWORD;
      offBmiMask* : DWORD;
      cbBmiMask* : DWORD;
      offBitsMask* : DWORD;
      cbBitsMask* : DWORD
    END;

    EMRMASKBLT* = tagEMRMASKBLT_struct;

    PEMRMASKBLT* = POINTER TO tagEMRMASKBLT_struct;

    tagEMRPLGBLT_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      aptlDest* : ARRAY 3 OF POINTL;
      xSrc* : LONG;
      ySrc* : LONG;
      cxSrc* : LONG;
      cySrc* : LONG;
      xformSrc* : XFORM;
      crBkColorSrc* : COLORREF;
      iUsageSrc* : DWORD;
      offBmiSrc* : DWORD;
      cbBmiSrc* : DWORD;
      offBitsSrc* : DWORD;
      cbBitsSrc* : DWORD;
      xMask* : LONG;
      yMask* : LONG;
      iUsageMask* : DWORD;
      offBmiMask* : DWORD;
      cbBmiMask* : DWORD;
      offBitsMask* : DWORD;
      cbBitsMask* : DWORD
    END;

    EMRPLGBLT* = tagEMRPLGBLT_struct;

    PEMRPLGBLT* = POINTER TO tagEMRPLGBLT_struct;

    tagEMRSETDIBITSTODEVICE_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      xDest* : LONG;
      yDest* : LONG;
      xSrc* : LONG;
      ySrc* : LONG;
      cxSrc* : LONG;
      cySrc* : LONG;
      offBmiSrc* : DWORD;
      cbBmiSrc* : DWORD;
      offBitsSrc* : DWORD;
      cbBitsSrc* : DWORD;
      iUsageSrc* : DWORD;
      iStartScan* : DWORD;
      cScans* : DWORD
    END;

    EMRSETDIBITSTODEVICE* = tagEMRSETDIBITSTODEVICE_struct;

    PEMRSETDIBITSTODEVICE* = POINTER TO tagEMRSETDIBITSTODEVICE_struct;

    tagEMRSTRETCHDIBITS_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      xDest* : LONG;
      yDest* : LONG;
      xSrc* : LONG;
      ySrc* : LONG;
      cxSrc* : LONG;
      cySrc* : LONG;
      offBmiSrc* : DWORD;
      cbBmiSrc* : DWORD;
      offBitsSrc* : DWORD;
      cbBitsSrc* : DWORD;
      iUsageSrc* : DWORD;
      dwRop* : DWORD;
      cxDest* : LONG;
      cyDest* : LONG
    END;

    EMRSTRETCHDIBITS* = tagEMRSTRETCHDIBITS_struct;

    PEMRSTRETCHDIBITS* = POINTER TO tagEMRSTRETCHDIBITS_struct;

    tagEMREXTCREATEFONTINDIRECTW_struct* = RECORD [notag]
      emr* : EMR;
      ihFont* : DWORD;
      elfw* : EXTLOGFONTW
    END;

    EMREXTCREATEFONTINDIRECTW* = tagEMREXTCREATEFONTINDIRECTW_struct;

    PEMREXTCREATEFONTINDIRECTW* = POINTER TO tagEMREXTCREATEFONTINDIRECTW_struct;

    tagEMRCREATEPALETTE_struct* = RECORD [notag]
      emr* : EMR;
      ihPal* : DWORD;
      lgpl* : LOGPALETTE
    END;

    EMRCREATEPALETTE* = tagEMRCREATEPALETTE_struct;

    PEMRCREATEPALETTE* = POINTER TO tagEMRCREATEPALETTE_struct;

    tagEMRCREATECOLORSPACE_struct* = RECORD [notag]
      emr* : EMR;
      ihCS* : DWORD;
      lcs* : LOGCOLORSPACEW
    END;

    EMRCREATECOLORSPACE* = tagEMRCREATECOLORSPACE_struct;

    PEMRCREATECOLORSPACE* = POINTER TO tagEMRCREATECOLORSPACE_struct;

    tagEMRCREATEPEN_struct* = RECORD [notag]
      emr* : EMR;
      ihPen* : DWORD;
      lopn* : LOGPEN
    END;

    EMRCREATEPEN* = tagEMRCREATEPEN_struct;

    PEMRCREATEPEN* = POINTER TO tagEMRCREATEPEN_struct;

    tagEMREXTCREATEPEN_struct* = RECORD [notag]
      emr* : EMR;
      ihPen* : DWORD;
      offBmi* : DWORD;
      cbBmi* : DWORD;
      offBits* : DWORD;
      cbBits* : DWORD;
      elp* : EXTLOGPEN
    END;

    EMREXTCREATEPEN* = tagEMREXTCREATEPEN_struct;

    PEMREXTCREATEPEN* = POINTER TO tagEMREXTCREATEPEN_struct;

    tagEMRCREATEBRUSHINDIRECT_struct* = RECORD [notag]
      emr* : EMR;
      ihBrush* : DWORD;
      lb* : LOGBRUSH
    END;

    EMRCREATEBRUSHINDIRECT* = tagEMRCREATEBRUSHINDIRECT_struct;

    PEMRCREATEBRUSHINDIRECT* = POINTER TO tagEMRCREATEBRUSHINDIRECT_struct;

    tagEMRCREATEMONOBRUSH_struct* = RECORD [notag]
      emr* : EMR;
      ihBrush* : DWORD;
      iUsage* : DWORD;
      offBmi* : DWORD;
      cbBmi* : DWORD;
      offBits* : DWORD;
      cbBits* : DWORD
    END;

    EMRCREATEMONOBRUSH* = tagEMRCREATEMONOBRUSH_struct;

    PEMRCREATEMONOBRUSH* = POINTER TO tagEMRCREATEMONOBRUSH_struct;

    tagEMRCREATEDIBPATTERNBRUSHPT_struct* = RECORD [notag]
      emr* : EMR;
      ihBrush* : DWORD;
      iUsage* : DWORD;
      offBmi* : DWORD;
      cbBmi* : DWORD;
      offBits* : DWORD;
      cbBits* : DWORD
    END;

    EMRCREATEDIBPATTERNBRUSHPT* = tagEMRCREATEDIBPATTERNBRUSHPT_struct;

    PEMRCREATEDIBPATTERNBRUSHPT* = POINTER TO tagEMRCREATEDIBPATTERNBRUSHPT_struct;

    tagEMRFORMAT_struct* = RECORD [notag]
      dSignature* : DWORD;
      nVersion* : DWORD;
      cbData* : DWORD;
      offData* : DWORD
    END;

    EMRFORMAT* = tagEMRFORMAT_struct;

    PEMRFORMAT* = POINTER TO tagEMRFORMAT_struct;

    tagEMRGLSRECORD_struct* = RECORD [notag]
      emr* : EMR;
      cbData* : DWORD;
      Data* : ARRAY 1 OF BYTE
    END;

    EMRGLSRECORD* = tagEMRGLSRECORD_struct;

    PEMRGLSRECORD* = POINTER TO tagEMRGLSRECORD_struct;

    tagEMRGLSBOUNDEDRECORD_struct* = RECORD [notag]
      emr* : EMR;
      rclBounds* : RECTL;
      cbData* : DWORD;
      Data* : ARRAY 1 OF BYTE
    END;

    EMRGLSBOUNDEDRECORD* = tagEMRGLSBOUNDEDRECORD_struct;

    PEMRGLSBOUNDEDRECORD* = POINTER TO tagEMRGLSBOUNDEDRECORD_struct;

    tagEMRPIXELFORMAT_struct* = RECORD [notag]
      emr* : EMR;
      pfd* : PIXELFORMATDESCRIPTOR
    END;

    EMRPIXELFORMAT* = tagEMRPIXELFORMAT_struct;

    PEMRPIXELFORMAT* = POINTER TO tagEMRPIXELFORMAT_struct;

    tagEMRSETICMPROFILE_struct* = RECORD [notag]
      emr* : EMR;
      dwFlags* : DWORD;
      cbName* : DWORD;
      cbData* : DWORD;
      Data* : ARRAY 1 OF BYTE
    END;

    EMRSETICMPROFILE* = tagEMRSETICMPROFILE_struct;

    PEMRSETICMPROFILE* = POINTER TO tagEMRSETICMPROFILE_struct;

    _POINTFLOAT_struct* = RECORD [notag]
      x* : FLOAT;
      y* : FLOAT
    END;

    POINTFLOAT* = _POINTFLOAT_struct;

    PPOINTFLOAT* = POINTER TO _POINTFLOAT_struct;

    _GLYPHMETRICSFLOAT_struct* = RECORD [notag]
      gmfBlackBoxX* : FLOAT;
      gmfBlackBoxY* : FLOAT;
      gmfptGlyphOrigin* : POINTFLOAT;
      gmfCellIncX* : FLOAT;
      gmfCellIncY* : FLOAT
    END;

    GLYPHMETRICSFLOAT* = _GLYPHMETRICSFLOAT_struct;

    PGLYPHMETRICSFLOAT* = POINTER TO _GLYPHMETRICSFLOAT_struct;

    LPGLYPHMETRICSFLOAT* = PGLYPHMETRICSFLOAT;

    tagLAYERPLANEDESCRIPTOR_struct* = RECORD [notag]
      nSize* : WORD;
      nVersion* : WORD;
      dwFlags* : DWORD;
      iPixelType* : BYTE;
      cColorBits* : BYTE;
      cRedBits* : BYTE;
      cRedShift* : BYTE;
      cGreenBits* : BYTE;
      cGreenShift* : BYTE;
      cBlueBits* : BYTE;
      cBlueShift* : BYTE;
      cAlphaBits* : BYTE;
      cAlphaShift* : BYTE;
      cAccumBits* : BYTE;
      cAccumRedBits* : BYTE;
      cAccumGreenBits* : BYTE;
      cAccumBlueBits* : BYTE;
      cAccumAlphaBits* : BYTE;
      cDepthBits* : BYTE;
      cStencilBits* : BYTE;
      cAuxBuffers* : BYTE;
      iLayerPlane* : BYTE;
      bReserved* : BYTE;
      crTransparent* : COLORREF
    END;

    LAYERPLANEDESCRIPTOR* = tagLAYERPLANEDESCRIPTOR_struct;

    PLAYERPLANEDESCRIPTOR* = POINTER TO tagLAYERPLANEDESCRIPTOR_struct;

    LPLAYERPLANEDESCRIPTOR* = PLAYERPLANEDESCRIPTOR;

    HDWP* = HANDLE;

    LPMENUTEMPLATEA* = PVOID;

    LPMENUTEMPLATEW* = PVOID;

    LPMENUTEMPLATE* = LPMENUTEMPLATEA;

    WNDPROC* = PROCEDURE (p0 : HWND; p1 : UINT; p2 : WPARAM; p3 : LPARAM) : LRESULT;

    DLGPROC* = FARPROC;

    TIMERPROC* = FARPROC;

    GRAYSTRINGPROC* = FARPROC;

    WNDENUMPROC* = FARPROC;

    HOOKPROC* = FARPROC;

    SENDASYNCPROC* = FARPROC;

    EDITWORDBREAKPROCA* = FARPROC;

    EDITWORDBREAKPROCW* = FARPROC;

    PROPENUMPROCA* = FARPROC;

    PROPENUMPROCW* = FARPROC;

    PROPENUMPROCEXA* = FARPROC;

    PROPENUMPROCEXW* = FARPROC;

    DRAWSTATEPROC* = FARPROC;

    PROPENUMPROC* = PROPENUMPROCA;

    PROPENUMPROCEX* = PROPENUMPROCEXA;

    EDITWORDBREAKPROC* = EDITWORDBREAKPROCA;

    NAMEENUMPROCA* = FARPROC;

    NAMEENUMPROCW* = FARPROC;

    WINSTAENUMPROCA* = FARPROC;

    DESKTOPENUMPROCA* = FARPROC;

    WINSTAENUMPROCW* = FARPROC;

    DESKTOPENUMPROCW* = FARPROC;

    WINSTAENUMPROC* = WINSTAENUMPROCA;

    DESKTOPENUMPROC* = DESKTOPENUMPROCA;

    LPCREATESTRUCTA* = POINTER TO tagCREATESTRUCTA_struct;

    tagCBT_CREATEWNDA_struct* = RECORD [notag]
      lpcs* : LPCREATESTRUCTA;
      hwndInsertAfter* : HWND
    END;

    CBT_CREATEWNDA* = tagCBT_CREATEWNDA_struct;

    LPCBT_CREATEWNDA* = POINTER TO tagCBT_CREATEWNDA_struct;

    LPCREATESTRUCTW* = POINTER TO tagCREATESTRUCTW_struct;

    tagCBT_CREATEWNDW_struct* = RECORD [notag]
      lpcs* : LPCREATESTRUCTW;
      hwndInsertAfter* : HWND
    END;

    CBT_CREATEWNDW* = tagCBT_CREATEWNDW_struct;

    LPCBT_CREATEWNDW* = POINTER TO tagCBT_CREATEWNDW_struct;

    CBT_CREATEWND* = CBT_CREATEWNDA;

    LPCBT_CREATEWND* = LPCBT_CREATEWNDA;

    tagCBTACTIVATESTRUCT_struct* = RECORD [notag]
      fMouse* : BOOL;
      hWndActive* : HWND
    END;

    CBTACTIVATESTRUCT* = tagCBTACTIVATESTRUCT_struct;

    LPCBTACTIVATESTRUCT* = POINTER TO tagCBTACTIVATESTRUCT_struct;

    tagEVENTMSG_struct* = RECORD [notag]
      message* : UINT;
      paramL* : UINT;
      paramH* : UINT;
      time* : DWORD;
      hwnd* : HWND
    END;

    EVENTMSG* = tagEVENTMSG_struct;

    PEVENTMSGMSG* = POINTER TO tagEVENTMSG_struct;

    NPEVENTMSGMSG* = PEVENTMSGMSG;

    LPEVENTMSGMSG* = PEVENTMSGMSG;

    PEVENTMSG* = PEVENTMSGMSG;

    NPEVENTMSG* = PEVENTMSGMSG;

    LPEVENTMSG* = PEVENTMSGMSG;

    tagCWPSTRUCT_struct* = RECORD [notag]
      lParam* : LPARAM;
      wParam* : WPARAM;
      message* : UINT;
      hwnd* : HWND
    END;

    CWPSTRUCT* = tagCWPSTRUCT_struct;

    PCWPSTRUCT* = POINTER TO tagCWPSTRUCT_struct;

    NPCWPSTRUCT* = PCWPSTRUCT;

    LPCWPSTRUCT* = PCWPSTRUCT;

    tagCWPRETSTRUCT_struct* = RECORD [notag]
      lResult* : LRESULT;
      lParam* : LPARAM;
      wParam* : WPARAM;
      message* : UINT;
      hwnd* : HWND
    END;

    CWPRETSTRUCT* = tagCWPRETSTRUCT_struct;

    PCWPRETSTRUCT* = POINTER TO tagCWPRETSTRUCT_struct;

    NPCWPRETSTRUCT* = PCWPRETSTRUCT;

    LPCWPRETSTRUCT* = PCWPRETSTRUCT;

    tagKBDLLHOOKSTRUCT_struct* = RECORD [notag]
      vkCode* : DWORD;
      scanCode* : DWORD;
      flags* : DWORD;
      time* : DWORD;
      dwExtraInfo* : DWORD
    END;

    KBDLLHOOKSTRUCT* = tagKBDLLHOOKSTRUCT_struct;

    LPKBDLLHOOKSTRUCT* = POINTER TO tagKBDLLHOOKSTRUCT_struct;

    PKBDLLHOOKSTRUCT* = LPKBDLLHOOKSTRUCT;

    tagMSLLHOOKSTRUCT_struct* = RECORD [notag]
      pt* : POINT;
      mouseData* : DWORD;
      flags* : DWORD;
      time* : DWORD;
      dwExtraInfo* : DWORD
    END;

    MSLLHOOKSTRUCT* = tagMSLLHOOKSTRUCT_struct;

    LPMSLLHOOKSTRUCT* = POINTER TO tagMSLLHOOKSTRUCT_struct;

    PMSLLHOOKSTRUCT* = LPMSLLHOOKSTRUCT;

    tagDEBUGHOOKINFO_struct* = RECORD [notag]
      idThread* : DWORD;
      idThreadInstaller* : DWORD;
      lParam* : LPARAM;
      wParam* : WPARAM;
      code* : LONGINT
    END;

    DEBUGHOOKINFO* = tagDEBUGHOOKINFO_struct;

    PDEBUGHOOKINFO* = POINTER TO tagDEBUGHOOKINFO_struct;

    NPDEBUGHOOKINFO* = PDEBUGHOOKINFO;

    LPDEBUGHOOKINFO* = PDEBUGHOOKINFO;

    tagMOUSEHOOKSTRUCT_struct* = RECORD [notag]
      pt* : POINT;
      hwnd* : HWND;
      wHitTestCode* : UINT;
      dwExtraInfo* : DWORD
    END;

    MOUSEHOOKSTRUCT* = tagMOUSEHOOKSTRUCT_struct;

    LPMOUSEHOOKSTRUCT* = POINTER TO tagMOUSEHOOKSTRUCT_struct;

    PMOUSEHOOKSTRUCT* = LPMOUSEHOOKSTRUCT;

    tagHARDWAREHOOKSTRUCT_struct* = RECORD [notag]
      hwnd* : HWND;
      message* : UINT;
      wParam* : WPARAM;
      lParam* : LPARAM
    END;

    HARDWAREHOOKSTRUCT* = tagHARDWAREHOOKSTRUCT_struct;

    LPHARDWAREHOOKSTRUCT* = POINTER TO tagHARDWAREHOOKSTRUCT_struct;

    PHARDWAREHOOKSTRUCT* = LPHARDWAREHOOKSTRUCT;

    tagUSEROBJECTFLAGS_struct* = RECORD [notag]
      fInherit* : BOOL;
      fReserved* : BOOL;
      dwFlags* : DWORD
    END;

    USEROBJECTFLAGS* = tagUSEROBJECTFLAGS_struct;

    PUSEROBJECTFLAGS* = POINTER TO tagUSEROBJECTFLAGS_struct;

    tagWNDCLASSEXA_struct* = RECORD [notag]
      cbSize* : UINT;
      style* : UINT;
      lpfnWndProc* : WNDPROC;
      cbClsExtra* : LONGINT;
      cbWndExtra* : LONGINT;
      hInstance* : HINSTANCE;
      hIcon* : HICON;
      hCursor* : HCURSOR;
      hbrBackground* : HBRUSH;
      lpszMenuName* : LPCSTR;
      lpszClassName* : LPCSTR;
      hIconSm* : HICON
    END;

    WNDCLASSEXA* = tagWNDCLASSEXA_struct;

    PWNDCLASSEXA* = POINTER TO tagWNDCLASSEXA_struct;

    NPWNDCLASSEXA* = PWNDCLASSEXA;

    LPWNDCLASSEXA* = PWNDCLASSEXA;

    tagWNDCLASSEXW_struct* = RECORD [notag]
      cbSize* : UINT;
      style* : UINT;
      lpfnWndProc* : WNDPROC;
      cbClsExtra* : LONGINT;
      cbWndExtra* : LONGINT;
      hInstance* : HINSTANCE;
      hIcon* : HICON;
      hCursor* : HCURSOR;
      hbrBackground* : HBRUSH;
      lpszMenuName* : LPCWSTR;
      lpszClassName* : LPCWSTR;
      hIconSm* : HICON
    END;

    WNDCLASSEXW* = tagWNDCLASSEXW_struct;

    PWNDCLASSEXW* = POINTER TO tagWNDCLASSEXW_struct;

    NPWNDCLASSEXW* = PWNDCLASSEXW;

    LPWNDCLASSEXW* = PWNDCLASSEXW;

    WNDCLASSEX* = WNDCLASSEXA;

    PWNDCLASSEX* = PWNDCLASSEXA;

    NPWNDCLASSEX* = NPWNDCLASSEXA;

    LPWNDCLASSEX* = LPWNDCLASSEXA;

    tagWNDCLASSA_struct* = RECORD [notag]
      style* : UINT;
      lpfnWndProc* : WNDPROC;
      cbClsExtra* : LONGINT;
      cbWndExtra* : LONGINT;
      hInstance* : HINSTANCE;
      hIcon* : HICON;
      hCursor* : HCURSOR;
      hbrBackground* : HBRUSH;
      lpszMenuName* : LPCSTR;
      lpszClassName* : LPCSTR
    END;

    WNDCLASSA* = tagWNDCLASSA_struct;

    PWNDCLASSA* = POINTER TO tagWNDCLASSA_struct;

    NPWNDCLASSA* = PWNDCLASSA;

    LPWNDCLASSA* = PWNDCLASSA;

    tagWNDCLASSW_struct* = RECORD [notag]
      style* : UINT;
      lpfnWndProc* : WNDPROC;
      cbClsExtra* : LONGINT;
      cbWndExtra* : LONGINT;
      hInstance* : HINSTANCE;
      hIcon* : HICON;
      hCursor* : HCURSOR;
      hbrBackground* : HBRUSH;
      lpszMenuName* : LPCWSTR;
      lpszClassName* : LPCWSTR
    END;

    WNDCLASSW* = tagWNDCLASSW_struct;

    PWNDCLASSW* = POINTER TO tagWNDCLASSW_struct;

    NPWNDCLASSW* = PWNDCLASSW;

    LPWNDCLASSW* = PWNDCLASSW;

    WNDCLASS* = WNDCLASSA;

    PWNDCLASS* = PWNDCLASSA;

    NPWNDCLASS* = NPWNDCLASSA;

    LPWNDCLASS* = LPWNDCLASSA;

    tagMSG_struct* = RECORD [notag]
      hwnd* : HWND;
      message* : UINT;
      wParam* : WPARAM;
      lParam* : LPARAM;
      time* : DWORD;
      pt* : POINT
    END;

    MSG* = tagMSG_struct;

    PMSG* = POINTER TO tagMSG_struct;

    NPMSG* = PMSG;

    LPMSG* = PMSG;

    tagMINMAXINFO_struct* = RECORD [notag]
      ptReserved* : POINT;
      ptMaxSize* : POINT;
      ptMaxPosition* : POINT;
      ptMinTrackSize* : POINT;
      ptMaxTrackSize* : POINT
    END;

    MINMAXINFO* = tagMINMAXINFO_struct;

    PMINMAXINFO* = POINTER TO tagMINMAXINFO_struct;

    LPMINMAXINFO* = PMINMAXINFO;

    tagCOPYDATASTRUCT_struct* = RECORD [notag]
      dwData* : DWORD;
      cbData* : DWORD;
      lpData* : PVOID
    END;

    COPYDATASTRUCT* = tagCOPYDATASTRUCT_struct;

    PCOPYDATASTRUCT* = POINTER TO tagCOPYDATASTRUCT_struct;

    tagMDINEXTMENU_struct* = RECORD [notag]
      hmenuIn* : HMENU;
      hmenuNext* : HMENU;
      hwndNext* : HWND
    END;

    MDINEXTMENU* = tagMDINEXTMENU_struct;

    PMDINEXTMENU* = POINTER TO tagMDINEXTMENU_struct;

    LPMDINEXTMENU* = PMDINEXTMENU;

    tagWINDOWPOS_struct* = RECORD [notag]
      hwnd* : HWND;
      hwndInsertAfter* : HWND;
      x* : LONGINT;
      y* : LONGINT;
      cx* : LONGINT;
      cy* : LONGINT;
      flags* : UINT
    END;

    WINDOWPOS* = tagWINDOWPOS_struct;

    LPWINDOWPOS* = POINTER TO tagWINDOWPOS_struct;

    PWINDOWPOS* = LPWINDOWPOS;

    tagNCCALCSIZE_PARAMS_struct* = RECORD [notag]
      rgrc* : ARRAY 3 OF RECT;
      lppos* : PWINDOWPOS
    END;

    NCCALCSIZE_PARAMS* = tagNCCALCSIZE_PARAMS_struct;

    LPNCCALCSIZE_PARAMS* = POINTER TO tagNCCALCSIZE_PARAMS_struct;

    tagTRACKMOUSEEVENT_struct* = RECORD [notag]
      cbSize* : DWORD;
      dwFlags* : DWORD;
      hwndTrack* : HWND;
      dwHoverTime* : DWORD
    END;

    TRACKMOUSEEVENT* = tagTRACKMOUSEEVENT_struct;

    LPTRACKMOUSEEVENT* = POINTER TO tagTRACKMOUSEEVENT_struct;

    tagACCEL_struct* = RECORD [notag]
      fVirt* : BYTE;
      key* : WORD;
      cmd* : WORD
    END;

    ACCEL* = tagACCEL_struct;

    LPACCEL* = POINTER TO tagACCEL_struct;

    tagPAINTSTRUCT_struct* = RECORD [notag]
      hdc* : HDC;
      fErase* : BOOL;
      rcPaint* : RECT;
      fRestore* : BOOL;
      fIncUpdate* : BOOL;
      rgbReserved* : ARRAY 32 OF BYTE
    END;

    PAINTSTRUCT* = tagPAINTSTRUCT_struct;

    PPAINTSTRUCT* = POINTER TO tagPAINTSTRUCT_struct;

    NPPAINTSTRUCT* = PPAINTSTRUCT;

    LPPAINTSTRUCT* = PPAINTSTRUCT;

    tagCREATESTRUCTA_struct* = RECORD [notag]
      lpCreateParams* : LPVOID;
      hInstance* : HINSTANCE;
      hMenu* : HMENU;
      hwndParent* : HWND;
      cy* : LONGINT;
      cx* : LONGINT;
      y* : LONGINT;
      x* : LONGINT;
      style* : LONG;
      lpszName* : LPCSTR;
      lpszClass* : LPCSTR;
      dwExStyle* : DWORD
    END;

    CREATESTRUCTA* = tagCREATESTRUCTA_struct;

    tagCREATESTRUCTW_struct* = RECORD [notag]
      lpCreateParams* : LPVOID;
      hInstance* : HINSTANCE;
      hMenu* : HMENU;
      hwndParent* : HWND;
      cy* : LONGINT;
      cx* : LONGINT;
      y* : LONGINT;
      x* : LONGINT;
      style* : LONG;
      lpszName* : LPCWSTR;
      lpszClass* : LPCWSTR;
      dwExStyle* : DWORD
    END;

    CREATESTRUCTW* = tagCREATESTRUCTW_struct;

    CREATESTRUCT* = CREATESTRUCTA;

    LPCREATESTRUCT* = LPCREATESTRUCTA;

    tagWINDOWPLACEMENT_struct* = RECORD [notag]
      length* : UINT;
      flags* : UINT;
      showCmd* : UINT;
      ptMinPosition* : POINT;
      ptMaxPosition* : POINT;
      rcNormalPosition* : RECT
    END;

    WINDOWPLACEMENT* = tagWINDOWPLACEMENT_struct;

    PWINDOWPLACEMENT* = POINTER TO WINDOWPLACEMENT;

    LPWINDOWPLACEMENT* = PWINDOWPLACEMENT;

    tagNMHDR_struct* = RECORD [notag]
      hwndFrom* : HWND;
      idFrom* : UINT;
      code* : UINT
    END;

    NMHDR* = tagNMHDR_struct;

    LPNMHDR* = POINTER TO NMHDR;

    tagSTYLESTRUCT_struct* = RECORD [notag]
      styleOld* : DWORD;
      styleNew* : DWORD
    END;

    STYLESTRUCT* = tagSTYLESTRUCT_struct;

    LPSTYLESTRUCT* = POINTER TO tagSTYLESTRUCT_struct;

    tagMEASUREITEMSTRUCT_struct* = RECORD [notag]
      CtlType* : UINT;
      CtlID* : UINT;
      itemID* : UINT;
      itemWidth* : UINT;
      itemHeight* : UINT;
      itemData* : DWORD
    END;

    MEASUREITEMSTRUCT* = tagMEASUREITEMSTRUCT_struct;

    PMEASUREITEMSTRUCT* = POINTER TO tagMEASUREITEMSTRUCT_struct;

    LPMEASUREITEMSTRUCT* = PMEASUREITEMSTRUCT;

    tagDRAWITEMSTRUCT_struct* = RECORD [notag]
      CtlType* : UINT;
      CtlID* : UINT;
      itemID* : UINT;
      itemAction* : UINT;
      itemState* : UINT;
      hwndItem* : HWND;
      hDC* : HDC;
      rcItem* : RECT;
      itemData* : DWORD
    END;

    DRAWITEMSTRUCT* = tagDRAWITEMSTRUCT_struct;

    PDRAWITEMSTRUCT* = POINTER TO tagDRAWITEMSTRUCT_struct;

    LPDRAWITEMSTRUCT* = PDRAWITEMSTRUCT;

    tagDELETEITEMSTRUCT_struct* = RECORD [notag]
      CtlType* : UINT;
      CtlID* : UINT;
      itemID* : UINT;
      hwndItem* : HWND;
      itemData* : UINT
    END;

    DELETEITEMSTRUCT* = tagDELETEITEMSTRUCT_struct;

    PDELETEITEMSTRUCT* = POINTER TO tagDELETEITEMSTRUCT_struct;

    LPDELETEITEMSTRUCT* = PDELETEITEMSTRUCT;

    tagCOMPAREITEMSTRUCT_struct* = RECORD [notag]
      CtlType* : UINT;
      CtlID* : UINT;
      hwndItem* : HWND;
      itemID1* : UINT;
      itemData1* : DWORD;
      itemID2* : UINT;
      itemData2* : DWORD;
      dwLocaleId* : DWORD
    END;

    COMPAREITEMSTRUCT* = tagCOMPAREITEMSTRUCT_struct;

    PCOMPAREITEMSTRUCT* = POINTER TO tagCOMPAREITEMSTRUCT_struct;

    LPCOMPAREITEMSTRUCT* = PCOMPAREITEMSTRUCT;

    DLGTEMPLATE* = RECORD [ALIGN2]
      style* : DWORD;
      dwExtendedStyle* : DWORD;
      cdit* : WORD;
      x* : INTEGER;
      y* : INTEGER;
      cx* : INTEGER;
      cy* : INTEGER
    END;

    LPDLGTEMPLATEA* = POINTER TO DLGTEMPLATE;

    LPDLGTEMPLATEW* = LPDLGTEMPLATEA;

    LPDLGTEMPLATE* = LPDLGTEMPLATEA;

    LPCDLGTEMPLATEA* = LPDLGTEMPLATEA;

    LPCDLGTEMPLATEW* = LPDLGTEMPLATEA;

    LPCDLGTEMPLATE* = LPCDLGTEMPLATEA;

    DLGITEMTEMPLATE* = RECORD [ALIGN2]
      style* : DWORD;
      dwExtendedStyle* : DWORD;
      x* : INTEGER;
      y* : INTEGER;
      cx* : INTEGER;
      cy* : INTEGER;
      id* : WORD
    END;

    PDLGITEMTEMPLATEA* = POINTER TO DLGITEMTEMPLATE;

    PDLGITEMTEMPLATEW* = PDLGITEMTEMPLATEA;

    PDLGITEMTEMPLATE* = PDLGITEMTEMPLATEA;

    LPDLGITEMTEMPLATEA* = PDLGITEMTEMPLATEA;

    LPDLGITEMTEMPLATEW* = PDLGITEMTEMPLATEA;

    LPDLGITEMTEMPLATE* = LPDLGITEMTEMPLATEA;

    tagTPMPARAMS_struct* = RECORD [notag]
      cbSize* : UINT;
      rcExclude* : RECT
    END;

    TPMPARAMS* = tagTPMPARAMS_struct;

    LPTPMPARAMS* = POINTER TO TPMPARAMS;

    tagMENUITEMINFOA_struct* = RECORD [notag]
      cbSize* : UINT;
      fMask* : UINT;
      fType* : UINT;
      fState* : UINT;
      wID* : UINT;
      hSubMenu* : HMENU;
      hbmpChecked* : HBITMAP;
      hbmpUnchecked* : HBITMAP;
      dwItemData* : DWORD;
      dwTypeData* : LPSTR;
      cch* : UINT
    END;

    MENUITEMINFOA* = tagMENUITEMINFOA_struct;

    LPMENUITEMINFOA* = POINTER TO tagMENUITEMINFOA_struct;

    tagMENUITEMINFOW_struct* = RECORD [notag]
      cbSize* : UINT;
      fMask* : UINT;
      fType* : UINT;
      fState* : UINT;
      wID* : UINT;
      hSubMenu* : HMENU;
      hbmpChecked* : HBITMAP;
      hbmpUnchecked* : HBITMAP;
      dwItemData* : DWORD;
      dwTypeData* : LPWSTR;
      cch* : UINT
    END;

    MENUITEMINFOW* = tagMENUITEMINFOW_struct;

    LPMENUITEMINFOW* = POINTER TO tagMENUITEMINFOW_struct;

    MENUITEMINFO* = MENUITEMINFOA;

    LPMENUITEMINFO* = LPMENUITEMINFOA;

    LPCMENUITEMINFOA* = POINTER TO MENUITEMINFOA;

    LPCMENUITEMINFOW* = POINTER TO MENUITEMINFOW;

    LPCMENUITEMINFO* = LPCMENUITEMINFOA;

    tagDROPSTRUCT_struct* = RECORD [notag]
      hwndSource* : HWND;
      hwndSink* : HWND;
      wFmt* : DWORD;
      dwData* : DWORD;
      ptDrop* : POINT;
      dwControlData* : DWORD
    END;

    DROPSTRUCT* = tagDROPSTRUCT_struct;

    PDROPSTRUCT* = POINTER TO tagDROPSTRUCT_struct;

    LPDROPSTRUCT* = PDROPSTRUCT;

    tagDRAWTEXTPARAMS_struct* = RECORD [notag]
      cbSize* : UINT;
      iTabLength* : LONGINT;
      iLeftMargin* : LONGINT;
      iRightMargin* : LONGINT;
      uiLengthDrawn* : UINT
    END;

    DRAWTEXTPARAMS* = tagDRAWTEXTPARAMS_struct;

    LPDRAWTEXTPARAMS* = POINTER TO tagDRAWTEXTPARAMS_struct;

    tagHELPINFO_struct* = RECORD [notag]
      cbSize* : UINT;
      iContextType* : LONGINT;
      iCtrlId* : LONGINT;
      hItemHandle* : HANDLE;
      dwContextId* : DWORD;
      MousePos* : POINT
    END;

    HELPINFO* = tagHELPINFO_struct;

    LPHELPINFO* = POINTER TO tagHELPINFO_struct;

    MSGBOXCALLBACK* = WORKERCALLBACKFUNC;

    tagMSGBOXPARAMSA_struct* = RECORD [notag]
      cbSize* : UINT;
      hwndOwner* : HWND;
      hInstance* : HINSTANCE;
      lpszText* : LPCSTR;
      lpszCaption* : LPCSTR;
      dwStyle* : DWORD;
      lpszIcon* : LPCSTR;
      dwContextHelpId* : DWORD;
      lpfnMsgBoxCallback* : MSGBOXCALLBACK;
      dwLanguageId* : DWORD
    END;

    MSGBOXPARAMSA* = tagMSGBOXPARAMSA_struct;

    PMSGBOXPARAMSA* = POINTER TO tagMSGBOXPARAMSA_struct;

    LPMSGBOXPARAMSA* = PMSGBOXPARAMSA;

    tagMSGBOXPARAMSW_struct* = RECORD [notag]
      cbSize* : UINT;
      hwndOwner* : HWND;
      hInstance* : HINSTANCE;
      lpszText* : LPCWSTR;
      lpszCaption* : LPCWSTR;
      dwStyle* : DWORD;
      lpszIcon* : LPCWSTR;
      dwContextHelpId* : DWORD;
      lpfnMsgBoxCallback* : MSGBOXCALLBACK;
      dwLanguageId* : DWORD
    END;

    MSGBOXPARAMSW* = tagMSGBOXPARAMSW_struct;

    PMSGBOXPARAMSW* = POINTER TO tagMSGBOXPARAMSW_struct;

    LPMSGBOXPARAMSW* = PMSGBOXPARAMSW;

    MSGBOXPARAMS* = MSGBOXPARAMSA;

    PMSGBOXPARAMS* = PMSGBOXPARAMSA;

    LPMSGBOXPARAMS* = LPMSGBOXPARAMSA;

    MENUITEMTEMPLATEHEADER* = RECORD [notag]
      versionNumber* : WORD;
      offset* : WORD
    END;

    PMENUITEMTEMPLATEHEADER* = POINTER TO RECORD [notag]
      versionNumber* : WORD;
      offset* : WORD
    END;

    MENUITEMTEMPLATE* = RECORD [notag]
      mtOption* : WORD;
      mtID* : WORD;
      mtString* : ARRAY 1 OF WCHAR
    END;

    PMENUITEMTEMPLATE* = POINTER TO RECORD [notag]
      mtOption* : WORD;
      mtID* : WORD;
      mtString* : ARRAY 1 OF WCHAR
    END;

    _ICONINFO_struct* = RECORD [notag]
      fIcon* : BOOL;
      xHotspot* : DWORD;
      yHotspot* : DWORD;
      hbmMask* : HBITMAP;
      hbmColor* : HBITMAP
    END;

    ICONINFO* = _ICONINFO_struct;

    PICONINFO* = POINTER TO ICONINFO;

    tagCURSORSHAPE_struct* = RECORD [notag]
      xHotSpot* : LONGINT;
      yHotSpot* : LONGINT;
      cx* : LONGINT;
      cy* : LONGINT;
      cbWidth* : LONGINT;
      Planes* : BYTE;
      BitsPixel* : BYTE
    END;

    CURSORSHAPE* = tagCURSORSHAPE_struct;

    LPCURSORSHAPE* = POINTER TO tagCURSORSHAPE_struct;

    tagSCROLLINFO_struct* = RECORD [notag]
      cbSize* : UINT;
      fMask* : UINT;
      nMin* : LONGINT;
      nMax* : LONGINT;
      nPage* : UINT;
      nPos* : LONGINT;
      nTrackPos* : LONGINT
    END;

    SCROLLINFO* = tagSCROLLINFO_struct;

    LPSCROLLINFO* = POINTER TO tagSCROLLINFO_struct;

    LPCSCROLLINFO* = POINTER TO SCROLLINFO;

    tagMDICREATESTRUCTA_struct* = RECORD [notag]
      szClass* : LPCSTR;
      szTitle* : LPCSTR;
      hOwner* : HANDLE;
      x* : LONGINT;
      y* : LONGINT;
      cx* : LONGINT;
      cy* : LONGINT;
      style* : DWORD;
      lParam* : LPARAM
    END;

    MDICREATESTRUCTA* = tagMDICREATESTRUCTA_struct;

    LPMDICREATESTRUCTA* = POINTER TO tagMDICREATESTRUCTA_struct;

    tagMDICREATESTRUCTW_struct* = RECORD [notag]
      szClass* : LPCWSTR;
      szTitle* : LPCWSTR;
      hOwner* : HANDLE;
      x* : LONGINT;
      y* : LONGINT;
      cx* : LONGINT;
      cy* : LONGINT;
      style* : DWORD;
      lParam* : LPARAM
    END;

    MDICREATESTRUCTW* = tagMDICREATESTRUCTW_struct;

    LPMDICREATESTRUCTW* = POINTER TO tagMDICREATESTRUCTW_struct;

    MDICREATESTRUCT* = MDICREATESTRUCTA;

    LPMDICREATESTRUCT* = LPMDICREATESTRUCTA;

    tagCLIENTCREATESTRUCT_struct* = RECORD [notag]
      hWindowMenu* : HANDLE;
      idFirstChild* : UINT
    END;

    CLIENTCREATESTRUCT* = tagCLIENTCREATESTRUCT_struct;

    LPCLIENTCREATESTRUCT* = POINTER TO tagCLIENTCREATESTRUCT_struct;

    HELPPOLY* = DWORD;

    tagMULTIKEYHELPA_struct* = RECORD [notag]
      mkSize* : DWORD;
      mkKeylist* : CHAR;
      szKeyphrase* : ARRAY 1 OF CHAR
    END;

    MULTIKEYHELPA* = tagMULTIKEYHELPA_struct;

    PMULTIKEYHELPA* = POINTER TO tagMULTIKEYHELPA_struct;

    LPMULTIKEYHELPA* = PMULTIKEYHELPA;

    tagMULTIKEYHELPW_struct* = RECORD [notag]
      mkSize* : DWORD;
      mkKeylist* : WCHAR;
      szKeyphrase* : ARRAY 1 OF WCHAR
    END;

    MULTIKEYHELPW* = tagMULTIKEYHELPW_struct;

    PMULTIKEYHELPW* = POINTER TO tagMULTIKEYHELPW_struct;

    LPMULTIKEYHELPW* = PMULTIKEYHELPW;

    MULTIKEYHELP* = MULTIKEYHELPA;

    PMULTIKEYHELP* = PMULTIKEYHELPA;

    LPMULTIKEYHELP* = LPMULTIKEYHELPA;

    tagHELPWININFOA_struct* = RECORD [notag]
      wStructSize* : LONGINT;
      x* : LONGINT;
      y* : LONGINT;
      dx* : LONGINT;
      dy* : LONGINT;
      wMax* : LONGINT;
      rgchMember* : ARRAY 2 OF CHAR
    END;

    HELPWININFOA* = tagHELPWININFOA_struct;

    PHELPWININFOA* = POINTER TO tagHELPWININFOA_struct;

    LPHELPWININFOA* = PHELPWININFOA;

    tagHELPWININFOW_struct* = RECORD [notag]
      wStructSize* : LONGINT;
      x* : LONGINT;
      y* : LONGINT;
      dx* : LONGINT;
      dy* : LONGINT;
      wMax* : LONGINT;
      rgchMember* : ARRAY 2 OF WCHAR
    END;

    HELPWININFOW* = tagHELPWININFOW_struct;

    PHELPWININFOW* = POINTER TO tagHELPWININFOW_struct;

    LPHELPWININFOW* = PHELPWININFOW;

    HELPWININFO* = HELPWININFOA;

    PHELPWININFO* = PHELPWININFOA;

    LPHELPWININFO* = LPHELPWININFOA;

    tagNONCLIENTMETRICSA_struct* = RECORD [notag]
      cbSize* : UINT;
      iBorderWidth* : LONGINT;
      iScrollWidth* : LONGINT;
      iScrollHeight* : LONGINT;
      iCaptionWidth* : LONGINT;
      iCaptionHeight* : LONGINT;
      lfCaptionFont* : LOGFONTA;
      iSmCaptionWidth* : LONGINT;
      iSmCaptionHeight* : LONGINT;
      lfSmCaptionFont* : LOGFONTA;
      iMenuWidth* : LONGINT;
      iMenuHeight* : LONGINT;
      lfMenuFont* : LOGFONTA;
      lfStatusFont* : LOGFONTA;
      lfMessageFont* : LOGFONTA
    END;

    NONCLIENTMETRICSA* = tagNONCLIENTMETRICSA_struct;

    PNONCLIENTMETRICSA* = POINTER TO tagNONCLIENTMETRICSA_struct;

    LPNONCLIENTMETRICSA* = PNONCLIENTMETRICSA;

    tagNONCLIENTMETRICSW_struct* = RECORD [notag]
      cbSize* : UINT;
      iBorderWidth* : LONGINT;
      iScrollWidth* : LONGINT;
      iScrollHeight* : LONGINT;
      iCaptionWidth* : LONGINT;
      iCaptionHeight* : LONGINT;
      lfCaptionFont* : LOGFONTW;
      iSmCaptionWidth* : LONGINT;
      iSmCaptionHeight* : LONGINT;
      lfSmCaptionFont* : LOGFONTW;
      iMenuWidth* : LONGINT;
      iMenuHeight* : LONGINT;
      lfMenuFont* : LOGFONTW;
      lfStatusFont* : LOGFONTW;
      lfMessageFont* : LOGFONTW
    END;

    NONCLIENTMETRICSW* = tagNONCLIENTMETRICSW_struct;

    PNONCLIENTMETRICSW* = POINTER TO tagNONCLIENTMETRICSW_struct;

    LPNONCLIENTMETRICSW* = PNONCLIENTMETRICSW;

    NONCLIENTMETRICS* = NONCLIENTMETRICSA;

    PNONCLIENTMETRICS* = PNONCLIENTMETRICSA;

    LPNONCLIENTMETRICS* = LPNONCLIENTMETRICSA;

    tagMINIMIZEDMETRICS_struct* = RECORD [notag]
      cbSize* : UINT;
      iWidth* : LONGINT;
      iHorzGap* : LONGINT;
      iVertGap* : LONGINT;
      iArrange* : LONGINT
    END;

    MINIMIZEDMETRICS* = tagMINIMIZEDMETRICS_struct;

    PMINIMIZEDMETRICS* = POINTER TO tagMINIMIZEDMETRICS_struct;

    LPMINIMIZEDMETRICS* = PMINIMIZEDMETRICS;

    tagICONMETRICSA_struct* = RECORD [notag]
      cbSize* : UINT;
      iHorzSpacing* : LONGINT;
      iVertSpacing* : LONGINT;
      iTitleWrap* : LONGINT;
      lfFont* : LOGFONTA
    END;

    ICONMETRICSA* = tagICONMETRICSA_struct;

    PICONMETRICSA* = POINTER TO tagICONMETRICSA_struct;

    LPICONMETRICSA* = PICONMETRICSA;

    tagICONMETRICSW_struct* = RECORD [notag]
      cbSize* : UINT;
      iHorzSpacing* : LONGINT;
      iVertSpacing* : LONGINT;
      iTitleWrap* : LONGINT;
      lfFont* : LOGFONTW
    END;

    ICONMETRICSW* = tagICONMETRICSW_struct;

    PICONMETRICSW* = POINTER TO tagICONMETRICSW_struct;

    LPICONMETRICSW* = PICONMETRICSW;

    ICONMETRICS* = ICONMETRICSA;

    PICONMETRICS* = PICONMETRICSA;

    LPICONMETRICS* = LPICONMETRICSA;

    tagANIMATIONINFO_struct* = RECORD [notag]
      cbSize* : UINT;
      iMinAnimate* : LONGINT
    END;

    ANIMATIONINFO* = tagANIMATIONINFO_struct;

    LPANIMATIONINFO* = POINTER TO tagANIMATIONINFO_struct;

    tagSERIALKEYSA_struct* = RECORD [notag]
      cbSize* : UINT;
      dwFlags* : DWORD;
      lpszActivePort* : LPSTR;
      lpszPort* : LPSTR;
      iBaudRate* : UINT;
      iPortState* : UINT;
      iActive* : UINT
    END;

    SERIALKEYSA* = tagSERIALKEYSA_struct;

    LPSERIALKEYSA* = POINTER TO tagSERIALKEYSA_struct;

    tagSERIALKEYSW_struct* = RECORD [notag]
      cbSize* : UINT;
      dwFlags* : DWORD;
      lpszActivePort* : LPWSTR;
      lpszPort* : LPWSTR;
      iBaudRate* : UINT;
      iPortState* : UINT;
      iActive* : UINT
    END;

    SERIALKEYSW* = tagSERIALKEYSW_struct;

    LPSERIALKEYSW* = POINTER TO tagSERIALKEYSW_struct;

    SERIALKEYS* = SERIALKEYSA;

    LPSERIALKEYS* = LPSERIALKEYSA;

    tagHIGHCONTRASTA_struct* = RECORD [notag]
      cbSize* : UINT;
      dwFlags* : DWORD;
      lpszDefaultScheme* : LPSTR
    END;

    HIGHCONTRASTA* = tagHIGHCONTRASTA_struct;

    LPHIGHCONTRASTA* = POINTER TO tagHIGHCONTRASTA_struct;

    tagHIGHCONTRASTW_struct* = RECORD [notag]
      cbSize* : UINT;
      dwFlags* : DWORD;
      lpszDefaultScheme* : LPWSTR
    END;

    HIGHCONTRASTW* = tagHIGHCONTRASTW_struct;

    LPHIGHCONTRASTW* = POINTER TO tagHIGHCONTRASTW_struct;

    HIGHCONTRAST* = HIGHCONTRASTA;

    LPHIGHCONTRAST* = LPHIGHCONTRASTA;

    tagFILTERKEYS_struct* = RECORD [notag]
      cbSize* : UINT;
      dwFlags* : DWORD;
      iWaitMSec* : DWORD;
      iDelayMSec* : DWORD;
      iRepeatMSec* : DWORD;
      iBounceMSec* : DWORD
    END;

    FILTERKEYS* = tagFILTERKEYS_struct;

    LPFILTERKEYS* = POINTER TO tagFILTERKEYS_struct;

    tagSTICKYKEYS_struct* = RECORD [notag]
      cbSize* : UINT;
      dwFlags* : DWORD
    END;

    STICKYKEYS* = tagSTICKYKEYS_struct;

    LPSTICKYKEYS* = POINTER TO tagSTICKYKEYS_struct;

    tagMOUSEKEYS_struct* = RECORD [notag]
      cbSize* : UINT;
      dwFlags* : DWORD;
      iMaxSpeed* : DWORD;
      iTimeToMaxSpeed* : DWORD;
      iCtrlSpeed* : DWORD;
      dwReserved1* : DWORD;
      dwReserved2* : DWORD
    END;

    MOUSEKEYS* = tagMOUSEKEYS_struct;

    LPMOUSEKEYS* = POINTER TO tagMOUSEKEYS_struct;

    tagACCESSTIMEOUT_struct* = RECORD [notag]
      cbSize* : UINT;
      dwFlags* : DWORD;
      iTimeOutMSec* : DWORD
    END;

    ACCESSTIMEOUT* = tagACCESSTIMEOUT_struct;

    LPACCESSTIMEOUT* = POINTER TO tagACCESSTIMEOUT_struct;

    tagSOUNDSENTRYA_struct* = RECORD [notag]
      cbSize* : UINT;
      dwFlags* : DWORD;
      iFSTextEffect* : DWORD;
      iFSTextEffectMSec* : DWORD;
      iFSTextEffectColorBits* : DWORD;
      iFSGrafEffect* : DWORD;
      iFSGrafEffectMSec* : DWORD;
      iFSGrafEffectColor* : DWORD;
      iWindowsEffect* : DWORD;
      iWindowsEffectMSec* : DWORD;
      lpszWindowsEffectDLL* : LPSTR;
      iWindowsEffectOrdinal* : DWORD
    END;

    SOUNDSENTRYA* = tagSOUNDSENTRYA_struct;

    LPSOUNDSENTRYA* = POINTER TO tagSOUNDSENTRYA_struct;

    tagSOUNDSENTRYW_struct* = RECORD [notag]
      cbSize* : UINT;
      dwFlags* : DWORD;
      iFSTextEffect* : DWORD;
      iFSTextEffectMSec* : DWORD;
      iFSTextEffectColorBits* : DWORD;
      iFSGrafEffect* : DWORD;
      iFSGrafEffectMSec* : DWORD;
      iFSGrafEffectColor* : DWORD;
      iWindowsEffect* : DWORD;
      iWindowsEffectMSec* : DWORD;
      lpszWindowsEffectDLL* : LPWSTR;
      iWindowsEffectOrdinal* : DWORD
    END;

    SOUNDSENTRYW* = tagSOUNDSENTRYW_struct;

    LPSOUNDSENTRYW* = POINTER TO tagSOUNDSENTRYW_struct;

    SOUNDSENTRY* = SOUNDSENTRYA;

    LPSOUNDSENTRY* = LPSOUNDSENTRYA;

    tagTOGGLEKEYS_struct* = RECORD [notag]
      cbSize* : UINT;
      dwFlags* : DWORD
    END;

    TOGGLEKEYS* = tagTOGGLEKEYS_struct;

    LPTOGGLEKEYS* = POINTER TO tagTOGGLEKEYS_struct;

    LCTYPE* = DWORD;

    CALTYPE* = DWORD;

    CALID* = DWORD;

    _cpinfo_struct* = RECORD [notag]
      MaxCharSize* : UINT;
      DefaultChar* : ARRAY 2 OF BYTE;
      LeadByte* : ARRAY 12 OF BYTE
    END;

    CPINFO* = _cpinfo_struct;

    LPCPINFO* = POINTER TO _cpinfo_struct;

    _cpinfoexA_struct* = RECORD [notag]
      MaxCharSize* : UINT;
      DefaultChar* : ARRAY 2 OF BYTE;
      LeadByte* : ARRAY 12 OF BYTE;
      UnicodeDefaultChar* : WCHAR;
      CodePage* : UINT;
      CodePageName* : ARRAY 260 OF CHAR
    END;

    CPINFOEXA* = _cpinfoexA_struct;

    LPCPINFOEXA* = POINTER TO _cpinfoexA_struct;

    _cpinfoexW_struct* = RECORD [notag]
      MaxCharSize* : UINT;
      DefaultChar* : ARRAY 2 OF BYTE;
      LeadByte* : ARRAY 12 OF BYTE;
      UnicodeDefaultChar* : WCHAR;
      CodePage* : UINT;
      CodePageName* : ARRAY 260 OF WCHAR
    END;

    CPINFOEXW* = _cpinfoexW_struct;

    LPCPINFOEXW* = POINTER TO _cpinfoexW_struct;

    CPINFOEX* = CPINFOEXA;

    LPCPINFOEX* = LPCPINFOEXA;

    _numberfmtA_struct* = RECORD [notag]
      NumDigits* : UINT;
      LeadingZero* : UINT;
      Grouping* : UINT;
      lpDecimalSep* : LPSTR;
      lpThousandSep* : LPSTR;
      NegativeOrder* : UINT
    END;

    NUMBERFMTA* = _numberfmtA_struct;

    LPNUMBERFMTA* = POINTER TO _numberfmtA_struct;

    _numberfmtW_struct* = RECORD [notag]
      NumDigits* : UINT;
      LeadingZero* : UINT;
      Grouping* : UINT;
      lpDecimalSep* : LPWSTR;
      lpThousandSep* : LPWSTR;
      NegativeOrder* : UINT
    END;

    NUMBERFMTW* = _numberfmtW_struct;

    LPNUMBERFMTW* = POINTER TO _numberfmtW_struct;

    NUMBERFMT* = NUMBERFMTA;

    LPNUMBERFMT* = LPNUMBERFMTA;

    _currencyfmtA_struct* = RECORD [notag]
      NumDigits* : UINT;
      LeadingZero* : UINT;
      Grouping* : UINT;
      lpDecimalSep* : LPSTR;
      lpThousandSep* : LPSTR;
      NegativeOrder* : UINT;
      PositiveOrder* : UINT;
      lpCurrencySymbol* : LPSTR
    END;

    CURRENCYFMTA* = _currencyfmtA_struct;

    LPCURRENCYFMTA* = POINTER TO _currencyfmtA_struct;

    _currencyfmtW_struct* = RECORD [notag]
      NumDigits* : UINT;
      LeadingZero* : UINT;
      Grouping* : UINT;
      lpDecimalSep* : LPWSTR;
      lpThousandSep* : LPWSTR;
      NegativeOrder* : UINT;
      PositiveOrder* : UINT;
      lpCurrencySymbol* : LPWSTR
    END;

    CURRENCYFMTW* = _currencyfmtW_struct;

    LPCURRENCYFMTW* = POINTER TO _currencyfmtW_struct;

    CURRENCYFMT* = CURRENCYFMTA;

    LPCURRENCYFMT* = LPCURRENCYFMTA;

    LOCALE_ENUMPROCA* = FARPROC;

    CODEPAGE_ENUMPROCA* = FARPROC;

    DATEFMT_ENUMPROCA* = FARPROC;

    DATEFMT_ENUMPROCEXA* = FARPROC;

    TIMEFMT_ENUMPROCA* = FARPROC;

    CALINFO_ENUMPROCA* = FARPROC;

    CALINFO_ENUMPROCEXA* = FARPROC;

    LOCALE_ENUMPROCW* = FARPROC;

    CODEPAGE_ENUMPROCW* = FARPROC;

    DATEFMT_ENUMPROCW* = FARPROC;

    DATEFMT_ENUMPROCEXW* = FARPROC;

    TIMEFMT_ENUMPROCW* = FARPROC;

    CALINFO_ENUMPROCW* = FARPROC;

    CALINFO_ENUMPROCEXW* = FARPROC;

    _COORD_struct* = RECORD [notag]
      X* : SHORT;
      Y* : SHORT
    END;

    COORD* = _COORD_struct;

    PCOORD* = POINTER TO _COORD_struct;

    _SMALL_RECT_struct* = RECORD [notag]
      Left* : SHORT;
      Top* : SHORT;
      Right* : SHORT;
      Bottom* : SHORT
    END;

    SMALL_RECT* = _SMALL_RECT_struct;

    PSMALL_RECT* = POINTER TO _SMALL_RECT_struct;

    _KEY_EVENT_RECORD_struct* = RECORD [notag]
      bKeyDown* : BOOL;
      wRepeatCount* : WORD;
      wVirtualKeyCode* : WORD;
      wVirtualScanCode* : WORD;
      uChar* : RECORD [UNION]
        UnicodeChar* : WCHAR;
        AsciiChar* : CHAR
      END;
      dwControlKeyState* : DWORD
    END;

    KEY_EVENT_RECORD* = _KEY_EVENT_RECORD_struct;

    PKEY_EVENT_RECORD* = POINTER TO _KEY_EVENT_RECORD_struct;

    _MOUSE_EVENT_RECORD_struct* = RECORD [notag]
      dwMousePosition* : COORD;
      dwButtonState* : DWORD;
      dwControlKeyState* : DWORD;
      dwEventFlags* : DWORD
    END;

    MOUSE_EVENT_RECORD* = _MOUSE_EVENT_RECORD_struct;

    PMOUSE_EVENT_RECORD* = POINTER TO _MOUSE_EVENT_RECORD_struct;

    _WINDOW_BUFFER_SIZE_RECORD_struct* = RECORD [notag]
      dwSize* : COORD
    END;

    WINDOW_BUFFER_SIZE_RECORD* = _WINDOW_BUFFER_SIZE_RECORD_struct;

    PWINDOW_BUFFER_SIZE_RECORD* = POINTER TO _WINDOW_BUFFER_SIZE_RECORD_struct;

    _MENU_EVENT_RECORD_struct* = RECORD [notag]
      dwCommandId* : UINT
    END;

    MENU_EVENT_RECORD* = _MENU_EVENT_RECORD_struct;

    PMENU_EVENT_RECORD* = POINTER TO _MENU_EVENT_RECORD_struct;

    _FOCUS_EVENT_RECORD_struct* = RECORD [notag]
      bSetFocus* : BOOL
    END;

    FOCUS_EVENT_RECORD* = _FOCUS_EVENT_RECORD_struct;

    PFOCUS_EVENT_RECORD* = POINTER TO _FOCUS_EVENT_RECORD_struct;

    _INPUT_RECORD_struct* = RECORD [notag]
      EventType* : WORD;
      Event* : RECORD [UNION]
        KeyEvent* : KEY_EVENT_RECORD;
        MouseEvent* : MOUSE_EVENT_RECORD;
        WindowBufferSizeEvent* : WINDOW_BUFFER_SIZE_RECORD;
        MenuEvent* : MENU_EVENT_RECORD;
        FocusEvent* : FOCUS_EVENT_RECORD
      END
    END;

    INPUT_RECORD* = _INPUT_RECORD_struct;

    PINPUT_RECORD* = POINTER TO _INPUT_RECORD_struct;

    _CHAR_INFO_struct* = RECORD [notag]
      Char* : RECORD [UNION]
        UnicodeChar* : WCHAR;
        AsciiChar* : CHAR
      END;
      Attributes* : WORD
    END;

    CHAR_INFO* = _CHAR_INFO_struct;

    PCHAR_INFO* = POINTER TO _CHAR_INFO_struct;

    _CONSOLE_SCREEN_BUFFER_INFO_struct* = RECORD [notag]
      dwSize* : COORD;
      dwCursorPosition* : COORD;
      wAttributes* : WORD;
      srWindow* : SMALL_RECT;
      dwMaximumWindowSize* : COORD
    END;

    CONSOLE_SCREEN_BUFFER_INFO* = _CONSOLE_SCREEN_BUFFER_INFO_struct;

    PCONSOLE_SCREEN_BUFFER_INFO* = POINTER TO _CONSOLE_SCREEN_BUFFER_INFO_struct;

    _CONSOLE_CURSOR_INFO_struct* = RECORD [notag]
      dwSize* : DWORD;
      bVisible* : BOOL
    END;

    CONSOLE_CURSOR_INFO* = _CONSOLE_CURSOR_INFO_struct;

    PCONSOLE_CURSOR_INFO* = POINTER TO _CONSOLE_CURSOR_INFO_struct;

    PHANDLER_ROUTINE* = PROCEDURE (CtrlType : DWORD) : BOOL;

    tagVS_FIXEDFILEINFO_struct* = RECORD [notag]
      dwSignature* : DWORD;
      dwStrucVersion* : DWORD;
      dwFileVersionMS* : DWORD;
      dwFileVersionLS* : DWORD;
      dwProductVersionMS* : DWORD;
      dwProductVersionLS* : DWORD;
      dwFileFlagsMask* : DWORD;
      dwFileFlags* : DWORD;
      dwFileOS* : DWORD;
      dwFileType* : DWORD;
      dwFileSubtype* : DWORD;
      dwFileDateMS* : DWORD;
      dwFileDateLS* : DWORD
    END;

    VS_FIXEDFILEINFO* = tagVS_FIXEDFILEINFO_struct;

    REGSAM* = ACCESS_MASK;

    HKEY* = HANDLE;

    PHKEY* = POINTER TO ARRAY OF HKEY;

    val_context_struct* = RECORD [notag]
      valuelen* : LONGINT;
      value_context* : LPVOID;
      val_buff_ptr* : LPVOID
    END;

    PVALCONTEXT* = POINTER TO val_context_struct;

    pvalueA_struct* = RECORD [notag]
      pv_valuename* : LPSTR;
      pv_valuelen* : LONGINT;
      pv_value_context* : LPVOID;
      pv_type* : DWORD
    END;

    PVALUEA* = pvalueA_struct;

    PPVALUEA* = POINTER TO pvalueA_struct;

    pvalueW_struct* = RECORD [notag]
      pv_valuename* : LPWSTR;
      pv_valuelen* : LONGINT;
      pv_value_context* : LPVOID;
      pv_type* : DWORD
    END;

    PVALUEW* = pvalueW_struct;

    PPVALUEW* = POINTER TO pvalueW_struct;

    PVALUE* = PVALUEA;

    PPVALUE* = PPVALUEA;

    _cdecl* = DWORD;

    PQUERYHANDLER* = PROCEDURE (keycontext : LPVOID; VAR [nil] val_list : val_context_struct; num_vals : DWORD; outputbuffer : LPVOID; VAR [nil] total_outlen : DWORD; input_blen : DWORD) : DWORD;

    provider_info_struct* = RECORD [notag]
      pi_R0_1val* : PQUERYHANDLER;
      pi_R0_allvals* : PQUERYHANDLER;
      pi_R3_1val* : PQUERYHANDLER;
      pi_R3_allvals* : PQUERYHANDLER;
      pi_flags* : DWORD;
      pi_key_context* : LPVOID
    END;

    REG_PROVIDER* = provider_info_struct;

    PPROVIDER* = POINTER TO provider_info_struct;

    value_entA_struct* = RECORD [notag]
      ve_valuename* : LPSTR;
      ve_valuelen* : DWORD;
      ve_valueptr* : DWORD;
      ve_type* : DWORD
    END;

    VALENTA* = value_entA_struct;

    PVALENTA* = POINTER TO value_entA_struct;

    value_entW_struct* = RECORD [notag]
      ve_valuename* : LPWSTR;
      ve_valuelen* : DWORD;
      ve_valueptr* : DWORD;
      ve_type* : DWORD
    END;

    VALENTW* = value_entW_struct;

    PVALENTW* = POINTER TO value_entW_struct;

    VALENT* = VALENTA;

    PVALENT* = PVALENTA;

    _NETRESOURCEA_struct* = RECORD [notag]
      dwScope* : DWORD;
      dwType* : DWORD;
      dwDisplayType* : DWORD;
      dwUsage* : DWORD;
      lpLocalName* : LPSTR;
      lpRemoteName* : LPSTR;
      lpComment* : LPSTR;
      lpProvider* : LPSTR
    END;

    NETRESOURCEA* = _NETRESOURCEA_struct;

    LPNETRESOURCEA* = POINTER TO _NETRESOURCEA_struct;

    _NETRESOURCEW_struct* = RECORD [notag]
      dwScope* : DWORD;
      dwType* : DWORD;
      dwDisplayType* : DWORD;
      dwUsage* : DWORD;
      lpLocalName* : LPWSTR;
      lpRemoteName* : LPWSTR;
      lpComment* : LPWSTR;
      lpProvider* : LPWSTR
    END;

    NETRESOURCEW* = _NETRESOURCEW_struct;

    LPNETRESOURCEW* = POINTER TO _NETRESOURCEW_struct;

    NETRESOURCE* = NETRESOURCEA;

    LPNETRESOURCE* = LPNETRESOURCEA;

    _CONNECTDLGSTRUCTA_struct* = RECORD [notag]
      cbStructure* : DWORD;
      hwndOwner* : HWND;
      lpConnRes* : LPNETRESOURCEA;
      dwFlags* : DWORD;
      dwDevNum* : DWORD
    END;

    CONNECTDLGSTRUCTA* = _CONNECTDLGSTRUCTA_struct;

    LPCONNECTDLGSTRUCTA* = POINTER TO _CONNECTDLGSTRUCTA_struct;

    _CONNECTDLGSTRUCTW_struct* = RECORD [notag]
      cbStructure* : DWORD;
      hwndOwner* : HWND;
      lpConnRes* : LPNETRESOURCEW;
      dwFlags* : DWORD;
      dwDevNum* : DWORD
    END;

    CONNECTDLGSTRUCTW* = _CONNECTDLGSTRUCTW_struct;

    LPCONNECTDLGSTRUCTW* = POINTER TO _CONNECTDLGSTRUCTW_struct;

    CONNECTDLGSTRUCT* = CONNECTDLGSTRUCTA;

    LPCONNECTDLGSTRUCT* = LPCONNECTDLGSTRUCTA;

    _DISCDLGSTRUCTA_struct* = RECORD [notag]
      cbStructure* : DWORD;
      hwndOwner* : HWND;
      lpLocalName* : LPSTR;
      lpRemoteName* : LPSTR;
      dwFlags* : DWORD
    END;

    DISCDLGSTRUCTA* = _DISCDLGSTRUCTA_struct;

    LPDISCDLGSTRUCTA* = POINTER TO _DISCDLGSTRUCTA_struct;

    _DISCDLGSTRUCTW_struct* = RECORD [notag]
      cbStructure* : DWORD;
      hwndOwner* : HWND;
      lpLocalName* : LPWSTR;
      lpRemoteName* : LPWSTR;
      dwFlags* : DWORD
    END;

    DISCDLGSTRUCTW* = _DISCDLGSTRUCTW_struct;

    LPDISCDLGSTRUCTW* = POINTER TO _DISCDLGSTRUCTW_struct;

    DISCDLGSTRUCT* = DISCDLGSTRUCTA;

    LPDISCDLGSTRUCT* = LPDISCDLGSTRUCTA;

    _UNIVERSAL_NAME_INFOA_struct* = RECORD [notag]
      lpUniversalName* : LPSTR
    END;

    UNIVERSAL_NAME_INFOA* = _UNIVERSAL_NAME_INFOA_struct;

    LPUNIVERSAL_NAME_INFOA* = POINTER TO _UNIVERSAL_NAME_INFOA_struct;

    _UNIVERSAL_NAME_INFOW_struct* = RECORD [notag]
      lpUniversalName* : LPWSTR
    END;

    UNIVERSAL_NAME_INFOW* = _UNIVERSAL_NAME_INFOW_struct;

    LPUNIVERSAL_NAME_INFOW* = POINTER TO _UNIVERSAL_NAME_INFOW_struct;

    UNIVERSAL_NAME_INFO* = UNIVERSAL_NAME_INFOA;

    LPUNIVERSAL_NAME_INFO* = LPUNIVERSAL_NAME_INFOA;

    _REMOTE_NAME_INFOA_struct* = RECORD [notag]
      lpUniversalName* : LPSTR;
      lpConnectionName* : LPSTR;
      lpRemainingPath* : LPSTR
    END;

    REMOTE_NAME_INFOA* = _REMOTE_NAME_INFOA_struct;

    LPREMOTE_NAME_INFOA* = POINTER TO _REMOTE_NAME_INFOA_struct;

    _REMOTE_NAME_INFOW_struct* = RECORD [notag]
      lpUniversalName* : LPWSTR;
      lpConnectionName* : LPWSTR;
      lpRemainingPath* : LPWSTR
    END;

    REMOTE_NAME_INFOW* = _REMOTE_NAME_INFOW_struct;

    LPREMOTE_NAME_INFOW* = POINTER TO _REMOTE_NAME_INFOW_struct;

    REMOTE_NAME_INFO* = REMOTE_NAME_INFOA;

    LPREMOTE_NAME_INFO* = LPREMOTE_NAME_INFOA;

    _NETINFOSTRUCT_struct* = RECORD [notag]
      cbStructure* : DWORD;
      dwProviderVersion* : DWORD;
      dwStatus* : DWORD;
      dwCharacteristics* : DWORD;
      dwHandle* : DWORD;
      wNetType* : WORD;
      dwPrinters* : DWORD;
      dwDrives* : DWORD
    END;

    NETINFOSTRUCT* = _NETINFOSTRUCT_struct;

    LPNETINFOSTRUCT* = POINTER TO _NETINFOSTRUCT_struct;

    PFNGETPROFILEPATHA* = PROCEDURE (pszUsername : LPCSTR; pszBuffer : LPSTR; cbBuffer : UINT) : UINT;

    PFNGETPROFILEPATHW* = PROCEDURE (pszUsername : LPCWSTR; pszBuffer : LPWSTR; cbBuffer : UINT) : UINT;

    PFNRECONCILEPROFILEA* = PROCEDURE (pszCentralFile : LPCSTR; pszLocalFile : LPCSTR; dwFlags : DWORD) : UINT;

    PFNRECONCILEPROFILEW* = PROCEDURE (pszCentralFile : LPCWSTR; pszLocalFile : LPCWSTR; dwFlags : DWORD) : UINT;

    PFNPROCESSPOLICIESA* = PROCEDURE (hwnd : HWND; pszPath : LPCSTR; pszUsername : LPCSTR; pszComputerName : LPCSTR; dwFlags : DWORD) : BOOL;

    PFNPROCESSPOLICIESW* = PROCEDURE (hwnd : HWND; pszPath : LPCWSTR; pszUsername : LPCWSTR; pszComputerName : LPCWSTR; dwFlags : DWORD) : BOOL;

    _NETCONNECTINFOSTRUCT_struct* = RECORD [notag]
      cbStructure* : DWORD;
      dwFlags* : DWORD;
      dwSpeed* : DWORD;
      dwDelay* : DWORD;
      dwOptDataSize* : DWORD
    END;

    NETCONNECTINFOSTRUCT* = _NETCONNECTINFOSTRUCT_struct;

    LPNETCONNECTINFOSTRUCT* = POINTER TO _NETCONNECTINFOSTRUCT_struct;

    _SERVICE_DESCRIPTIONA_struct* = RECORD [notag]
      lpDescription* : LPSTR
    END;

    SERVICE_DESCRIPTIONA* = _SERVICE_DESCRIPTIONA_struct;

    LPSERVICE_DESCRIPTIONA* = POINTER TO _SERVICE_DESCRIPTIONA_struct;

    _SERVICE_DESCRIPTIONW_struct* = RECORD [notag]
      lpDescription* : LPWSTR
    END;

    SERVICE_DESCRIPTIONW* = _SERVICE_DESCRIPTIONW_struct;

    LPSERVICE_DESCRIPTIONW* = POINTER TO _SERVICE_DESCRIPTIONW_struct;

    SERVICE_DESCRIPTION* = SERVICE_DESCRIPTIONA;

    LPSERVICE_DESCRIPTION* = LPSERVICE_DESCRIPTIONA;

    SC_ACTION_TYPE* = EXCEPTION_DISPOSITION;

    _SC_ACTION_struct* = RECORD [notag]
      Type* : SC_ACTION_TYPE;
      Delay* : DWORD
    END;

    SC_ACTION* = _SC_ACTION_struct;

    LPSC_ACTION* = POINTER TO _SC_ACTION_struct;

    _SERVICE_FAILURE_ACTIONSA_struct* = RECORD [notag]
      dwResetPeriod* : DWORD;
      lpRebootMsg* : LPSTR;
      lpCommand* : LPSTR;
      cActions* : DWORD;
      lpsaActions* : POINTER TO SC_ACTION
    END;

    SERVICE_FAILURE_ACTIONSA* = _SERVICE_FAILURE_ACTIONSA_struct;

    LPSERVICE_FAILURE_ACTIONSA* = POINTER TO _SERVICE_FAILURE_ACTIONSA_struct;

    _SERVICE_FAILURE_ACTIONSW_struct* = RECORD [notag]
      dwResetPeriod* : DWORD;
      lpRebootMsg* : LPWSTR;
      lpCommand* : LPWSTR;
      cActions* : DWORD;
      lpsaActions* : POINTER TO SC_ACTION
    END;

    SERVICE_FAILURE_ACTIONSW* = _SERVICE_FAILURE_ACTIONSW_struct;

    LPSERVICE_FAILURE_ACTIONSW* = POINTER TO _SERVICE_FAILURE_ACTIONSW_struct;

    SERVICE_FAILURE_ACTIONS* = SERVICE_FAILURE_ACTIONSA;

    LPSERVICE_FAILURE_ACTIONS* = LPSERVICE_FAILURE_ACTIONSA;

    SC_HANDLE* = HANDLE;

    LPSC_HANDLE* = POINTER TO ARRAY OF SC_HANDLE;

    SERVICE_STATUS_HANDLE* = DWORD;

    _SERVICE_STATUS_struct* = RECORD [notag]
      dwServiceType* : DWORD;
      dwCurrentState* : DWORD;
      dwControlsAccepted* : DWORD;
      dwWin32ExitCode* : DWORD;
      dwServiceSpecificExitCode* : DWORD;
      dwCheckPoint* : DWORD;
      dwWaitHint* : DWORD
    END;

    SERVICE_STATUS* = _SERVICE_STATUS_struct;

    LPSERVICE_STATUS* = POINTER TO _SERVICE_STATUS_struct;

    _ENUM_SERVICE_STATUSA_struct* = RECORD [notag]
      lpServiceName* : LPSTR;
      lpDisplayName* : LPSTR;
      ServiceStatus* : SERVICE_STATUS
    END;

    ENUM_SERVICE_STATUSA* = _ENUM_SERVICE_STATUSA_struct;

    LPENUM_SERVICE_STATUSA* = POINTER TO _ENUM_SERVICE_STATUSA_struct;

    _ENUM_SERVICE_STATUSW_struct* = RECORD [notag]
      lpServiceName* : LPWSTR;
      lpDisplayName* : LPWSTR;
      ServiceStatus* : SERVICE_STATUS
    END;

    ENUM_SERVICE_STATUSW* = _ENUM_SERVICE_STATUSW_struct;

    LPENUM_SERVICE_STATUSW* = POINTER TO _ENUM_SERVICE_STATUSW_struct;

    ENUM_SERVICE_STATUS* = ENUM_SERVICE_STATUSA;

    LPENUM_SERVICE_STATUS* = LPENUM_SERVICE_STATUSA;

    SC_LOCK* = LPVOID;

    _QUERY_SERVICE_LOCK_STATUSA_struct* = RECORD [notag]
      fIsLocked* : DWORD;
      lpLockOwner* : LPSTR;
      dwLockDuration* : DWORD
    END;

    QUERY_SERVICE_LOCK_STATUSA* = _QUERY_SERVICE_LOCK_STATUSA_struct;

    LPQUERY_SERVICE_LOCK_STATUSA* = POINTER TO _QUERY_SERVICE_LOCK_STATUSA_struct;

    _QUERY_SERVICE_LOCK_STATUSW_struct* = RECORD [notag]
      fIsLocked* : DWORD;
      lpLockOwner* : LPWSTR;
      dwLockDuration* : DWORD
    END;

    QUERY_SERVICE_LOCK_STATUSW* = _QUERY_SERVICE_LOCK_STATUSW_struct;

    LPQUERY_SERVICE_LOCK_STATUSW* = POINTER TO _QUERY_SERVICE_LOCK_STATUSW_struct;

    QUERY_SERVICE_LOCK_STATUS* = QUERY_SERVICE_LOCK_STATUSA;

    LPQUERY_SERVICE_LOCK_STATUS* = LPQUERY_SERVICE_LOCK_STATUSA;

    _QUERY_SERVICE_CONFIGA_struct* = RECORD [notag]
      dwServiceType* : DWORD;
      dwStartType* : DWORD;
      dwErrorControl* : DWORD;
      lpBinaryPathName* : LPSTR;
      lpLoadOrderGroup* : LPSTR;
      dwTagId* : DWORD;
      lpDependencies* : LPSTR;
      lpServiceStartName* : LPSTR;
      lpDisplayName* : LPSTR
    END;

    QUERY_SERVICE_CONFIGA* = _QUERY_SERVICE_CONFIGA_struct;

    LPQUERY_SERVICE_CONFIGA* = POINTER TO _QUERY_SERVICE_CONFIGA_struct;

    _QUERY_SERVICE_CONFIGW_struct* = RECORD [notag]
      dwServiceType* : DWORD;
      dwStartType* : DWORD;
      dwErrorControl* : DWORD;
      lpBinaryPathName* : LPWSTR;
      lpLoadOrderGroup* : LPWSTR;
      dwTagId* : DWORD;
      lpDependencies* : LPWSTR;
      lpServiceStartName* : LPWSTR;
      lpDisplayName* : LPWSTR
    END;

    QUERY_SERVICE_CONFIGW* = _QUERY_SERVICE_CONFIGW_struct;

    LPQUERY_SERVICE_CONFIGW* = POINTER TO _QUERY_SERVICE_CONFIGW_struct;

    QUERY_SERVICE_CONFIG* = QUERY_SERVICE_CONFIGA;

    LPQUERY_SERVICE_CONFIG* = LPQUERY_SERVICE_CONFIGA;

    AutoPtr_LPWSTR* = POINTER TO ARRAY OF LPWSTR;

    LPSERVICE_MAIN_FUNCTIONW* = PROCEDURE (dwNumServicesArgs : DWORD; VAR [nil] lpServiceArgVectors : LPWSTR);

    LPSERVICE_MAIN_FUNCTIONA* = LPSERVICE_MAIN_FUNCTIONW;

    _SERVICE_TABLE_ENTRYA_struct* = RECORD [notag]
      lpServiceName* : LPSTR;
      lpServiceProc* : LPSERVICE_MAIN_FUNCTIONA
    END;

    SERVICE_TABLE_ENTRYA* = _SERVICE_TABLE_ENTRYA_struct;

    LPSERVICE_TABLE_ENTRYA* = POINTER TO _SERVICE_TABLE_ENTRYA_struct;

    _SERVICE_TABLE_ENTRYW_struct* = RECORD [notag]
      lpServiceName* : LPWSTR;
      lpServiceProc* : LPSERVICE_MAIN_FUNCTIONW
    END;

    SERVICE_TABLE_ENTRYW* = _SERVICE_TABLE_ENTRYW_struct;

    LPSERVICE_TABLE_ENTRYW* = POINTER TO _SERVICE_TABLE_ENTRYW_struct;

    SERVICE_TABLE_ENTRY* = SERVICE_TABLE_ENTRYA;

    LPSERVICE_TABLE_ENTRY* = LPSERVICE_TABLE_ENTRYA;

    LPHANDLER_FUNCTION* = WORKERCALLBACKFUNC;

    _MODEMDEVCAPS_struct* = RECORD [notag]
      dwActualSize* : DWORD;
      dwRequiredSize* : DWORD;
      dwDevSpecificOffset* : DWORD;
      dwDevSpecificSize* : DWORD;
      dwModemProviderVersion* : DWORD;
      dwModemManufacturerOffset* : DWORD;
      dwModemManufacturerSize* : DWORD;
      dwModemModelOffset* : DWORD;
      dwModemModelSize* : DWORD;
      dwModemVersionOffset* : DWORD;
      dwModemVersionSize* : DWORD;
      dwDialOptions* : DWORD;
      dwCallSetupFailTimer* : DWORD;
      dwInactivityTimeout* : DWORD;
      dwSpeakerVolume* : DWORD;
      dwSpeakerMode* : DWORD;
      dwModemOptions* : DWORD;
      dwMaxDTERate* : DWORD;
      dwMaxDCERate* : DWORD;
      abVariablePortion* : ARRAY 1 OF BYTE
    END;

    MODEMDEVCAPS* = _MODEMDEVCAPS_struct;

    PMODEMDEVCAPS* = POINTER TO _MODEMDEVCAPS_struct;

    LPMODEMDEVCAPS* = PMODEMDEVCAPS;

    _MODEMSETTINGS_struct* = RECORD [notag]
      dwActualSize* : DWORD;
      dwRequiredSize* : DWORD;
      dwDevSpecificOffset* : DWORD;
      dwDevSpecificSize* : DWORD;
      dwCallSetupFailTimer* : DWORD;
      dwInactivityTimeout* : DWORD;
      dwSpeakerVolume* : DWORD;
      dwSpeakerMode* : DWORD;
      dwPreferredModemOptions* : DWORD;
      dwNegotiatedModemOptions* : DWORD;
      dwNegotiatedDCERate* : DWORD;
      abVariablePortion* : ARRAY 1 OF BYTE
    END;

    MODEMSETTINGS* = _MODEMSETTINGS_struct;

    PMODEMSETTINGS* = POINTER TO _MODEMSETTINGS_struct;

    LPMODEMSETTINGS* = PMODEMSETTINGS;

    HIMC* = DWORD;

    HIMCC* = DWORD;

    LPHKL* = POINTER TO ARRAY OF HKL;

    tagCOMPOSITIONFORM_struct* = RECORD [notag]
      dwStyle* : DWORD;
      ptCurrentPos* : POINT;
      rcArea* : RECT
    END;

    COMPOSITIONFORM* = tagCOMPOSITIONFORM_struct;

    PCOMPOSITIONFORM* = POINTER TO tagCOMPOSITIONFORM_struct;

    NPCOMPOSITIONFORM* = PCOMPOSITIONFORM;

    LPCOMPOSITIONFORM* = PCOMPOSITIONFORM;

    tagCANDIDATEFORM_struct* = RECORD [notag]
      dwIndex* : DWORD;
      dwStyle* : DWORD;
      ptCurrentPos* : POINT;
      rcArea* : RECT
    END;

    CANDIDATEFORM* = tagCANDIDATEFORM_struct;

    PCANDIDATEFORM* = POINTER TO tagCANDIDATEFORM_struct;

    NPCANDIDATEFORM* = PCANDIDATEFORM;

    LPCANDIDATEFORM* = PCANDIDATEFORM;

    tagCANDIDATELIST_struct* = RECORD [notag]
      dwSize* : DWORD;
      dwStyle* : DWORD;
      dwCount* : DWORD;
      dwSelection* : DWORD;
      dwPageStart* : DWORD;
      dwPageSize* : DWORD;
      dwOffset* : ARRAY 1 OF DWORD
    END;

    CANDIDATELIST* = tagCANDIDATELIST_struct;

    PCANDIDATELIST* = POINTER TO tagCANDIDATELIST_struct;

    NPCANDIDATELIST* = PCANDIDATELIST;

    LPCANDIDATELIST* = PCANDIDATELIST;

    tagREGISTERWORDA_struct* = RECORD [notag]
      lpReading* : LPSTR;
      lpWord* : LPSTR
    END;

    REGISTERWORDA* = tagREGISTERWORDA_struct;

    PREGISTERWORDA* = POINTER TO tagREGISTERWORDA_struct;

    NPREGISTERWORDA* = PREGISTERWORDA;

    LPREGISTERWORDA* = PREGISTERWORDA;

    tagREGISTERWORDW_struct* = RECORD [notag]
      lpReading* : LPWSTR;
      lpWord* : LPWSTR
    END;

    REGISTERWORDW* = tagREGISTERWORDW_struct;

    PREGISTERWORDW* = POINTER TO tagREGISTERWORDW_struct;

    NPREGISTERWORDW* = PREGISTERWORDW;

    LPREGISTERWORDW* = PREGISTERWORDW;

    REGISTERWORD* = REGISTERWORDA;

    PREGISTERWORD* = PREGISTERWORDA;

    NPREGISTERWORD* = NPREGISTERWORDA;

    LPREGISTERWORD* = LPREGISTERWORDA;

    tagSTYLEBUFA_struct* = RECORD [notag]
      dwStyle* : DWORD;
      szDescription* : ARRAY 32 OF CHAR
    END;

    STYLEBUFA* = tagSTYLEBUFA_struct;

    PSTYLEBUFA* = POINTER TO tagSTYLEBUFA_struct;

    NPSTYLEBUFA* = PSTYLEBUFA;

    LPSTYLEBUFA* = PSTYLEBUFA;

    tagSTYLEBUFW_struct* = RECORD [notag]
      dwStyle* : DWORD;
      szDescription* : ARRAY 32 OF WCHAR
    END;

    STYLEBUFW* = tagSTYLEBUFW_struct;

    PSTYLEBUFW* = POINTER TO tagSTYLEBUFW_struct;

    NPSTYLEBUFW* = PSTYLEBUFW;

    LPSTYLEBUFW* = PSTYLEBUFW;

    STYLEBUF* = STYLEBUFA;

    PSTYLEBUF* = PSTYLEBUFA;

    NPSTYLEBUF* = NPSTYLEBUFA;

    LPSTYLEBUF* = LPSTYLEBUFA;

    REGISTERWORDENUMPROCA* = PROCEDURE (p0 : LPCSTR; p1 : DWORD; p2 : LPCSTR; p3 : LPVOID) : LONGINT;

    REGISTERWORDENUMPROCW* = PROCEDURE (p0 : LPCWSTR; p1 : DWORD; p2 : LPCWSTR; p3 : LPVOID) : LONGINT;

    MMVERSION* = UINT;

    MMRESULT* = UINT;

    mmtime_tag_struct* = RECORD [ALIGN1]
      wType* : UINT;
      u* : RECORD [UNION]
        ms* : DWORD;
        sample* : DWORD;
        cb* : DWORD;
        ticks* : DWORD;
        smpte* : RECORD [ALIGN1]
          hour* : BYTE;
          noname0* : BYTE;
          sec* : BYTE;
          frame* : BYTE;
          fps* : BYTE;
          dummy* : BYTE;
          pad* : ARRAY 2 OF BYTE
        END;
        midi* : RECORD [ALIGN1]
          songptrpos* : DWORD
        END
      END
    END;

    MMTIME* = mmtime_tag_struct;

    PMMTIME* = POINTER TO mmtime_tag_struct;

    NPMMTIME* = PMMTIME;

    LPMMTIME* = PMMTIME;

    HDRVR* = HANDLE;

    DRVCONFIGINFOEX_struct* = RECORD [ALIGN1]
      dwDCISize* : DWORD;
      lpszDCISectionName* : LPCWSTR;
      lpszDCIAliasName* : LPCWSTR;
      dnDevNode* : DWORD
    END;

    DRVCONFIGINFOEX* = DRVCONFIGINFOEX_struct;

    PDRVCONFIGINFOEX* = POINTER TO DRVCONFIGINFOEX_struct;

    NPDRVCONFIGINFOEX* = PDRVCONFIGINFOEX;

    LPDRVCONFIGINFOEX* = PDRVCONFIGINFOEX;

    tagDRVCONFIGINFO_struct* = RECORD [ALIGN1]
      dwDCISize* : DWORD;
      lpszDCISectionName* : LPCWSTR;
      lpszDCIAliasName* : LPCWSTR
    END;

    DRVCONFIGINFO* = tagDRVCONFIGINFO_struct;

    PDRVCONFIGINFO* = POINTER TO tagDRVCONFIGINFO_struct;

    NPDRVCONFIGINFO* = PDRVCONFIGINFO;

    LPDRVCONFIGINFO* = PDRVCONFIGINFO;

    DRIVERPROC* = PROCEDURE (p0 : DWORD; p1 : HDRVR; p2 : UINT; p3 : LPARAM; p4 : LPARAM) : LRESULT;

    LPDRVCALLBACK* = PROCEDURE (hdrvr : HDRVR; uMsg : UINT; dwUser : DWORD; dw1 : DWORD; dw2 : DWORD);

    PDRVCALLBACK* = LPDRVCALLBACK;

    HWAVE* = HANDLE;

    HWAVEIN* = HANDLE;

    HWAVEOUT* = HANDLE;

    LPHWAVEIN* = POINTER TO ARRAY OF HWAVEIN;

    LPHWAVEOUT* = POINTER TO ARRAY OF HWAVEOUT;

    LPWAVECALLBACK* = PROCEDURE (hdrvr : HDRVR; uMsg : UINT; dwUser : DWORD; dw1 : DWORD; dw2 : DWORD);

    PWAVEHDR* = POINTER TO wavehdr_tag_struct;

    wavehdr_tag_struct* = RECORD [ALIGN1]
      lpData* : LPSTR;
      dwBufferLength* : DWORD;
      dwBytesRecorded* : DWORD;
      dwUser* : DWORD;
      dwFlags* : DWORD;
      dwLoops* : DWORD;
      lpNext* : PWAVEHDR;
      reserved* : DWORD
    END;

    WAVEHDR* = wavehdr_tag_struct;

    NPWAVEHDR* = PWAVEHDR;

    LPWAVEHDR* = PWAVEHDR;

    tagWAVEOUTCAPSA_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      vDriverVersion* : MMVERSION;
      szPname* : ARRAY 32 OF CHAR;
      dwFormats* : DWORD;
      wChannels* : WORD;
      wReserved1* : WORD;
      dwSupport* : DWORD
    END;

    WAVEOUTCAPSA* = tagWAVEOUTCAPSA_struct;

    PWAVEOUTCAPSA* = POINTER TO tagWAVEOUTCAPSA_struct;

    NPWAVEOUTCAPSA* = PWAVEOUTCAPSA;

    LPWAVEOUTCAPSA* = PWAVEOUTCAPSA;

    tagWAVEOUTCAPSW_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      vDriverVersion* : MMVERSION;
      szPname* : ARRAY 32 OF WCHAR;
      dwFormats* : DWORD;
      wChannels* : WORD;
      wReserved1* : WORD;
      dwSupport* : DWORD
    END;

    WAVEOUTCAPSW* = tagWAVEOUTCAPSW_struct;

    PWAVEOUTCAPSW* = POINTER TO tagWAVEOUTCAPSW_struct;

    NPWAVEOUTCAPSW* = PWAVEOUTCAPSW;

    LPWAVEOUTCAPSW* = PWAVEOUTCAPSW;

    WAVEOUTCAPS* = WAVEOUTCAPSA;

    PWAVEOUTCAPS* = PWAVEOUTCAPSA;

    NPWAVEOUTCAPS* = NPWAVEOUTCAPSA;

    LPWAVEOUTCAPS* = LPWAVEOUTCAPSA;

    tagWAVEINCAPSA_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      vDriverVersion* : MMVERSION;
      szPname* : ARRAY 32 OF CHAR;
      dwFormats* : DWORD;
      wChannels* : WORD;
      wReserved1* : WORD
    END;

    WAVEINCAPSA* = tagWAVEINCAPSA_struct;

    PWAVEINCAPSA* = POINTER TO tagWAVEINCAPSA_struct;

    NPWAVEINCAPSA* = PWAVEINCAPSA;

    LPWAVEINCAPSA* = PWAVEINCAPSA;

    tagWAVEINCAPSW_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      vDriverVersion* : MMVERSION;
      szPname* : ARRAY 32 OF WCHAR;
      dwFormats* : DWORD;
      wChannels* : WORD;
      wReserved1* : WORD
    END;

    WAVEINCAPSW* = tagWAVEINCAPSW_struct;

    PWAVEINCAPSW* = POINTER TO tagWAVEINCAPSW_struct;

    NPWAVEINCAPSW* = PWAVEINCAPSW;

    LPWAVEINCAPSW* = PWAVEINCAPSW;

    WAVEINCAPS* = WAVEINCAPSA;

    PWAVEINCAPS* = PWAVEINCAPSA;

    NPWAVEINCAPS* = NPWAVEINCAPSA;

    LPWAVEINCAPS* = LPWAVEINCAPSA;

    waveformat_tag_struct* = RECORD [ALIGN1]
      wFormatTag* : WORD;
      nChannels* : WORD;
      nSamplesPerSec* : DWORD;
      nAvgBytesPerSec* : DWORD;
      nBlockAlign* : WORD
    END;

    WAVEFORMAT* = waveformat_tag_struct;

    PWAVEFORMAT* = POINTER TO waveformat_tag_struct;

    NPWAVEFORMAT* = PWAVEFORMAT;

    LPWAVEFORMAT* = PWAVEFORMAT;

    pcmwaveformat_tag_struct* = RECORD [ALIGN1]
      wf* : WAVEFORMAT;
      wBitsPerSample* : WORD
    END;

    PCMWAVEFORMAT* = pcmwaveformat_tag_struct;

    PPCMWAVEFORMAT* = POINTER TO pcmwaveformat_tag_struct;

    NPPCMWAVEFORMAT* = PPCMWAVEFORMAT;

    LPPCMWAVEFORMAT* = PPCMWAVEFORMAT;

    tWAVEFORMATEX_struct* = RECORD [ALIGN1]
      wFormatTag* : WORD;
      nChannels* : WORD;
      nSamplesPerSec* : DWORD;
      nAvgBytesPerSec* : DWORD;
      nBlockAlign* : WORD;
      wBitsPerSample* : WORD;
      cbSize* : WORD
    END;

    WAVEFORMATEX* = tWAVEFORMATEX_struct;

    PWAVEFORMATEX* = POINTER TO tWAVEFORMATEX_struct;

    NPWAVEFORMATEX* = PWAVEFORMATEX;

    LPWAVEFORMATEX* = PWAVEFORMATEX;

    LPCWAVEFORMATEX* = POINTER TO WAVEFORMATEX;

    HMIDI* = HANDLE;

    HMIDIIN* = HANDLE;

    HMIDIOUT* = HANDLE;

    HMIDISTRM* = HANDLE;

    LPHMIDI* = POINTER TO ARRAY OF HMIDI;

    LPHMIDIIN* = POINTER TO ARRAY OF HMIDIIN;

    LPHMIDIOUT* = POINTER TO ARRAY OF HMIDIOUT;

    LPHMIDISTRM* = POINTER TO ARRAY OF HMIDISTRM;

    LPMIDICALLBACK* = PROCEDURE (hdrvr : HDRVR; uMsg : UINT; dwUser : DWORD; dw1 : DWORD; dw2 : DWORD);

    PATCHARRAY* = ARRAY 128 OF WORD;

    LPPATCHARRAY* = PWORD;

    KEYARRAY* = PATCHARRAY;

    LPKEYARRAY* = PWORD;

    tagMIDIOUTCAPSA_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      vDriverVersion* : MMVERSION;
      szPname* : ARRAY 32 OF CHAR;
      wTechnology* : WORD;
      wVoices* : WORD;
      wNotes* : WORD;
      wChannelMask* : WORD;
      dwSupport* : DWORD
    END;

    MIDIOUTCAPSA* = tagMIDIOUTCAPSA_struct;

    PMIDIOUTCAPSA* = POINTER TO tagMIDIOUTCAPSA_struct;

    NPMIDIOUTCAPSA* = PMIDIOUTCAPSA;

    LPMIDIOUTCAPSA* = PMIDIOUTCAPSA;

    tagMIDIOUTCAPSW_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      vDriverVersion* : MMVERSION;
      szPname* : ARRAY 32 OF WCHAR;
      wTechnology* : WORD;
      wVoices* : WORD;
      wNotes* : WORD;
      wChannelMask* : WORD;
      dwSupport* : DWORD
    END;

    MIDIOUTCAPSW* = tagMIDIOUTCAPSW_struct;

    PMIDIOUTCAPSW* = POINTER TO tagMIDIOUTCAPSW_struct;

    NPMIDIOUTCAPSW* = PMIDIOUTCAPSW;

    LPMIDIOUTCAPSW* = PMIDIOUTCAPSW;

    MIDIOUTCAPS* = MIDIOUTCAPSA;

    PMIDIOUTCAPS* = PMIDIOUTCAPSA;

    NPMIDIOUTCAPS* = NPMIDIOUTCAPSA;

    LPMIDIOUTCAPS* = LPMIDIOUTCAPSA;

    tagMIDIINCAPSA_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      vDriverVersion* : MMVERSION;
      szPname* : ARRAY 32 OF CHAR;
      dwSupport* : DWORD
    END;

    MIDIINCAPSA* = tagMIDIINCAPSA_struct;

    PMIDIINCAPSA* = POINTER TO tagMIDIINCAPSA_struct;

    NPMIDIINCAPSA* = PMIDIINCAPSA;

    LPMIDIINCAPSA* = PMIDIINCAPSA;

    tagMIDIINCAPSW_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      vDriverVersion* : MMVERSION;
      szPname* : ARRAY 32 OF WCHAR;
      dwSupport* : DWORD
    END;

    MIDIINCAPSW* = tagMIDIINCAPSW_struct;

    PMIDIINCAPSW* = POINTER TO tagMIDIINCAPSW_struct;

    NPMIDIINCAPSW* = PMIDIINCAPSW;

    LPMIDIINCAPSW* = PMIDIINCAPSW;

    MIDIINCAPS* = MIDIINCAPSA;

    PMIDIINCAPS* = PMIDIINCAPSA;

    NPMIDIINCAPS* = NPMIDIINCAPSA;

    LPMIDIINCAPS* = LPMIDIINCAPSA;

    PMIDIHDR* = POINTER TO midihdr_tag_struct;

    midihdr_tag_struct* = RECORD [ALIGN1]
      lpData* : LPSTR;
      dwBufferLength* : DWORD;
      dwBytesRecorded* : DWORD;
      dwUser* : DWORD;
      dwFlags* : DWORD;
      lpNext* : PMIDIHDR;
      reserved* : DWORD;
      dwOffset* : DWORD;
      dwReserved* : ARRAY 8 OF DWORD
    END;

    MIDIHDR* = midihdr_tag_struct;

    NPMIDIHDR* = PMIDIHDR;

    LPMIDIHDR* = PMIDIHDR;

    midievent_tag_struct* = RECORD [ALIGN1]
      dwDeltaTime* : DWORD;
      dwStreamID* : DWORD;
      dwEvent* : DWORD;
      dwParms* : ARRAY 1 OF DWORD
    END;

    MIDIEVENT* = midievent_tag_struct;

    midistrmbuffver_tag_struct* = RECORD [ALIGN1]
      dwVersion* : DWORD;
      dwMid* : DWORD;
      dwOEMVersion* : DWORD
    END;

    MIDISTRMBUFFVER* = midistrmbuffver_tag_struct;

    midiproptimediv_tag_struct* = RECORD [ALIGN1]
      cbStruct* : DWORD;
      dwTimeDiv* : DWORD
    END;

    MIDIPROPTIMEDIV* = midiproptimediv_tag_struct;

    LPMIDIPROPTIMEDIV* = POINTER TO midiproptimediv_tag_struct;

    midiproptempo_tag_struct* = RECORD [ALIGN1]
      cbStruct* : DWORD;
      dwTempo* : DWORD
    END;

    MIDIPROPTEMPO* = midiproptempo_tag_struct;

    LPMIDIPROPTEMPO* = POINTER TO midiproptempo_tag_struct;

    tagAUXCAPSA_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      vDriverVersion* : MMVERSION;
      szPname* : ARRAY 32 OF CHAR;
      wTechnology* : WORD;
      wReserved1* : WORD;
      dwSupport* : DWORD
    END;

    AUXCAPSA* = tagAUXCAPSA_struct;

    PAUXCAPSA* = POINTER TO tagAUXCAPSA_struct;

    NPAUXCAPSA* = PAUXCAPSA;

    LPAUXCAPSA* = PAUXCAPSA;

    tagAUXCAPSW_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      vDriverVersion* : MMVERSION;
      szPname* : ARRAY 32 OF WCHAR;
      wTechnology* : WORD;
      wReserved1* : WORD;
      dwSupport* : DWORD
    END;

    AUXCAPSW* = tagAUXCAPSW_struct;

    PAUXCAPSW* = POINTER TO tagAUXCAPSW_struct;

    NPAUXCAPSW* = PAUXCAPSW;

    LPAUXCAPSW* = PAUXCAPSW;

    AUXCAPS* = AUXCAPSA;

    PAUXCAPS* = PAUXCAPSA;

    NPAUXCAPS* = NPAUXCAPSA;

    LPAUXCAPS* = LPAUXCAPSA;

    HMIXEROBJ* = HANDLE;

    LPHMIXEROBJ* = POINTER TO ARRAY OF HMIXEROBJ;

    HMIXER* = HANDLE;

    LPHMIXER* = POINTER TO ARRAY OF HMIXER;

    tagMIXERCAPSA_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      vDriverVersion* : MMVERSION;
      szPname* : ARRAY 32 OF CHAR;
      fdwSupport* : DWORD;
      cDestinations* : DWORD
    END;

    MIXERCAPSA* = tagMIXERCAPSA_struct;

    PMIXERCAPSA* = POINTER TO tagMIXERCAPSA_struct;

    LPMIXERCAPSA* = PMIXERCAPSA;

    tagMIXERCAPSW_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      vDriverVersion* : MMVERSION;
      szPname* : ARRAY 32 OF WCHAR;
      fdwSupport* : DWORD;
      cDestinations* : DWORD
    END;

    MIXERCAPSW* = tagMIXERCAPSW_struct;

    PMIXERCAPSW* = POINTER TO tagMIXERCAPSW_struct;

    LPMIXERCAPSW* = PMIXERCAPSW;

    MIXERCAPS* = MIXERCAPSA;

    PMIXERCAPS* = PMIXERCAPSA;

    LPMIXERCAPS* = LPMIXERCAPSA;

    tagMIXERLINEA_struct* = RECORD [ALIGN1]
      cbStruct* : DWORD;
      dwDestination* : DWORD;
      dwSource* : DWORD;
      dwLineID* : DWORD;
      fdwLine* : DWORD;
      dwUser* : DWORD;
      dwComponentType* : DWORD;
      cChannels* : DWORD;
      cConnections* : DWORD;
      cControls* : DWORD;
      szShortName* : ARRAY 16 OF CHAR;
      szName* : ARRAY 64 OF CHAR;
      Target* : RECORD [ALIGN1]
        dwType* : DWORD;
        dwDeviceID* : DWORD;
        wMid* : WORD;
        wPid* : WORD;
        vDriverVersion* : MMVERSION;
        szPname* : ARRAY 32 OF CHAR
      END
    END;

    MIXERLINEA* = tagMIXERLINEA_struct;

    PMIXERLINEA* = POINTER TO tagMIXERLINEA_struct;

    LPMIXERLINEA* = PMIXERLINEA;

    tagMIXERLINEW_struct* = RECORD [ALIGN1]
      cbStruct* : DWORD;
      dwDestination* : DWORD;
      dwSource* : DWORD;
      dwLineID* : DWORD;
      fdwLine* : DWORD;
      dwUser* : DWORD;
      dwComponentType* : DWORD;
      cChannels* : DWORD;
      cConnections* : DWORD;
      cControls* : DWORD;
      szShortName* : ARRAY 16 OF WCHAR;
      szName* : ARRAY 64 OF WCHAR;
      Target* : RECORD [ALIGN1]
        dwType* : DWORD;
        dwDeviceID* : DWORD;
        wMid* : WORD;
        wPid* : WORD;
        vDriverVersion* : MMVERSION;
        szPname* : ARRAY 32 OF WCHAR
      END
    END;

    MIXERLINEW* = tagMIXERLINEW_struct;

    PMIXERLINEW* = POINTER TO tagMIXERLINEW_struct;

    LPMIXERLINEW* = PMIXERLINEW;

    MIXERLINE* = MIXERLINEA;

    PMIXERLINE* = PMIXERLINEA;

    LPMIXERLINE* = LPMIXERLINEA;

    tagMIXERCONTROLA_struct* = RECORD [ALIGN1]
      cbStruct* : DWORD;
      dwControlID* : DWORD;
      dwControlType* : DWORD;
      fdwControl* : DWORD;
      cMultipleItems* : DWORD;
      szShortName* : ARRAY 16 OF CHAR;
      szName* : ARRAY 64 OF CHAR;
      Bounds* : RECORD [UNION]
        noname0* : RECORD [ALIGN1]
          lMinimum* : LONG;
          lMaximum* : LONG
        END;
        noname1* : RECORD [ALIGN1]
          dwMinimum* : DWORD;
          dwMaximum* : DWORD
        END;
        dwReserved* : ARRAY 6 OF DWORD
      END;
      Metrics* : RECORD [UNION]
        cSteps* : DWORD;
        cbCustomData* : DWORD;
        dwReserved* : ARRAY 6 OF DWORD
      END
    END;

    MIXERCONTROLA* = tagMIXERCONTROLA_struct;

    PMIXERCONTROLA* = POINTER TO tagMIXERCONTROLA_struct;

    LPMIXERCONTROLA* = PMIXERCONTROLA;

    tagMIXERCONTROLW_struct* = RECORD [ALIGN1]
      cbStruct* : DWORD;
      dwControlID* : DWORD;
      dwControlType* : DWORD;
      fdwControl* : DWORD;
      cMultipleItems* : DWORD;
      szShortName* : ARRAY 16 OF WCHAR;
      szName* : ARRAY 64 OF WCHAR;
      Bounds* : RECORD [UNION]
        noname0* : RECORD [ALIGN1]
          lMinimum* : LONG;
          lMaximum* : LONG
        END;
        noname1* : RECORD [ALIGN1]
          dwMinimum* : DWORD;
          dwMaximum* : DWORD
        END;
        dwReserved* : ARRAY 6 OF DWORD
      END;
      Metrics* : RECORD [UNION]
        cSteps* : DWORD;
        cbCustomData* : DWORD;
        dwReserved* : ARRAY 6 OF DWORD
      END
    END;

    MIXERCONTROLW* = tagMIXERCONTROLW_struct;

    PMIXERCONTROLW* = POINTER TO tagMIXERCONTROLW_struct;

    LPMIXERCONTROLW* = PMIXERCONTROLW;

    MIXERCONTROL* = MIXERCONTROLA;

    PMIXERCONTROL* = PMIXERCONTROLA;

    LPMIXERCONTROL* = LPMIXERCONTROLA;

    tagMIXERLINECONTROLSA_struct* = RECORD [ALIGN1]
      cbStruct* : DWORD;
      dwLineID* : DWORD;
      noname0* : RECORD [UNION]
        dwControlID* : DWORD;
        dwControlType* : DWORD
      END;
      cControls* : DWORD;
      cbmxctrl* : DWORD;
      pamxctrl* : LPMIXERCONTROLA
    END;

    MIXERLINECONTROLSA* = tagMIXERLINECONTROLSA_struct;

    PMIXERLINECONTROLSA* = POINTER TO tagMIXERLINECONTROLSA_struct;

    LPMIXERLINECONTROLSA* = PMIXERLINECONTROLSA;

    tagMIXERLINECONTROLSW_struct* = RECORD [ALIGN1]
      cbStruct* : DWORD;
      dwLineID* : DWORD;
      noname0* : RECORD [UNION]
        dwControlID* : DWORD;
        dwControlType* : DWORD
      END;
      cControls* : DWORD;
      cbmxctrl* : DWORD;
      pamxctrl* : LPMIXERCONTROLW
    END;

    MIXERLINECONTROLSW* = tagMIXERLINECONTROLSW_struct;

    PMIXERLINECONTROLSW* = POINTER TO tagMIXERLINECONTROLSW_struct;

    LPMIXERLINECONTROLSW* = PMIXERLINECONTROLSW;

    MIXERLINECONTROLS* = MIXERLINECONTROLSA;

    PMIXERLINECONTROLS* = PMIXERLINECONTROLSA;

    LPMIXERLINECONTROLS* = LPMIXERLINECONTROLSA;

    tMIXERCONTROLDETAILS_struct* = RECORD [ALIGN1]
      cbStruct* : DWORD;
      dwControlID* : DWORD;
      cChannels* : DWORD;
      noname0* : RECORD [UNION]
        hwndOwner* : HWND;
        cMultipleItems* : DWORD
      END;
      cbDetails* : DWORD;
      paDetails* : LPVOID
    END;

    MIXERCONTROLDETAILS* = tMIXERCONTROLDETAILS_struct;

    PMIXERCONTROLDETAILS* = POINTER TO tMIXERCONTROLDETAILS_struct;

    LPMIXERCONTROLDETAILS* = PMIXERCONTROLDETAILS;

    tagMIXERCONTROLDETAILS_LISTTEXTA_struct* = RECORD [ALIGN1]
      dwParam1* : DWORD;
      dwParam2* : DWORD;
      szName* : ARRAY 64 OF CHAR
    END;

    MIXERCONTROLDETAILS_LISTTEXTA* = tagMIXERCONTROLDETAILS_LISTTEXTA_struct;

    PMIXERCONTROLDETAILS_LISTTEXTA* = POINTER TO tagMIXERCONTROLDETAILS_LISTTEXTA_struct;

    LPMIXERCONTROLDETAILS_LISTTEXTA* = PMIXERCONTROLDETAILS_LISTTEXTA;

    tagMIXERCONTROLDETAILS_LISTTEXTW_struct* = RECORD [ALIGN1]
      dwParam1* : DWORD;
      dwParam2* : DWORD;
      szName* : ARRAY 64 OF WCHAR
    END;

    MIXERCONTROLDETAILS_LISTTEXTW* = tagMIXERCONTROLDETAILS_LISTTEXTW_struct;

    PMIXERCONTROLDETAILS_LISTTEXTW* = POINTER TO tagMIXERCONTROLDETAILS_LISTTEXTW_struct;

    LPMIXERCONTROLDETAILS_LISTTEXTW* = PMIXERCONTROLDETAILS_LISTTEXTW;

    MIXERCONTROLDETAILS_LISTTEXT* = MIXERCONTROLDETAILS_LISTTEXTA;

    PMIXERCONTROLDETAILS_LISTTEXT* = PMIXERCONTROLDETAILS_LISTTEXTA;

    LPMIXERCONTROLDETAILS_LISTTEXT* = LPMIXERCONTROLDETAILS_LISTTEXTA;

    tMIXERCONTROLDETAILS_BOOLEAN_struct* = RECORD [ALIGN1]
      fValue* : LONG
    END;

    MIXERCONTROLDETAILS_BOOLEAN* = tMIXERCONTROLDETAILS_BOOLEAN_struct;

    PMIXERCONTROLDETAILS_BOOLEAN* = POINTER TO tMIXERCONTROLDETAILS_BOOLEAN_struct;

    LPMIXERCONTROLDETAILS_BOOLEAN* = PMIXERCONTROLDETAILS_BOOLEAN;

    tMIXERCONTROLDETAILS_SIGNED_struct* = RECORD [ALIGN1]
      lValue* : LONG
    END;

    MIXERCONTROLDETAILS_SIGNED* = tMIXERCONTROLDETAILS_SIGNED_struct;

    PMIXERCONTROLDETAILS_SIGNED* = POINTER TO tMIXERCONTROLDETAILS_SIGNED_struct;

    LPMIXERCONTROLDETAILS_SIGNED* = PMIXERCONTROLDETAILS_SIGNED;

    tMIXERCONTROLDETAILS_UNSIGNED_struct* = RECORD [ALIGN1]
      dwValue* : DWORD
    END;

    MIXERCONTROLDETAILS_UNSIGNED* = tMIXERCONTROLDETAILS_UNSIGNED_struct;

    PMIXERCONTROLDETAILS_UNSIGNED* = POINTER TO tMIXERCONTROLDETAILS_UNSIGNED_struct;

    LPMIXERCONTROLDETAILS_UNSIGNED* = PMIXERCONTROLDETAILS_UNSIGNED;

    LPTIMECALLBACK* = PROCEDURE (uTimerID : UINT; uMsg : UINT; dwUser : DWORD; dw1 : DWORD; dw2 : DWORD);

    timecaps_tag_struct* = RECORD [ALIGN1]
      wPeriodMin* : UINT;
      wPeriodMax* : UINT
    END;

    TIMECAPS* = timecaps_tag_struct;

    PTIMECAPS* = POINTER TO timecaps_tag_struct;

    NPTIMECAPS* = PTIMECAPS;

    LPTIMECAPS* = PTIMECAPS;

    tagJOYCAPSA_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      szPname* : ARRAY 32 OF CHAR;
      wXmin* : UINT;
      wXmax* : UINT;
      wYmin* : UINT;
      wYmax* : UINT;
      wZmin* : UINT;
      wZmax* : UINT;
      wNumButtons* : UINT;
      wPeriodMin* : UINT;
      wPeriodMax* : UINT;
      wRmin* : UINT;
      wRmax* : UINT;
      wUmin* : UINT;
      wUmax* : UINT;
      wVmin* : UINT;
      wVmax* : UINT;
      wCaps* : UINT;
      wMaxAxes* : UINT;
      wNumAxes* : UINT;
      wMaxButtons* : UINT;
      szRegKey* : ARRAY 32 OF CHAR;
      szOEMVxD* : ARRAY 260 OF CHAR
    END;

    JOYCAPSA* = tagJOYCAPSA_struct;

    PJOYCAPSA* = POINTER TO tagJOYCAPSA_struct;

    NPJOYCAPSA* = PJOYCAPSA;

    LPJOYCAPSA* = PJOYCAPSA;

    tagJOYCAPSW_struct* = RECORD [ALIGN1]
      wMid* : WORD;
      wPid* : WORD;
      szPname* : ARRAY 32 OF WCHAR;
      wXmin* : UINT;
      wXmax* : UINT;
      wYmin* : UINT;
      wYmax* : UINT;
      wZmin* : UINT;
      wZmax* : UINT;
      wNumButtons* : UINT;
      wPeriodMin* : UINT;
      wPeriodMax* : UINT;
      wRmin* : UINT;
      wRmax* : UINT;
      wUmin* : UINT;
      wUmax* : UINT;
      wVmin* : UINT;
      wVmax* : UINT;
      wCaps* : UINT;
      wMaxAxes* : UINT;
      wNumAxes* : UINT;
      wMaxButtons* : UINT;
      szRegKey* : ARRAY 32 OF WCHAR;
      szOEMVxD* : ARRAY 260 OF WCHAR
    END;

    JOYCAPSW* = tagJOYCAPSW_struct;

    PJOYCAPSW* = POINTER TO tagJOYCAPSW_struct;

    NPJOYCAPSW* = PJOYCAPSW;

    LPJOYCAPSW* = PJOYCAPSW;

    JOYCAPS* = JOYCAPSA;

    PJOYCAPS* = PJOYCAPSA;

    NPJOYCAPS* = NPJOYCAPSA;

    LPJOYCAPS* = LPJOYCAPSA;

    joyinfo_tag_struct* = RECORD [ALIGN1]
      wXpos* : UINT;
      wYpos* : UINT;
      wZpos* : UINT;
      wButtons* : UINT
    END;

    JOYINFO* = joyinfo_tag_struct;

    PJOYINFO* = POINTER TO joyinfo_tag_struct;

    NPJOYINFO* = PJOYINFO;

    LPJOYINFO* = PJOYINFO;

    joyinfoex_tag_struct* = RECORD [ALIGN1]
      dwSize* : DWORD;
      dwFlags* : DWORD;
      dwXpos* : DWORD;
      dwYpos* : DWORD;
      dwZpos* : DWORD;
      dwRpos* : DWORD;
      dwUpos* : DWORD;
      dwVpos* : DWORD;
      dwButtons* : DWORD;
      dwButtonNumber* : DWORD;
      dwPOV* : DWORD;
      dwReserved1* : DWORD;
      dwReserved2* : DWORD
    END;

    JOYINFOEX* = joyinfoex_tag_struct;

    PJOYINFOEX* = POINTER TO joyinfoex_tag_struct;

    NPJOYINFOEX* = PJOYINFOEX;

    LPJOYINFOEX* = PJOYINFOEX;

    FOURCC* = DWORD;

    HPSTR* = va_list;

    HMMIO* = HANDLE;

    LPMMIOPROC* = PROCEDURE (lpmmioinfo : LPSTR; uMsg : UINT; lParam1 : LPARAM; lParam2 : LPARAM) : LRESULT;

    _MMIOINFO_struct* = RECORD [ALIGN1]
      dwFlags* : DWORD;
      fccIOProc* : FOURCC;
      pIOProc* : LPMMIOPROC;
      wErrorRet* : UINT;
      htask* : HTASK;
      cchBuffer* : LONG;
      pchBuffer* : HPSTR;
      pchNext* : HPSTR;
      pchEndRead* : HPSTR;
      pchEndWrite* : HPSTR;
      lBufOffset* : LONG;
      lDiskOffset* : LONG;
      adwInfo* : ARRAY 3 OF DWORD;
      dwReserved1* : DWORD;
      dwReserved2* : DWORD;
      hmmio* : HMMIO
    END;

    MMIOINFO* = _MMIOINFO_struct;

    PMMIOINFO* = POINTER TO _MMIOINFO_struct;

    NPMMIOINFO* = PMMIOINFO;

    LPMMIOINFO* = PMMIOINFO;

    LPCMMIOINFO* = POINTER TO MMIOINFO;

    _MMCKINFO_struct* = RECORD [ALIGN1]
      ckid* : FOURCC;
      cksize* : DWORD;
      fccType* : FOURCC;
      dwDataOffset* : DWORD;
      dwFlags* : DWORD
    END;

    MMCKINFO* = _MMCKINFO_struct;

    PMMCKINFO* = POINTER TO _MMCKINFO_struct;

    NPMMCKINFO* = PMMCKINFO;

    LPMMCKINFO* = PMMCKINFO;

    LPCMMCKINFO* = POINTER TO MMCKINFO;

    MCIERROR* = DWORD;

    MCIDEVICEID* = UINT;

    YIELDPROC* = PROCEDURE (mciId : MCIDEVICEID; dwYieldData : DWORD) : UINT;

    tagMCI_GENERIC_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD
    END;

    MCI_GENERIC_PARMS* = tagMCI_GENERIC_PARMS_struct;

    PMCI_GENERIC_PARMS* = POINTER TO tagMCI_GENERIC_PARMS_struct;

    LPMCI_GENERIC_PARMS* = PMCI_GENERIC_PARMS;

    tagMCI_OPEN_PARMSA_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      wDeviceID* : MCIDEVICEID;
      lpstrDeviceType* : LPCSTR;
      lpstrElementName* : LPCSTR;
      lpstrAlias* : LPCSTR
    END;

    MCI_OPEN_PARMSA* = tagMCI_OPEN_PARMSA_struct;

    PMCI_OPEN_PARMSA* = POINTER TO tagMCI_OPEN_PARMSA_struct;

    LPMCI_OPEN_PARMSA* = PMCI_OPEN_PARMSA;

    tagMCI_OPEN_PARMSW_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      wDeviceID* : MCIDEVICEID;
      lpstrDeviceType* : LPCWSTR;
      lpstrElementName* : LPCWSTR;
      lpstrAlias* : LPCWSTR
    END;

    MCI_OPEN_PARMSW* = tagMCI_OPEN_PARMSW_struct;

    PMCI_OPEN_PARMSW* = POINTER TO tagMCI_OPEN_PARMSW_struct;

    LPMCI_OPEN_PARMSW* = PMCI_OPEN_PARMSW;

    MCI_OPEN_PARMS* = MCI_OPEN_PARMSA;

    PMCI_OPEN_PARMS* = PMCI_OPEN_PARMSA;

    LPMCI_OPEN_PARMS* = LPMCI_OPEN_PARMSA;

    tagMCI_PLAY_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      dwFrom* : DWORD;
      dwTo* : DWORD
    END;

    MCI_PLAY_PARMS* = tagMCI_PLAY_PARMS_struct;

    PMCI_PLAY_PARMS* = POINTER TO tagMCI_PLAY_PARMS_struct;

    LPMCI_PLAY_PARMS* = PMCI_PLAY_PARMS;

    tagMCI_SEEK_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      dwTo* : DWORD
    END;

    MCI_SEEK_PARMS* = tagMCI_SEEK_PARMS_struct;

    PMCI_SEEK_PARMS* = POINTER TO tagMCI_SEEK_PARMS_struct;

    LPMCI_SEEK_PARMS* = PMCI_SEEK_PARMS;

    tagMCI_STATUS_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      dwReturn* : DWORD;
      dwItem* : DWORD;
      dwTrack* : DWORD
    END;

    MCI_STATUS_PARMS* = tagMCI_STATUS_PARMS_struct;

    PMCI_STATUS_PARMS* = POINTER TO tagMCI_STATUS_PARMS_struct;

    LPMCI_STATUS_PARMS* = PMCI_STATUS_PARMS;

    tagMCI_INFO_PARMSA_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpstrReturn* : LPSTR;
      dwRetSize* : DWORD
    END;

    MCI_INFO_PARMSA* = tagMCI_INFO_PARMSA_struct;

    LPMCI_INFO_PARMSA* = POINTER TO tagMCI_INFO_PARMSA_struct;

    tagMCI_INFO_PARMSW_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpstrReturn* : LPWSTR;
      dwRetSize* : DWORD
    END;

    MCI_INFO_PARMSW* = tagMCI_INFO_PARMSW_struct;

    LPMCI_INFO_PARMSW* = POINTER TO tagMCI_INFO_PARMSW_struct;

    MCI_INFO_PARMS* = MCI_INFO_PARMSA;

    LPMCI_INFO_PARMS* = LPMCI_INFO_PARMSA;

    tagMCI_GETDEVCAPS_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      dwReturn* : DWORD;
      dwItem* : DWORD
    END;

    MCI_GETDEVCAPS_PARMS* = tagMCI_GETDEVCAPS_PARMS_struct;

    PMCI_GETDEVCAPS_PARMS* = POINTER TO tagMCI_GETDEVCAPS_PARMS_struct;

    LPMCI_GETDEVCAPS_PARMS* = PMCI_GETDEVCAPS_PARMS;

    tagMCI_SYSINFO_PARMSA_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpstrReturn* : LPSTR;
      dwRetSize* : DWORD;
      dwNumber* : DWORD;
      wDeviceType* : UINT
    END;

    MCI_SYSINFO_PARMSA* = tagMCI_SYSINFO_PARMSA_struct;

    PMCI_SYSINFO_PARMSA* = POINTER TO tagMCI_SYSINFO_PARMSA_struct;

    LPMCI_SYSINFO_PARMSA* = PMCI_SYSINFO_PARMSA;

    tagMCI_SYSINFO_PARMSW_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpstrReturn* : LPWSTR;
      dwRetSize* : DWORD;
      dwNumber* : DWORD;
      wDeviceType* : UINT
    END;

    MCI_SYSINFO_PARMSW* = tagMCI_SYSINFO_PARMSW_struct;

    PMCI_SYSINFO_PARMSW* = POINTER TO tagMCI_SYSINFO_PARMSW_struct;

    LPMCI_SYSINFO_PARMSW* = PMCI_SYSINFO_PARMSW;

    MCI_SYSINFO_PARMS* = MCI_SYSINFO_PARMSA;

    PMCI_SYSINFO_PARMS* = PMCI_SYSINFO_PARMSA;

    LPMCI_SYSINFO_PARMS* = LPMCI_SYSINFO_PARMSA;

    tagMCI_SET_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      dwTimeFormat* : DWORD;
      dwAudio* : DWORD
    END;

    MCI_SET_PARMS* = tagMCI_SET_PARMS_struct;

    PMCI_SET_PARMS* = POINTER TO tagMCI_SET_PARMS_struct;

    LPMCI_SET_PARMS* = PMCI_SET_PARMS;

    tagMCI_BREAK_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      nVirtKey* : LONGINT;
      hwndBreak* : HWND
    END;

    MCI_BREAK_PARMS* = tagMCI_BREAK_PARMS_struct;

    PMCI_BREAK_PARMS* = POINTER TO tagMCI_BREAK_PARMS_struct;

    LPMCI_BREAK_PARMS* = PMCI_BREAK_PARMS;

    tagMCI_SAVE_PARMSA_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpfilename* : LPCSTR
    END;

    MCI_SAVE_PARMSA* = tagMCI_SAVE_PARMSA_struct;

    PMCI_SAVE_PARMSA* = POINTER TO tagMCI_SAVE_PARMSA_struct;

    LPMCI_SAVE_PARMSA* = PMCI_SAVE_PARMSA;

    tagMCI_SAVE_PARMSW_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpfilename* : LPCWSTR
    END;

    MCI_SAVE_PARMSW* = tagMCI_SAVE_PARMSW_struct;

    PMCI_SAVE_PARMSW* = POINTER TO tagMCI_SAVE_PARMSW_struct;

    LPMCI_SAVE_PARMSW* = PMCI_SAVE_PARMSW;

    MCI_SAVE_PARMS* = MCI_SAVE_PARMSA;

    PMCI_SAVE_PARMS* = PMCI_SAVE_PARMSA;

    LPMCI_SAVE_PARMS* = LPMCI_SAVE_PARMSA;

    tagMCI_LOAD_PARMSA_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpfilename* : LPCSTR
    END;

    MCI_LOAD_PARMSA* = tagMCI_LOAD_PARMSA_struct;

    PMCI_LOAD_PARMSA* = POINTER TO tagMCI_LOAD_PARMSA_struct;

    LPMCI_LOAD_PARMSA* = PMCI_LOAD_PARMSA;

    tagMCI_LOAD_PARMSW_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpfilename* : LPCWSTR
    END;

    MCI_LOAD_PARMSW* = tagMCI_LOAD_PARMSW_struct;

    PMCI_LOAD_PARMSW* = POINTER TO tagMCI_LOAD_PARMSW_struct;

    LPMCI_LOAD_PARMSW* = PMCI_LOAD_PARMSW;

    MCI_LOAD_PARMS* = MCI_LOAD_PARMSA;

    PMCI_LOAD_PARMS* = PMCI_LOAD_PARMSA;

    LPMCI_LOAD_PARMS* = LPMCI_LOAD_PARMSA;

    tagMCI_RECORD_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      dwFrom* : DWORD;
      dwTo* : DWORD
    END;

    MCI_RECORD_PARMS* = tagMCI_RECORD_PARMS_struct;

    LPMCI_RECORD_PARMS* = POINTER TO tagMCI_RECORD_PARMS_struct;

    tagMCI_VD_PLAY_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      dwFrom* : DWORD;
      dwTo* : DWORD;
      dwSpeed* : DWORD
    END;

    MCI_VD_PLAY_PARMS* = tagMCI_VD_PLAY_PARMS_struct;

    PMCI_VD_PLAY_PARMS* = POINTER TO tagMCI_VD_PLAY_PARMS_struct;

    LPMCI_VD_PLAY_PARMS* = PMCI_VD_PLAY_PARMS;

    tagMCI_VD_STEP_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      dwFrames* : DWORD
    END;

    MCI_VD_STEP_PARMS* = tagMCI_VD_STEP_PARMS_struct;

    PMCI_VD_STEP_PARMS* = POINTER TO tagMCI_VD_STEP_PARMS_struct;

    LPMCI_VD_STEP_PARMS* = PMCI_VD_STEP_PARMS;

    tagMCI_VD_ESCAPE_PARMSA_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpstrCommand* : LPCSTR
    END;

    MCI_VD_ESCAPE_PARMSA* = tagMCI_VD_ESCAPE_PARMSA_struct;

    PMCI_VD_ESCAPE_PARMSA* = POINTER TO tagMCI_VD_ESCAPE_PARMSA_struct;

    LPMCI_VD_ESCAPE_PARMSA* = PMCI_VD_ESCAPE_PARMSA;

    tagMCI_VD_ESCAPE_PARMSW_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpstrCommand* : LPCWSTR
    END;

    MCI_VD_ESCAPE_PARMSW* = tagMCI_VD_ESCAPE_PARMSW_struct;

    PMCI_VD_ESCAPE_PARMSW* = POINTER TO tagMCI_VD_ESCAPE_PARMSW_struct;

    LPMCI_VD_ESCAPE_PARMSW* = PMCI_VD_ESCAPE_PARMSW;

    MCI_VD_ESCAPE_PARMS* = MCI_VD_ESCAPE_PARMSA;

    PMCI_VD_ESCAPE_PARMS* = PMCI_VD_ESCAPE_PARMSA;

    LPMCI_VD_ESCAPE_PARMS* = LPMCI_VD_ESCAPE_PARMSA;

    tagMCI_WAVE_OPEN_PARMSA_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      wDeviceID* : MCIDEVICEID;
      lpstrDeviceType* : LPCSTR;
      lpstrElementName* : LPCSTR;
      lpstrAlias* : LPCSTR;
      dwBufferSeconds* : DWORD
    END;

    MCI_WAVE_OPEN_PARMSA* = tagMCI_WAVE_OPEN_PARMSA_struct;

    PMCI_WAVE_OPEN_PARMSA* = POINTER TO tagMCI_WAVE_OPEN_PARMSA_struct;

    LPMCI_WAVE_OPEN_PARMSA* = PMCI_WAVE_OPEN_PARMSA;

    tagMCI_WAVE_OPEN_PARMSW_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      wDeviceID* : MCIDEVICEID;
      lpstrDeviceType* : LPCWSTR;
      lpstrElementName* : LPCWSTR;
      lpstrAlias* : LPCWSTR;
      dwBufferSeconds* : DWORD
    END;

    MCI_WAVE_OPEN_PARMSW* = tagMCI_WAVE_OPEN_PARMSW_struct;

    PMCI_WAVE_OPEN_PARMSW* = POINTER TO tagMCI_WAVE_OPEN_PARMSW_struct;

    LPMCI_WAVE_OPEN_PARMSW* = PMCI_WAVE_OPEN_PARMSW;

    MCI_WAVE_OPEN_PARMS* = MCI_WAVE_OPEN_PARMSA;

    PMCI_WAVE_OPEN_PARMS* = PMCI_WAVE_OPEN_PARMSA;

    LPMCI_WAVE_OPEN_PARMS* = LPMCI_WAVE_OPEN_PARMSA;

    tagMCI_WAVE_DELETE_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      dwFrom* : DWORD;
      dwTo* : DWORD
    END;

    MCI_WAVE_DELETE_PARMS* = tagMCI_WAVE_DELETE_PARMS_struct;

    PMCI_WAVE_DELETE_PARMS* = POINTER TO tagMCI_WAVE_DELETE_PARMS_struct;

    LPMCI_WAVE_DELETE_PARMS* = PMCI_WAVE_DELETE_PARMS;

    tagMCI_WAVE_SET_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      dwTimeFormat* : DWORD;
      dwAudio* : DWORD;
      wInput* : UINT;
      wOutput* : UINT;
      wFormatTag* : WORD;
      wReserved2* : WORD;
      nChannels* : WORD;
      wReserved3* : WORD;
      nSamplesPerSec* : DWORD;
      nAvgBytesPerSec* : DWORD;
      nBlockAlign* : WORD;
      wReserved4* : WORD;
      wBitsPerSample* : WORD;
      wReserved5* : WORD
    END;

    MCI_WAVE_SET_PARMS* = tagMCI_WAVE_SET_PARMS_struct;

    PMCI_WAVE_SET_PARMS* = POINTER TO tagMCI_WAVE_SET_PARMS_struct;

    LPMCI_WAVE_SET_PARMS* = PMCI_WAVE_SET_PARMS;

    tagMCI_SEQ_SET_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      dwTimeFormat* : DWORD;
      dwAudio* : DWORD;
      dwTempo* : DWORD;
      dwPort* : DWORD;
      dwSlave* : DWORD;
      dwMaster* : DWORD;
      dwOffset* : DWORD
    END;

    MCI_SEQ_SET_PARMS* = tagMCI_SEQ_SET_PARMS_struct;

    PMCI_SEQ_SET_PARMS* = POINTER TO tagMCI_SEQ_SET_PARMS_struct;

    LPMCI_SEQ_SET_PARMS* = PMCI_SEQ_SET_PARMS;

    tagMCI_ANIM_OPEN_PARMSA_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      wDeviceID* : MCIDEVICEID;
      lpstrDeviceType* : LPCSTR;
      lpstrElementName* : LPCSTR;
      lpstrAlias* : LPCSTR;
      dwStyle* : DWORD;
      hWndParent* : HWND
    END;

    MCI_ANIM_OPEN_PARMSA* = tagMCI_ANIM_OPEN_PARMSA_struct;

    PMCI_ANIM_OPEN_PARMSA* = POINTER TO tagMCI_ANIM_OPEN_PARMSA_struct;

    LPMCI_ANIM_OPEN_PARMSA* = PMCI_ANIM_OPEN_PARMSA;

    tagMCI_ANIM_OPEN_PARMSW_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      wDeviceID* : MCIDEVICEID;
      lpstrDeviceType* : LPCWSTR;
      lpstrElementName* : LPCWSTR;
      lpstrAlias* : LPCWSTR;
      dwStyle* : DWORD;
      hWndParent* : HWND
    END;

    MCI_ANIM_OPEN_PARMSW* = tagMCI_ANIM_OPEN_PARMSW_struct;

    PMCI_ANIM_OPEN_PARMSW* = POINTER TO tagMCI_ANIM_OPEN_PARMSW_struct;

    LPMCI_ANIM_OPEN_PARMSW* = PMCI_ANIM_OPEN_PARMSW;

    MCI_ANIM_OPEN_PARMS* = MCI_ANIM_OPEN_PARMSA;

    PMCI_ANIM_OPEN_PARMS* = PMCI_ANIM_OPEN_PARMSA;

    LPMCI_ANIM_OPEN_PARMS* = LPMCI_ANIM_OPEN_PARMSA;

    tagMCI_ANIM_PLAY_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      dwFrom* : DWORD;
      dwTo* : DWORD;
      dwSpeed* : DWORD
    END;

    MCI_ANIM_PLAY_PARMS* = tagMCI_ANIM_PLAY_PARMS_struct;

    PMCI_ANIM_PLAY_PARMS* = POINTER TO tagMCI_ANIM_PLAY_PARMS_struct;

    LPMCI_ANIM_PLAY_PARMS* = PMCI_ANIM_PLAY_PARMS;

    tagMCI_ANIM_STEP_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      dwFrames* : DWORD
    END;

    MCI_ANIM_STEP_PARMS* = tagMCI_ANIM_STEP_PARMS_struct;

    PMCI_ANIM_STEP_PARMS* = POINTER TO tagMCI_ANIM_STEP_PARMS_struct;

    LPMCI_ANIM_STEP_PARMS* = PMCI_ANIM_STEP_PARMS;

    tagMCI_ANIM_WINDOW_PARMSA_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      hWnd* : HWND;
      nCmdShow* : UINT;
      lpstrText* : LPCSTR
    END;

    MCI_ANIM_WINDOW_PARMSA* = tagMCI_ANIM_WINDOW_PARMSA_struct;

    PMCI_ANIM_WINDOW_PARMSA* = POINTER TO tagMCI_ANIM_WINDOW_PARMSA_struct;

    LPMCI_ANIM_WINDOW_PARMSA* = PMCI_ANIM_WINDOW_PARMSA;

    tagMCI_ANIM_WINDOW_PARMSW_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      hWnd* : HWND;
      nCmdShow* : UINT;
      lpstrText* : LPCWSTR
    END;

    MCI_ANIM_WINDOW_PARMSW* = tagMCI_ANIM_WINDOW_PARMSW_struct;

    PMCI_ANIM_WINDOW_PARMSW* = POINTER TO tagMCI_ANIM_WINDOW_PARMSW_struct;

    LPMCI_ANIM_WINDOW_PARMSW* = PMCI_ANIM_WINDOW_PARMSW;

    MCI_ANIM_WINDOW_PARMS* = MCI_ANIM_WINDOW_PARMSA;

    PMCI_ANIM_WINDOW_PARMS* = PMCI_ANIM_WINDOW_PARMSA;

    LPMCI_ANIM_WINDOW_PARMS* = LPMCI_ANIM_WINDOW_PARMSA;

    tagMCI_ANIM_RECT_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      rc* : RECT
    END;

    MCI_ANIM_RECT_PARMS* = tagMCI_ANIM_RECT_PARMS_struct;

    PMCI_ANIM_RECT_PARMS* = POINTER TO MCI_ANIM_RECT_PARMS;

    LPMCI_ANIM_RECT_PARMS* = PMCI_ANIM_RECT_PARMS;

    tagMCI_ANIM_UPDATE_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      rc* : RECT;
      hDC* : HDC
    END;

    MCI_ANIM_UPDATE_PARMS* = tagMCI_ANIM_UPDATE_PARMS_struct;

    PMCI_ANIM_UPDATE_PARMS* = POINTER TO tagMCI_ANIM_UPDATE_PARMS_struct;

    LPMCI_ANIM_UPDATE_PARMS* = PMCI_ANIM_UPDATE_PARMS;

    tagMCI_OVLY_OPEN_PARMSA_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      wDeviceID* : MCIDEVICEID;
      lpstrDeviceType* : LPCSTR;
      lpstrElementName* : LPCSTR;
      lpstrAlias* : LPCSTR;
      dwStyle* : DWORD;
      hWndParent* : HWND
    END;

    MCI_OVLY_OPEN_PARMSA* = tagMCI_OVLY_OPEN_PARMSA_struct;

    PMCI_OVLY_OPEN_PARMSA* = POINTER TO tagMCI_OVLY_OPEN_PARMSA_struct;

    LPMCI_OVLY_OPEN_PARMSA* = PMCI_OVLY_OPEN_PARMSA;

    tagMCI_OVLY_OPEN_PARMSW_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      wDeviceID* : MCIDEVICEID;
      lpstrDeviceType* : LPCWSTR;
      lpstrElementName* : LPCWSTR;
      lpstrAlias* : LPCWSTR;
      dwStyle* : DWORD;
      hWndParent* : HWND
    END;

    MCI_OVLY_OPEN_PARMSW* = tagMCI_OVLY_OPEN_PARMSW_struct;

    PMCI_OVLY_OPEN_PARMSW* = POINTER TO tagMCI_OVLY_OPEN_PARMSW_struct;

    LPMCI_OVLY_OPEN_PARMSW* = PMCI_OVLY_OPEN_PARMSW;

    MCI_OVLY_OPEN_PARMS* = MCI_OVLY_OPEN_PARMSA;

    PMCI_OVLY_OPEN_PARMS* = PMCI_OVLY_OPEN_PARMSA;

    LPMCI_OVLY_OPEN_PARMS* = LPMCI_OVLY_OPEN_PARMSA;

    tagMCI_OVLY_WINDOW_PARMSA_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      hWnd* : HWND;
      nCmdShow* : UINT;
      lpstrText* : LPCSTR
    END;

    MCI_OVLY_WINDOW_PARMSA* = tagMCI_OVLY_WINDOW_PARMSA_struct;

    PMCI_OVLY_WINDOW_PARMSA* = POINTER TO tagMCI_OVLY_WINDOW_PARMSA_struct;

    LPMCI_OVLY_WINDOW_PARMSA* = PMCI_OVLY_WINDOW_PARMSA;

    tagMCI_OVLY_WINDOW_PARMSW_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      hWnd* : HWND;
      nCmdShow* : UINT;
      lpstrText* : LPCWSTR
    END;

    MCI_OVLY_WINDOW_PARMSW* = tagMCI_OVLY_WINDOW_PARMSW_struct;

    PMCI_OVLY_WINDOW_PARMSW* = POINTER TO tagMCI_OVLY_WINDOW_PARMSW_struct;

    LPMCI_OVLY_WINDOW_PARMSW* = PMCI_OVLY_WINDOW_PARMSW;

    MCI_OVLY_WINDOW_PARMS* = MCI_OVLY_WINDOW_PARMSA;

    PMCI_OVLY_WINDOW_PARMS* = PMCI_OVLY_WINDOW_PARMSA;

    LPMCI_OVLY_WINDOW_PARMS* = LPMCI_OVLY_WINDOW_PARMSA;

    tagMCI_OVLY_RECT_PARMS_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      rc* : RECT
    END;

    MCI_OVLY_RECT_PARMS* = tagMCI_OVLY_RECT_PARMS_struct;

    PMCI_OVLY_RECT_PARMS* = POINTER TO tagMCI_OVLY_RECT_PARMS_struct;

    LPMCI_OVLY_RECT_PARMS* = PMCI_OVLY_RECT_PARMS;

    tagMCI_OVLY_SAVE_PARMSA_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpfilename* : LPCSTR;
      rc* : RECT
    END;

    MCI_OVLY_SAVE_PARMSA* = tagMCI_OVLY_SAVE_PARMSA_struct;

    PMCI_OVLY_SAVE_PARMSA* = POINTER TO tagMCI_OVLY_SAVE_PARMSA_struct;

    LPMCI_OVLY_SAVE_PARMSA* = PMCI_OVLY_SAVE_PARMSA;

    tagMCI_OVLY_SAVE_PARMSW_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpfilename* : LPCWSTR;
      rc* : RECT
    END;

    MCI_OVLY_SAVE_PARMSW* = tagMCI_OVLY_SAVE_PARMSW_struct;

    PMCI_OVLY_SAVE_PARMSW* = POINTER TO tagMCI_OVLY_SAVE_PARMSW_struct;

    LPMCI_OVLY_SAVE_PARMSW* = PMCI_OVLY_SAVE_PARMSW;

    MCI_OVLY_SAVE_PARMS* = MCI_OVLY_SAVE_PARMSA;

    PMCI_OVLY_SAVE_PARMS* = PMCI_OVLY_SAVE_PARMSA;

    LPMCI_OVLY_SAVE_PARMS* = LPMCI_OVLY_SAVE_PARMSA;

    tagMCI_OVLY_LOAD_PARMSA_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpfilename* : LPCSTR;
      rc* : RECT
    END;

    MCI_OVLY_LOAD_PARMSA* = tagMCI_OVLY_LOAD_PARMSA_struct;

    PMCI_OVLY_LOAD_PARMSA* = POINTER TO tagMCI_OVLY_LOAD_PARMSA_struct;

    LPMCI_OVLY_LOAD_PARMSA* = PMCI_OVLY_LOAD_PARMSA;

    tagMCI_OVLY_LOAD_PARMSW_struct* = RECORD [ALIGN1]
      dwCallback* : DWORD;
      lpfilename* : LPCWSTR;
      rc* : RECT
    END;

    MCI_OVLY_LOAD_PARMSW* = tagMCI_OVLY_LOAD_PARMSW_struct;

    PMCI_OVLY_LOAD_PARMSW* = POINTER TO tagMCI_OVLY_LOAD_PARMSW_struct;

    LPMCI_OVLY_LOAD_PARMSW* = PMCI_OVLY_LOAD_PARMSW;

    MCI_OVLY_LOAD_PARMS* = MCI_OVLY_LOAD_PARMSA;

    PMCI_OVLY_LOAD_PARMS* = PMCI_OVLY_LOAD_PARMSA;

    LPMCI_OVLY_LOAD_PARMS* = LPMCI_OVLY_LOAD_PARMSA;

    AutoPtr__CONTEXT* = POINTER TO _CONTEXT_struct;

    AutoPtr__TEB* = POINTER TO _TEB_struct;

    AutoPtr_PVOID* = POINTER TO ARRAY OF PVOID;

    AutoPtr_LPOVERLAPPED* = POINTER TO ARRAY OF LPOVERLAPPED;

    AutoPtr_FILETIME* = POINTER TO FILETIME;

    AutoPtr_SYSTEMTIME* = POINTER TO SYSTEMTIME;

    AutoPtr_TIME_ZONE_INFORMATION* = POINTER TO TIME_ZONE_INFORMATION;

    AutoPtr_va_list* = POINTER TO ARRAY OF va_list;

    AutoPtr_LPRECOVERY_AGENT_INFORMATIONA* = POINTER TO ARRAY OF LPRECOVERY_AGENT_INFORMATIONA;

    AutoPtr_LPRECOVERY_AGENT_INFORMATIONW* = POINTER TO ARRAY OF LPRECOVERY_AGENT_INFORMATIONW;

    AutoPtr_LPVOID* = POINTER TO ARRAY OF LPVOID;

    AutoPtr_LPSTR* = POINTER TO ARRAY OF LPSTR;

    AutoPtr_LPCSTR* = POINTER TO ARRAY OF LPCSTR;

    AutoPtr_LPCWSTR* = POINTER TO ARRAY OF LPCWSTR;

    AutoPtr_PSID* = POINTER TO ARRAY OF PSID;

    AutoPtr_PACL* = POINTER TO ARRAY OF PACL;

    AutoPtr_PSECURITY_DESCRIPTOR* = POINTER TO ARRAY OF PSECURITY_DESCRIPTOR;

    AutoPtr_PALETTEENTRY* = POINTER TO PALETTEENTRY;

    AutoPtr_PIXELFORMATDESCRIPTOR* = POINTER TO PIXELFORMATDESCRIPTOR;

    AutoPtr_BITMAP* = POINTER TO BITMAP;

    AutoPtr_LOGBRUSH* = POINTER TO LOGBRUSH;

    AutoPtr_DEVMODEA* = POINTER TO DEVMODEA;

    AutoPtr_DEVMODEW* = POINTER TO DEVMODEW;

    AutoPtr_BITMAPINFOHEADER* = POINTER TO BITMAPINFOHEADER;

    AutoPtr_BITMAPINFO* = POINTER TO BITMAPINFO;

    AutoPtr_LOGFONTA* = POINTER TO LOGFONTA;

    AutoPtr_LOGFONTW* = POINTER TO LOGFONTW;

    AutoPtr_LOGPALETTE* = POINTER TO LOGPALETTE;

    AutoPtr_LOGPEN* = POINTER TO LOGPEN;

    AutoPtr_POINT* = POINTER TO POINT;

    AutoPtr_INT* = POINTER TO ARRAY OF INT;

    AutoPtr_XFORM* = POINTER TO XFORM;

    AutoPtr_RGNDATA* = POINTER TO RGNDATA;

    AutoPtr_MAT2* = POINTER TO MAT2;

    AutoPtr_METAFILEPICT* = POINTER TO METAFILEPICT;

    AutoPtr_COLORADJUSTMENT* = POINTER TO COLORADJUSTMENT;

    AutoPtr_DOCINFOA* = POINTER TO DOCINFOA;

    AutoPtr_DOCINFOW* = POINTER TO DOCINFOW;

    AutoPtr_POLYTEXTA* = POINTER TO POLYTEXTA;

    AutoPtr_POLYTEXTW* = POINTER TO POLYTEXTW;

    AutoPtr_COLORREF* = POINTER TO ARRAY OF COLORREF;

    AutoPtr_MSG* = POINTER TO MSG;

    AutoPtr_WNDCLASSA* = POINTER TO WNDCLASSA;

    AutoPtr_WNDCLASSW* = POINTER TO WNDCLASSW;

    AutoPtr_WNDCLASSEXA* = POINTER TO WNDCLASSEXA;

    AutoPtr_WNDCLASSEXW* = POINTER TO WNDCLASSEXW;

    AutoPtr_MENUTEMPLATEA* = LONGINT (* void pointer *);

    AutoPtr_MENUTEMPLATEW* = LONGINT (* void pointer *);

    AutoPtr_PAINTSTRUCT* = POINTER TO PAINTSTRUCT;

    AutoPtr_HWND* = POINTER TO ARRAY OF HWND;

    AutoPtr_NUMBERFMTA* = POINTER TO NUMBERFMTA;

    AutoPtr_NUMBERFMTW* = POINTER TO NUMBERFMTW;

    AutoPtr_CURRENCYFMTA* = POINTER TO CURRENCYFMTA;

    AutoPtr_CURRENCYFMTW* = POINTER TO CURRENCYFMTW;

    AutoPtr_INPUT_RECORD* = POINTER TO INPUT_RECORD;

    AutoPtr_CHAR_INFO* = POINTER TO CHAR_INFO;

    AutoPtr_CONSOLE_CURSOR_INFO* = POINTER TO CONSOLE_CURSOR_INFO;

    AutoPtr_SMALL_RECT* = POINTER TO SMALL_RECT;

    AutoPtr_SECURITY_ATTRIBUTES* = POINTER TO SECURITY_ATTRIBUTES;

    AutoPtr_SERVICE_TABLE_ENTRYA* = POINTER TO SERVICE_TABLE_ENTRYA;

    AutoPtr_SERVICE_TABLE_ENTRYW* = POINTER TO SERVICE_TABLE_ENTRYW;


    (* H2O: Defined structures / unions *)

    _TEB_struct* = RECORD [notag]
    END;

    _EXCEPTION_REGISTRATION_RECORD_struct* = RECORD [notag]
    END;


    (* H2O: Procedure prototypes *)

    PROCEDURE NtCurrentTeb* () : AutoPtr__TEB;
    PROCEDURE GetFiberData* () : PVOID;
    PROCEDURE GetCurrentFiber* () : PVOID;
    PROCEDURE RtlCompareMemory* (Source1 : LPVOID; Source2 : LPVOID; Length : SIZE_T) : SIZE_T;
    PROCEDURE InterlockedIncrement* (VAR [nil] lpAddend : LONGINT) : LONG;
    PROCEDURE InterlockedDecrement* (VAR [nil] lpAddend : LONGINT) : LONG;
    PROCEDURE InterlockedExchange* (VAR [nil] Target : LONGINT; Value : LONG) : LONG;
    PROCEDURE InterlockedExchangeAdd* (VAR [nil] Addend : LONGINT; Value : LONG) : LONG;
    PROCEDURE InterlockedCompareExchange* (VAR [nil] Destination : PVOID; Exchange : PVOID; Comperand : PVOID) : PVOID;
    PROCEDURE FreeResource* (hResData : HGLOBAL) : BOOL;
    PROCEDURE LockResource* (hResData : HGLOBAL) : LPVOID;
    PROCEDURE WinMain* (hInstance : HINSTANCE; hPrevInstance : HINSTANCE; lpCmdLine : LPSTR; nShowCmd : LONGINT) : LONGINT;
    PROCEDURE FreeLibrary* (hLibModule : HMODULE) : BOOL;
    PROCEDURE FreeLibraryAndExitThread* (hLibModule : HMODULE; dwExitCode : DWORD);
    PROCEDURE DisableThreadLibraryCalls* (hLibModule : HMODULE) : BOOL;
    PROCEDURE GetProcAddress* (hModule : HMODULE; lpProcName : LPCSTR) : FARPROC;
    PROCEDURE GetVersion* () : DWORD;
    PROCEDURE GlobalAlloc* (uFlags : UINT; dwBytes : DWORD) : HGLOBAL;
    PROCEDURE GlobalReAlloc* (hMem : HGLOBAL; dwBytes : DWORD; uFlags : UINT) : HGLOBAL;
    PROCEDURE GlobalSize* (hMem : HGLOBAL) : DWORD;
    PROCEDURE GlobalFlags* (hMem : HGLOBAL) : UINT;
    PROCEDURE GlobalLock* (hMem : HGLOBAL) : LPVOID;
    PROCEDURE GlobalHandle* (pMem : LPCVOID) : HGLOBAL;
    PROCEDURE GlobalUnlock* (hMem : HGLOBAL) : BOOL;
    PROCEDURE GlobalFree* (hMem : HGLOBAL) : HGLOBAL;
    PROCEDURE GlobalCompact* (dwMinFree : DWORD) : UINT;
    PROCEDURE GlobalFix* (hMem : HGLOBAL);
    PROCEDURE GlobalUnfix* (hMem : HGLOBAL);
    PROCEDURE GlobalWire* (hMem : HGLOBAL) : LPVOID;
    PROCEDURE GlobalUnWire* (hMem : HGLOBAL) : BOOL;
    PROCEDURE GlobalMemoryStatus* (VAR [nil] lpBuffer : _MEMORYSTATUS_struct);
    PROCEDURE LocalAlloc* (uFlags : UINT; uBytes : UINT) : HLOCAL;
    PROCEDURE LocalReAlloc* (hMem : HLOCAL; uBytes : UINT; uFlags : UINT) : HLOCAL;
    PROCEDURE LocalLock* (hMem : HLOCAL) : LPVOID;
    PROCEDURE LocalHandle* (pMem : LPCVOID) : HLOCAL;
    PROCEDURE LocalUnlock* (hMem : HLOCAL) : BOOL;
    PROCEDURE LocalSize* (hMem : HLOCAL) : UINT;
    PROCEDURE LocalFlags* (hMem : HLOCAL) : UINT;
    PROCEDURE LocalFree* (hMem : HLOCAL) : HLOCAL;
    PROCEDURE LocalShrink* (hMem : HLOCAL; cbNewSize : UINT) : UINT;
    PROCEDURE LocalCompact* (uMinFree : UINT) : UINT;
    PROCEDURE FlushInstructionCache* (hProcess : HANDLE; lpBaseAddress : LPCVOID; dwSize : DWORD) : BOOL;
    PROCEDURE VirtualAlloc* (lpAddress : LPVOID; dwSize : DWORD; flAllocationType : DWORD; flProtect : DWORD) : LPVOID;
    PROCEDURE VirtualFree* (lpAddress : LPVOID; dwSize : DWORD; dwFreeType : DWORD) : BOOL;
    PROCEDURE VirtualProtect* (lpAddress : LPVOID; dwSize : DWORD; flNewProtect : DWORD; VAR [nil] lpflOldProtect : DWORD) : BOOL;
    PROCEDURE VirtualQuery* (lpAddress : LPCVOID; VAR [nil] lpBuffer : _MEMORY_BASIC_INFORMATION_struct; dwLength : DWORD) : DWORD;
    PROCEDURE VirtualAllocEx* (hProcess : HANDLE; lpAddress : LPVOID; dwSize : DWORD; flAllocationType : DWORD; flProtect : DWORD) : LPVOID;
    PROCEDURE VirtualFreeEx* (hProcess : HANDLE; lpAddress : LPVOID; dwSize : DWORD; dwFreeType : DWORD) : BOOL;
    PROCEDURE VirtualProtectEx* (hProcess : HANDLE; lpAddress : LPVOID; dwSize : DWORD; flNewProtect : DWORD; VAR [nil] lpflOldProtect : DWORD) : BOOL;
    PROCEDURE VirtualQueryEx* (hProcess : HANDLE; lpAddress : LPCVOID; VAR [nil] lpBuffer : _MEMORY_BASIC_INFORMATION_struct; dwLength : DWORD) : DWORD;
    PROCEDURE HeapCreate* (flOptions : DWORD; dwInitialSize : DWORD; dwMaximumSize : DWORD) : HANDLE;
    PROCEDURE HeapDestroy* (hHeap : HANDLE) : BOOL;
    PROCEDURE HeapAlloc* (hHeap : HANDLE; dwFlags : DWORD; dwBytes : DWORD) : LPVOID;
    PROCEDURE HeapReAlloc* (hHeap : HANDLE; dwFlags : DWORD; lpMem : LPVOID; dwBytes : DWORD) : LPVOID;
    PROCEDURE HeapFree* (hHeap : HANDLE; dwFlags : DWORD; lpMem : LPVOID) : BOOL;
    PROCEDURE HeapSize* (hHeap : HANDLE; dwFlags : DWORD; lpMem : LPCVOID) : DWORD;
    PROCEDURE HeapValidate* (hHeap : HANDLE; dwFlags : DWORD; lpMem : LPCVOID) : BOOL;
    PROCEDURE HeapCompact* (hHeap : HANDLE; dwFlags : DWORD) : UINT;
    PROCEDURE GetProcessHeap* () : HANDLE;
    PROCEDURE GetProcessHeaps* (NumberOfHeaps : DWORD; VAR [nil] ProcessHeaps : HANDLE) : DWORD;
    PROCEDURE HeapLock* (hHeap : HANDLE) : BOOL;
    PROCEDURE HeapUnlock* (hHeap : HANDLE) : BOOL;
    PROCEDURE HeapWalk* (hHeap : HANDLE; VAR [nil] lpEntry : _PROCESS_HEAP_ENTRY_struct) : BOOL;
    PROCEDURE GetBinaryTypeA* (lpApplicationName : LPCSTR; VAR [nil] lpBinaryType : DWORD) : BOOL;
    PROCEDURE GetBinaryTypeW* (lpApplicationName : LPCWSTR; VAR [nil] lpBinaryType : DWORD) : BOOL;
    PROCEDURE GetShortPathNameA* (lpszLongPath : LPCSTR; lpszShortPath : LPSTR; cchBuffer : DWORD) : DWORD;
    PROCEDURE GetShortPathNameW* (lpszLongPath : LPCWSTR; lpszShortPath : LPWSTR; cchBuffer : DWORD) : DWORD;
    PROCEDURE GetLongPathNameA* (lpszShortPath : LPCSTR; lpszLongPath : LPSTR; cchBuffer : DWORD) : DWORD;
    PROCEDURE GetLongPathNameW* (lpszShortPath : LPCWSTR; lpszLongPath : LPWSTR; cchBuffer : DWORD) : DWORD;
    PROCEDURE GetProcessAffinityMask* (hProcess : HANDLE; VAR [nil] lpProcessAffinityMask : DWORD; VAR [nil] lpSystemAffinityMask : DWORD) : BOOL;
    PROCEDURE SetProcessAffinityMask* (hProcess : HANDLE; dwProcessAffinityMask : DWORD) : BOOL;
    PROCEDURE GetProcessTimes* (hProcess : HANDLE; VAR [nil] lpCreationTime : _FILETIME_struct; VAR [nil] lpExitTime : _FILETIME_struct; VAR [nil] lpKernelTime : _FILETIME_struct; VAR [nil] lpUserTime : _FILETIME_struct) : BOOL;
    PROCEDURE GetProcessWorkingSetSize* (hProcess : HANDLE; VAR [nil] lpMinimumWorkingSetSize : DWORD; VAR [nil] lpMaximumWorkingSetSize : DWORD) : BOOL;
    PROCEDURE SetProcessWorkingSetSize* (hProcess : HANDLE; dwMinimumWorkingSetSize : DWORD; dwMaximumWorkingSetSize : DWORD) : BOOL;
    PROCEDURE OpenProcess* (dwDesiredAccess : DWORD; bInheritHandle : BOOL; dwProcessId : DWORD) : HANDLE;
    PROCEDURE GetCurrentProcess* () : HANDLE;
    PROCEDURE GetCurrentProcessId* () : DWORD;
    PROCEDURE ExitProcess* (uExitCode : UINT);
    PROCEDURE TerminateProcess* (hProcess : HANDLE; uExitCode : UINT) : BOOL;
    PROCEDURE GetExitCodeProcess* (hProcess : HANDLE; VAR [nil] lpExitCode : DWORD) : BOOL;
    PROCEDURE FatalExit* (ExitCode : LONGINT);
    PROCEDURE GetEnvironmentStrings* () : LPSTR;
    PROCEDURE GetEnvironmentStringsW* () : LPWSTR;
    PROCEDURE FreeEnvironmentStringsA* (p0 : LPSTR) : BOOL;
    PROCEDURE FreeEnvironmentStringsW* (p0 : LPWSTR) : BOOL;
    PROCEDURE RaiseException* (dwExceptionCode : DWORD; dwExceptionFlags : DWORD; nNumberOfArguments : DWORD; VAR [nil] lpArguments : DWORD);
    PROCEDURE UnhandledExceptionFilter* (VAR [nil] ExceptionInfo : _EXCEPTION_POINTERS_struct) : LONG;
    PROCEDURE SetUnhandledExceptionFilter* (lpTopLevelExceptionFilter : LPTOP_LEVEL_EXCEPTION_FILTER) : LPTOP_LEVEL_EXCEPTION_FILTER;
    PROCEDURE CreateFiber* (dwStackSize : DWORD; lpStartAddress : LPFIBER_START_ROUTINE; lpParameter : LPVOID) : LPVOID;
    PROCEDURE DeleteFiber* (lpFiber : LPVOID);
    PROCEDURE ConvertThreadToFiber* (lpParameter : LPVOID) : LPVOID;
    PROCEDURE SwitchToFiber* (lpFiber : LPVOID);
    PROCEDURE SwitchToThread* () : BOOL;
    PROCEDURE CreateThread* (VAR [nil] lpThreadAttributes : _SECURITY_ATTRIBUTES_struct; dwStackSize : DWORD; lpStartAddress : LPTHREAD_START_ROUTINE; lpParameter : LPVOID; dwCreationFlags : DWORD; VAR [nil] lpThreadId : DWORD) : HANDLE;
    PROCEDURE CreateRemoteThread* (hProcess : HANDLE; VAR [nil] lpThreadAttributes : _SECURITY_ATTRIBUTES_struct; dwStackSize : DWORD; lpStartAddress : LPTHREAD_START_ROUTINE; lpParameter : LPVOID; dwCreationFlags : DWORD; VAR [nil] lpThreadId : DWORD) : HANDLE;
    PROCEDURE GetCurrentThread* () : HANDLE;
    PROCEDURE GetCurrentThreadId* () : DWORD;
    PROCEDURE SetThreadAffinityMask* (hThread : HANDLE; dwThreadAffinityMask : DWORD) : DWORD;
    PROCEDURE SetThreadIdealProcessor* (hThread : HANDLE; dwIdealProcessor : DWORD) : DWORD;
    PROCEDURE SetProcessPriorityBoost* (hProcess : HANDLE; bDisablePriorityBoost : BOOL) : BOOL;
    PROCEDURE GetProcessPriorityBoost* (hProcess : HANDLE; VAR [nil] pDisablePriorityBoost : BOOL) : BOOL;
    PROCEDURE RequestWakeupLatency* (latency : LATENCY_TIME) : BOOL;
    PROCEDURE SetThreadPriority* (hThread : HANDLE; nPriority : LONGINT) : BOOL;
    PROCEDURE SetThreadPriorityBoost* (hThread : HANDLE; bDisablePriorityBoost : BOOL) : BOOL;
    PROCEDURE GetThreadPriorityBoost* (hThread : HANDLE; VAR [nil] pDisablePriorityBoost : BOOL) : BOOL;
    PROCEDURE GetThreadPriority* (hThread : HANDLE) : LONGINT;
    PROCEDURE GetThreadTimes* (hThread : HANDLE; VAR [nil] lpCreationTime : _FILETIME_struct; VAR [nil] lpExitTime : _FILETIME_struct; VAR [nil] lpKernelTime : _FILETIME_struct; VAR [nil] lpUserTime : _FILETIME_struct) : BOOL;
    PROCEDURE ExitThread* (dwExitCode : DWORD);
    PROCEDURE TerminateThread* (hThread : HANDLE; dwExitCode : DWORD) : BOOL;
    PROCEDURE GetExitCodeThread* (hThread : HANDLE; VAR [nil] lpExitCode : DWORD) : BOOL;
    PROCEDURE GetThreadSelectorEntry* (hThread : HANDLE; dwSelector : DWORD; VAR [nil] lpSelectorEntry : _LDT_ENTRY_struct) : BOOL;
    PROCEDURE SetThreadExecutionState* (esFlags : EXECUTION_STATE) : EXECUTION_STATE;
    PROCEDURE GetLastError* () : DWORD;
    PROCEDURE SetLastError* (dwErrCode : DWORD);
    PROCEDURE GetOverlappedResult* (hFile : HANDLE; VAR [nil] lpOverlapped : _OVERLAPPED_struct; VAR [nil] lpNumberOfBytesTransferred : DWORD; bWait : BOOL) : BOOL;
    PROCEDURE CreateIoCompletionPort* (FileHandle : HANDLE; ExistingCompletionPort : HANDLE; CompletionKey : DWORD; NumberOfConcurrentThreads : DWORD) : HANDLE;
    PROCEDURE GetQueuedCompletionStatus* (CompletionPort : HANDLE; VAR [nil] lpNumberOfBytesTransferred : DWORD; VAR [nil] lpCompletionKey : DWORD; VAR [nil] lpOverlapped : LPOVERLAPPED; dwMilliseconds : DWORD) : BOOL;
    PROCEDURE PostQueuedCompletionStatus* (CompletionPort : HANDLE; dwNumberOfBytesTransferred : DWORD; dwCompletionKey : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct) : BOOL;
    PROCEDURE SetErrorMode* (uMode : UINT) : UINT;
    PROCEDURE ReadProcessMemory* (hProcess : HANDLE; lpBaseAddress : LPCVOID; lpBuffer : LPVOID; nSize : DWORD; VAR [nil] lpNumberOfBytesRead : DWORD) : BOOL;
    PROCEDURE WriteProcessMemory* (hProcess : HANDLE; lpBaseAddress : LPVOID; lpBuffer : LPVOID; nSize : DWORD; VAR [nil] lpNumberOfBytesWritten : DWORD) : BOOL;
    PROCEDURE GetThreadContext* (hThread : HANDLE; VAR [nil] lpContext : CONTEXT) : BOOL;
    PROCEDURE SetThreadContext* (hThread : HANDLE; VAR [nil] lpContext : CONTEXT) : BOOL;
    PROCEDURE SuspendThread* (hThread : HANDLE) : DWORD;
    PROCEDURE ResumeThread* (hThread : HANDLE) : DWORD;
    PROCEDURE QueueUserAPC* (pfnAPC : PAPCFUNC; hThread : HANDLE; dwData : DWORD) : DWORD;
    PROCEDURE IsDebuggerPresent* () : BOOL;
    PROCEDURE DebugBreak* ();
    PROCEDURE WaitForDebugEvent* (VAR [nil] lpDebugEvent : _DEBUG_EVENT_struct; dwMilliseconds : DWORD) : BOOL;
    PROCEDURE ContinueDebugEvent* (dwProcessId : DWORD; dwThreadId : DWORD; dwContinueStatus : DWORD) : BOOL;
    PROCEDURE DebugActiveProcess* (dwProcessId : DWORD) : BOOL;
    PROCEDURE InitializeCriticalSection* (VAR [nil] lpCriticalSection : _RTL_CRITICAL_SECTION_struct);
    PROCEDURE EnterCriticalSection* (VAR [nil] lpCriticalSection : _RTL_CRITICAL_SECTION_struct);
    PROCEDURE LeaveCriticalSection* (VAR [nil] lpCriticalSection : _RTL_CRITICAL_SECTION_struct);
    PROCEDURE TryEnterCriticalSection* (VAR [nil] lpCriticalSection : _RTL_CRITICAL_SECTION_struct) : BOOL;
    PROCEDURE DeleteCriticalSection* (VAR [nil] lpCriticalSection : _RTL_CRITICAL_SECTION_struct);
    PROCEDURE SetEvent* (hEvent : HANDLE) : BOOL;
    PROCEDURE ResetEvent* (hEvent : HANDLE) : BOOL;
    PROCEDURE PulseEvent* (hEvent : HANDLE) : BOOL;
    PROCEDURE ReleaseSemaphore* (hSemaphore : HANDLE; lReleaseCount : LONG; VAR [nil] lpPreviousCount : LONGINT) : BOOL;
    PROCEDURE ReleaseMutex* (hMutex : HANDLE) : BOOL;
    PROCEDURE WaitForSingleObject* (hHandle : HANDLE; dwMilliseconds : DWORD) : DWORD;
    PROCEDURE WaitForMultipleObjects* (nCount : DWORD; VAR [nil] lpHandles : HANDLE; bWaitAll : BOOL; dwMilliseconds : DWORD) : DWORD;
    PROCEDURE Sleep* (dwMilliseconds : DWORD);
    PROCEDURE LoadResource* (hModule : HMODULE; hResInfo : HRSRC) : HGLOBAL;
    PROCEDURE SizeofResource* (hModule : HMODULE; hResInfo : HRSRC) : DWORD;
    PROCEDURE GlobalDeleteAtom* (nAtom : ATOM) : ATOM;
    PROCEDURE InitAtomTable* (nSize : DWORD) : BOOL;
    PROCEDURE DeleteAtom* (nAtom : ATOM) : ATOM;
    PROCEDURE SetHandleCount* (uNumber : UINT) : UINT;
    PROCEDURE GetLogicalDrives* () : DWORD;
    PROCEDURE LockFile* (hFile : HANDLE; dwFileOffsetLow : DWORD; dwFileOffsetHigh : DWORD; nNumberOfBytesToLockLow : DWORD; nNumberOfBytesToLockHigh : DWORD) : BOOL;
    PROCEDURE UnlockFile* (hFile : HANDLE; dwFileOffsetLow : DWORD; dwFileOffsetHigh : DWORD; nNumberOfBytesToUnlockLow : DWORD; nNumberOfBytesToUnlockHigh : DWORD) : BOOL;
    PROCEDURE LockFileEx* (hFile : HANDLE; dwFlags : DWORD; dwReserved : DWORD; nNumberOfBytesToLockLow : DWORD; nNumberOfBytesToLockHigh : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct) : BOOL;
    PROCEDURE UnlockFileEx* (hFile : HANDLE; dwReserved : DWORD; nNumberOfBytesToUnlockLow : DWORD; nNumberOfBytesToUnlockHigh : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct) : BOOL;
    PROCEDURE GetFileInformationByHandle* (hFile : HANDLE; VAR [nil] lpFileInformation : _BY_HANDLE_FILE_INFORMATION_struct) : BOOL;
    PROCEDURE GetFileType* (hFile : HANDLE) : DWORD;
    PROCEDURE GetFileSize* (hFile : HANDLE; VAR [nil] lpFileSizeHigh : DWORD) : DWORD;
    PROCEDURE GetStdHandle* (nStdHandle : DWORD) : HANDLE;
    PROCEDURE SetStdHandle* (nStdHandle : DWORD; hHandle : HANDLE) : BOOL;
    PROCEDURE WriteFile* (hFile : HANDLE; lpBuffer : LPCVOID; nNumberOfBytesToWrite : DWORD; VAR [nil] lpNumberOfBytesWritten : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct) : BOOL;
    PROCEDURE ReadFile* (hFile : HANDLE; lpBuffer : LPVOID; nNumberOfBytesToRead : DWORD; VAR [nil] lpNumberOfBytesRead : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct) : BOOL;
    PROCEDURE FlushFileBuffers* (hFile : HANDLE) : BOOL;
    PROCEDURE DeviceIoControl* (hDevice : HANDLE; dwIoControlCode : DWORD; lpInBuffer : LPVOID; nInBufferSize : DWORD; lpOutBuffer : LPVOID; nOutBufferSize : DWORD; VAR [nil] lpBytesReturned : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct) : BOOL;
    PROCEDURE GetDevicePowerState* (hFile : HANDLE) : BOOL;
    PROCEDURE SetEndOfFile* (hFile : HANDLE) : BOOL;
    PROCEDURE SetFilePointer* (hFile : HANDLE; lDistanceToMove : LONG; VAR [nil] lpDistanceToMoveHigh : LONG; dwMoveMethod : DWORD) : DWORD;
    PROCEDURE FindClose* (hFindFile : HANDLE) : BOOL;
    PROCEDURE GetFileTime* (hFile : HANDLE; VAR [nil] lpCreationTime : _FILETIME_struct; VAR [nil] lpLastAccessTime : _FILETIME_struct; VAR [nil] lpLastWriteTime : _FILETIME_struct) : BOOL;
    PROCEDURE SetFileTime* (hFile : HANDLE; VAR [nil] lpCreationTime : FILETIME; VAR [nil] lpLastAccessTime : FILETIME; VAR [nil] lpLastWriteTime : FILETIME) : BOOL;
    PROCEDURE CloseHandle* (hObject : HANDLE) : BOOL;
    PROCEDURE DuplicateHandle* (hSourceProcessHandle : HANDLE; hSourceHandle : HANDLE; hTargetProcessHandle : HANDLE; VAR [nil] lpTargetHandle : HANDLE; dwDesiredAccess : DWORD; bInheritHandle : BOOL; dwOptions : DWORD) : BOOL;
    PROCEDURE GetHandleInformation* (hObject : HANDLE; VAR [nil] lpdwFlags : DWORD) : BOOL;
    PROCEDURE SetHandleInformation* (hObject : HANDLE; dwMask : DWORD; dwFlags : DWORD) : BOOL;
    PROCEDURE LoadModule* (lpModuleName : LPCSTR; lpParameterBlock : LPVOID) : DWORD;
    PROCEDURE WinExec* (lpCmdLine : LPCSTR; uCmdShow : UINT) : UINT;
    PROCEDURE ClearCommBreak* (hFile : HANDLE) : BOOL;
    PROCEDURE ClearCommError* (hFile : HANDLE; VAR [nil] lpErrors : DWORD; VAR [nil] lpStat : _COMSTAT_struct) : BOOL;
    PROCEDURE SetupComm* (hFile : HANDLE; dwInQueue : DWORD; dwOutQueue : DWORD) : BOOL;
    PROCEDURE EscapeCommFunction* (hFile : HANDLE; dwFunc : DWORD) : BOOL;
    PROCEDURE GetCommConfig* (hCommDev : HANDLE; VAR [nil] lpCC : _COMMCONFIG_struct; VAR [nil] lpdwSize : DWORD) : BOOL;
    PROCEDURE GetCommMask* (hFile : HANDLE; VAR [nil] lpEvtMask : DWORD) : BOOL;
    PROCEDURE GetCommProperties* (hFile : HANDLE; VAR [nil] lpCommProp : _COMMPROP_struct) : BOOL;
    PROCEDURE GetCommModemStatus* (hFile : HANDLE; VAR [nil] lpModemStat : DWORD) : BOOL;
    PROCEDURE GetCommState* (hFile : HANDLE; VAR [nil] lpDCB : _DCB_struct) : BOOL;
    PROCEDURE GetCommTimeouts* (hFile : HANDLE; VAR [nil] lpCommTimeouts : _COMMTIMEOUTS_struct) : BOOL;
    PROCEDURE PurgeComm* (hFile : HANDLE; dwFlags : DWORD) : BOOL;
    PROCEDURE SetCommBreak* (hFile : HANDLE) : BOOL;
    PROCEDURE SetCommConfig* (hCommDev : HANDLE; VAR [nil] lpCC : _COMMCONFIG_struct; dwSize : DWORD) : BOOL;
    PROCEDURE SetCommMask* (hFile : HANDLE; dwEvtMask : DWORD) : BOOL;
    PROCEDURE SetCommState* (hFile : HANDLE; VAR [nil] lpDCB : _DCB_struct) : BOOL;
    PROCEDURE SetCommTimeouts* (hFile : HANDLE; VAR [nil] lpCommTimeouts : _COMMTIMEOUTS_struct) : BOOL;
    PROCEDURE TransmitCommChar* (hFile : HANDLE; cChar : CHAR) : BOOL;
    PROCEDURE WaitCommEvent* (hFile : HANDLE; VAR [nil] lpEvtMask : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct) : BOOL;
    PROCEDURE SetTapePosition* (hDevice : HANDLE; dwPositionMethod : DWORD; dwPartition : DWORD; dwOffsetLow : DWORD; dwOffsetHigh : DWORD; bImmediate : BOOL) : DWORD;
    PROCEDURE GetTapePosition* (hDevice : HANDLE; dwPositionType : DWORD; VAR [nil] lpdwPartition : DWORD; VAR [nil] lpdwOffsetLow : DWORD; VAR [nil] lpdwOffsetHigh : DWORD) : DWORD;
    PROCEDURE PrepareTape* (hDevice : HANDLE; dwOperation : DWORD; bImmediate : BOOL) : DWORD;
    PROCEDURE EraseTape* (hDevice : HANDLE; dwEraseType : DWORD; bImmediate : BOOL) : DWORD;
    PROCEDURE CreateTapePartition* (hDevice : HANDLE; dwPartitionMethod : DWORD; dwCount : DWORD; dwSize : DWORD) : DWORD;
    PROCEDURE WriteTapemark* (hDevice : HANDLE; dwTapemarkType : DWORD; dwTapemarkCount : DWORD; bImmediate : BOOL) : DWORD;
    PROCEDURE GetTapeStatus* (hDevice : HANDLE) : DWORD;
    PROCEDURE GetTapeParameters* (hDevice : HANDLE; dwOperation : DWORD; VAR [nil] lpdwSize : DWORD; lpTapeInformation : LPVOID) : DWORD;
    PROCEDURE SetTapeParameters* (hDevice : HANDLE; dwOperation : DWORD; lpTapeInformation : LPVOID) : DWORD;
    PROCEDURE Beep* (dwFreq : DWORD; dwDuration : DWORD) : BOOL;
    PROCEDURE MulDiv* (nNumber : LONGINT; nNumerator : LONGINT; nDenominator : LONGINT) : LONGINT;
    PROCEDURE GetSystemTime* (VAR [nil] lpSystemTime : _SYSTEMTIME_struct);
    PROCEDURE GetSystemTimeAsFileTime* (VAR [nil] lpSystemTimeAsFileTime : _FILETIME_struct);
    PROCEDURE SetSystemTime* (VAR [nil] lpSystemTime : SYSTEMTIME) : BOOL;
    PROCEDURE GetLocalTime* (VAR [nil] lpSystemTime : _SYSTEMTIME_struct);
    PROCEDURE SetLocalTime* (VAR [nil] lpSystemTime : SYSTEMTIME) : BOOL;
    PROCEDURE GetSystemInfo* (VAR [nil] lpSystemInfo : _SYSTEM_INFO_struct);
    PROCEDURE IsProcessorFeaturePresent* (ProcessorFeature : DWORD) : BOOL;
    PROCEDURE SystemTimeToTzSpecificLocalTime* (VAR [nil] lpTimeZoneInformation : _TIME_ZONE_INFORMATION_struct; VAR [nil] lpUniversalTime : _SYSTEMTIME_struct; VAR [nil] lpLocalTime : _SYSTEMTIME_struct) : BOOL;
    PROCEDURE GetTimeZoneInformation* (VAR [nil] lpTimeZoneInformation : _TIME_ZONE_INFORMATION_struct) : DWORD;
    PROCEDURE SetTimeZoneInformation* (VAR [nil] lpTimeZoneInformation : TIME_ZONE_INFORMATION) : BOOL;
    PROCEDURE SystemTimeToFileTime* (VAR [nil] lpSystemTime : SYSTEMTIME; VAR [nil] lpFileTime : _FILETIME_struct) : BOOL;
    PROCEDURE FileTimeToLocalFileTime* (VAR [nil] lpFileTime : FILETIME; VAR [nil] lpLocalFileTime : _FILETIME_struct) : BOOL;
    PROCEDURE LocalFileTimeToFileTime* (VAR [nil] lpLocalFileTime : FILETIME; VAR [nil] lpFileTime : _FILETIME_struct) : BOOL;
    PROCEDURE FileTimeToSystemTime* (VAR [nil] lpFileTime : FILETIME; VAR [nil] lpSystemTime : _SYSTEMTIME_struct) : BOOL;
    PROCEDURE CompareFileTime* (VAR [nil] lpFileTime1 : FILETIME; VAR [nil] lpFileTime2 : FILETIME) : LONG;
    PROCEDURE FileTimeToDosDateTime* (VAR [nil] lpFileTime : FILETIME; VAR [nil] lpFatDate : WORD; VAR [nil] lpFatTime : WORD) : BOOL;
    PROCEDURE DosDateTimeToFileTime* (wFatDate : WORD; wFatTime : WORD; VAR [nil] lpFileTime : _FILETIME_struct) : BOOL;
    PROCEDURE GetTickCount* () : DWORD;
    PROCEDURE SetSystemTimeAdjustment* (dwTimeAdjustment : DWORD; bTimeAdjustmentDisabled : BOOL) : BOOL;
    PROCEDURE GetSystemTimeAdjustment* (VAR [nil] lpTimeAdjustment : DWORD; VAR [nil] lpTimeIncrement : DWORD; VAR [nil] lpTimeAdjustmentDisabled : BOOL) : BOOL;
    PROCEDURE FormatMessageA* (dwFlags : DWORD; lpSource : LPCVOID; dwMessageId : DWORD; dwLanguageId : DWORD; lpBuffer : LPSTR; nSize : DWORD; VAR [nil] Arguments : va_list) : DWORD;
    PROCEDURE FormatMessageW* (dwFlags : DWORD; lpSource : LPCVOID; dwMessageId : DWORD; dwLanguageId : DWORD; lpBuffer : LPWSTR; nSize : DWORD; VAR [nil] Arguments : va_list) : DWORD;
    PROCEDURE CreatePipe* (VAR [nil] hReadPipe : HANDLE; VAR [nil] hWritePipe : HANDLE; VAR [nil] lpPipeAttributes : _SECURITY_ATTRIBUTES_struct; nSize : DWORD) : BOOL;
    PROCEDURE ConnectNamedPipe* (hNamedPipe : HANDLE; VAR [nil] lpOverlapped : _OVERLAPPED_struct) : BOOL;
    PROCEDURE DisconnectNamedPipe* (hNamedPipe : HANDLE) : BOOL;
    PROCEDURE SetNamedPipeHandleState* (hNamedPipe : HANDLE; VAR [nil] lpMode : DWORD; VAR [nil] lpMaxCollectionCount : DWORD; VAR [nil] lpCollectDataTimeout : DWORD) : BOOL;
    PROCEDURE GetNamedPipeInfo* (hNamedPipe : HANDLE; VAR [nil] lpFlags : DWORD; VAR [nil] lpOutBufferSize : DWORD; VAR [nil] lpInBufferSize : DWORD; VAR [nil] lpMaxInstances : DWORD) : BOOL;
    PROCEDURE PeekNamedPipe* (hNamedPipe : HANDLE; lpBuffer : LPVOID; nBufferSize : DWORD; VAR [nil] lpBytesRead : DWORD; VAR [nil] lpTotalBytesAvail : DWORD; VAR [nil] lpBytesLeftThisMessage : DWORD) : BOOL;
    PROCEDURE TransactNamedPipe* (hNamedPipe : HANDLE; lpInBuffer : LPVOID; nInBufferSize : DWORD; lpOutBuffer : LPVOID; nOutBufferSize : DWORD; VAR [nil] lpBytesRead : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct) : BOOL;
    PROCEDURE CreateMailslotA* (lpName : LPCSTR; nMaxMessageSize : DWORD; lReadTimeout : DWORD; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct) : HANDLE;
    PROCEDURE CreateMailslotW* (lpName : LPCWSTR; nMaxMessageSize : DWORD; lReadTimeout : DWORD; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct) : HANDLE;
    PROCEDURE GetMailslotInfo* (hMailslot : HANDLE; VAR [nil] lpMaxMessageSize : DWORD; VAR [nil] lpNextSize : DWORD; VAR [nil] lpMessageCount : DWORD; VAR [nil] lpReadTimeout : DWORD) : BOOL;
    PROCEDURE SetMailslotInfo* (hMailslot : HANDLE; lReadTimeout : DWORD) : BOOL;
    PROCEDURE MapViewOfFile* (hFileMappingObject : HANDLE; dwDesiredAccess : DWORD; dwFileOffsetHigh : DWORD; dwFileOffsetLow : DWORD; dwNumberOfBytesToMap : DWORD) : LPVOID;
    PROCEDURE MapViewOfFileVlm* (hFileMappingObject : HANDLE; dwDesiredAccess : DWORD; ulOffset : DWORDLONG; ulNumberOfBytesToMap : DWORDLONG; lpBaseAddress : PVOID64) : PVOID64;
    PROCEDURE FlushViewOfFile* (lpBaseAddress : LPCVOID; dwNumberOfBytesToFlush : DWORD) : BOOL;
    PROCEDURE UnmapViewOfFile* (lpBaseAddress : LPCVOID) : BOOL;
    PROCEDURE UnmapViewOfFileVlm* (lpBaseAddress : PVOID64) : BOOL;
    PROCEDURE EncryptFileA* (lpFileName : LPCSTR) : BOOL;
    PROCEDURE EncryptFileW* (lpFileName : LPCWSTR) : BOOL;
    PROCEDURE DecryptFileA* (lpFileName : LPCSTR; dwReserved : DWORD) : BOOL;
    PROCEDURE DecryptFileW* (lpFileName : LPCWSTR; dwReserved : DWORD) : BOOL;
    PROCEDURE OpenRawA* (lpFileName : LPCSTR; ulFlags : ULONG; VAR [nil] pvContext : PVOID) : DWORD;
    PROCEDURE OpenRawW* (lpFileName : LPCWSTR; ulFlags : ULONG; VAR [nil] pvContext : PVOID) : DWORD;
    PROCEDURE ReadRaw* (pfExportCallback : PFE_EXPORT_FUNC; pvCallbackContext : PVOID; pvContext : PVOID) : DWORD;
    PROCEDURE WriteRaw* (pfImportCallback : PFE_IMPORT_FUNC; pvCallbackContext : PVOID; pvContext : PVOID) : DWORD;
    PROCEDURE CloseRaw* (pvContext : PVOID);
    PROCEDURE QueryRecoveryAgentsA* (lpFileName : LPCSTR; VAR [nil] AgentCount : DWORD; VAR [nil] RecoveryAgentInformation : LPRECOVERY_AGENT_INFORMATIONA) : DWORD;
    PROCEDURE QueryRecoveryAgentsW* (lpFileName : LPCWSTR; VAR [nil] AgentCount : DWORD; VAR [nil] RecoveryAgentInformation : LPRECOVERY_AGENT_INFORMATIONW) : DWORD;
    PROCEDURE lstrcmpA* (lpString1 : LPCSTR; lpString2 : LPCSTR) : LONGINT;
    PROCEDURE lstrcmpW* (lpString1 : LPCWSTR; lpString2 : LPCWSTR) : LONGINT;
    PROCEDURE lstrcmpiA* (lpString1 : LPCSTR; lpString2 : LPCSTR) : LONGINT;
    PROCEDURE lstrcmpiW* (lpString1 : LPCWSTR; lpString2 : LPCWSTR) : LONGINT;
    PROCEDURE lstrcpynA* (lpString1 : LPSTR; lpString2 : LPCSTR; iMaxLength : LONGINT) : LPSTR;
    PROCEDURE lstrcpynW* (lpString1 : LPWSTR; lpString2 : LPCWSTR; iMaxLength : LONGINT) : LPWSTR;
    PROCEDURE lstrcpyA* (lpString1 : LPSTR; lpString2 : LPCSTR) : LPSTR;
    PROCEDURE lstrcpyW* (lpString1 : LPWSTR; lpString2 : LPCWSTR) : LPWSTR;
    PROCEDURE lstrcatA* (lpString1 : LPSTR; lpString2 : LPCSTR) : LPSTR;
    PROCEDURE lstrcatW* (lpString1 : LPWSTR; lpString2 : LPCWSTR) : LPWSTR;
    PROCEDURE lstrlenA* (lpString : LPCSTR) : LONGINT;
    PROCEDURE lstrlenW* (lpString : LPCWSTR) : LONGINT;
    PROCEDURE OpenFile* (lpFileName : LPCSTR; VAR [nil] lpReOpenBuff : _OFSTRUCT_struct; uStyle : UINT) : HFILE;
    PROCEDURE _lopen* (lpPathName : LPCSTR; iReadWrite : LONGINT) : HFILE;
    PROCEDURE _lcreat* (lpPathName : LPCSTR; iAttribute : LONGINT) : HFILE;
    PROCEDURE _lread* (hFile : HFILE; lpBuffer : LPVOID; uBytes : UINT) : UINT;
    PROCEDURE _lwrite* (hFile : HFILE; lpBuffer : LPCSTR; uBytes : UINT) : UINT;
    PROCEDURE _hread* (hFile : HFILE; lpBuffer : LPVOID; lBytes : LONGINT) : LONGINT;
    PROCEDURE _hwrite* (hFile : HFILE; lpBuffer : LPCSTR; lBytes : LONGINT) : LONGINT;
    PROCEDURE _lclose* (hFile : HFILE) : HFILE;
    PROCEDURE _llseek* (hFile : HFILE; lOffset : LONG; iOrigin : LONGINT) : LONG;
    PROCEDURE IsTextUnicode* (lpBuffer : LPVOID; cb : LONGINT; VAR [nil] lpi : LONGINT) : BOOL;
    PROCEDURE TlsAlloc* () : DWORD;
    PROCEDURE TlsGetValue* (dwTlsIndex : DWORD) : LPVOID;
    PROCEDURE TlsSetValue* (dwTlsIndex : DWORD; lpTlsValue : LPVOID) : BOOL;
    PROCEDURE TlsFree* (dwTlsIndex : DWORD) : BOOL;
    PROCEDURE SleepEx* (dwMilliseconds : DWORD; bAlertable : BOOL) : DWORD;
    PROCEDURE WaitForSingleObjectEx* (hHandle : HANDLE; dwMilliseconds : DWORD; bAlertable : BOOL) : DWORD;
    PROCEDURE WaitForMultipleObjectsEx* (nCount : DWORD; VAR [nil] lpHandles : HANDLE; bWaitAll : BOOL; dwMilliseconds : DWORD; bAlertable : BOOL) : DWORD;
    PROCEDURE SignalObjectAndWait* (hObjectToSignal : HANDLE; hObjectToWaitOn : HANDLE; dwMilliseconds : DWORD; bAlertable : BOOL) : DWORD;
    PROCEDURE ReadFileEx* (hFile : HANDLE; lpBuffer : LPVOID; nNumberOfBytesToRead : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct; lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE) : BOOL;
    PROCEDURE WriteFileEx* (hFile : HANDLE; lpBuffer : LPCVOID; nNumberOfBytesToWrite : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct; lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE) : BOOL;
    PROCEDURE BackupRead* (hFile : HANDLE; lpBuffer : LPBYTE; nNumberOfBytesToRead : DWORD; VAR [nil] lpNumberOfBytesRead : DWORD; bAbort : BOOL; bProcessSecurity : BOOL; VAR [nil] lpContext : LPVOID) : BOOL;
    PROCEDURE BackupSeek* (hFile : HANDLE; dwLowBytesToSeek : DWORD; dwHighBytesToSeek : DWORD; VAR [nil] lpdwLowByteSeeked : DWORD; VAR [nil] lpdwHighByteSeeked : DWORD; VAR [nil] lpContext : LPVOID) : BOOL;
    PROCEDURE BackupWrite* (hFile : HANDLE; lpBuffer : LPBYTE; nNumberOfBytesToWrite : DWORD; VAR [nil] lpNumberOfBytesWritten : DWORD; bAbort : BOOL; bProcessSecurity : BOOL; VAR [nil] lpContext : LPVOID) : BOOL;
    PROCEDURE ReadFileScatter* (hFile : HANDLE; aSegmentArray : ARRAY  OF FILE_SEGMENT_ELEMENT; nNumberOfBytesToRead : DWORD; VAR [nil] lpReserved : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct) : BOOL;
    PROCEDURE WriteFileGather* (hFile : HANDLE; aSegmentArray : ARRAY  OF FILE_SEGMENT_ELEMENT; nNumberOfBytesToWrite : DWORD; VAR [nil] lpReserved : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct) : BOOL;
    PROCEDURE CreateMutexA* (VAR [nil] lpMutexAttributes : _SECURITY_ATTRIBUTES_struct; bInitialOwner : BOOL; lpName : LPCSTR) : HANDLE;
    PROCEDURE CreateMutexW* (VAR [nil] lpMutexAttributes : _SECURITY_ATTRIBUTES_struct; bInitialOwner : BOOL; lpName : LPCWSTR) : HANDLE;
    PROCEDURE OpenMutexA* (dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : LPCSTR) : HANDLE;
    PROCEDURE OpenMutexW* (dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : LPCWSTR) : HANDLE;
    PROCEDURE CreateEventA* (VAR [nil] lpEventAttributes : _SECURITY_ATTRIBUTES_struct; bManualReset : BOOL; bInitialState : BOOL; lpName : LPCSTR) : HANDLE;
    PROCEDURE CreateEventW* (VAR [nil] lpEventAttributes : _SECURITY_ATTRIBUTES_struct; bManualReset : BOOL; bInitialState : BOOL; lpName : LPCWSTR) : HANDLE;
    PROCEDURE OpenEventA* (dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : LPCSTR) : HANDLE;
    PROCEDURE OpenEventW* (dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : LPCWSTR) : HANDLE;
    PROCEDURE CreateSemaphoreA* (VAR [nil] lpSemaphoreAttributes : _SECURITY_ATTRIBUTES_struct; lInitialCount : LONG; lMaximumCount : LONG; lpName : LPCSTR) : HANDLE;
    PROCEDURE CreateSemaphoreW* (VAR [nil] lpSemaphoreAttributes : _SECURITY_ATTRIBUTES_struct; lInitialCount : LONG; lMaximumCount : LONG; lpName : LPCWSTR) : HANDLE;
    PROCEDURE OpenSemaphoreA* (dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : LPCSTR) : HANDLE;
    PROCEDURE OpenSemaphoreW* (dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : LPCWSTR) : HANDLE;
    PROCEDURE CreateWaitableTimerA* (VAR [nil] lpTimerAttributes : _SECURITY_ATTRIBUTES_struct; bManualReset : BOOL; lpTimerName : LPCSTR) : HANDLE;
    PROCEDURE CreateWaitableTimerW* (VAR [nil] lpTimerAttributes : _SECURITY_ATTRIBUTES_struct; bManualReset : BOOL; lpTimerName : LPCWSTR) : HANDLE;
    PROCEDURE OpenWaitableTimerA* (dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpTimerName : LPCSTR) : HANDLE;
    PROCEDURE OpenWaitableTimerW* (dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpTimerName : LPCWSTR) : HANDLE;
    PROCEDURE SetWaitableTimer* (hTimer : HANDLE; VAR [nil] lpDueTime : LARGE_INTEGER; lPeriod : LONG; pfnCompletionRoutine : PTIMERAPCROUTINE; lpArgToCompletionRoutine : LPVOID; fResume : BOOL) : BOOL;
    PROCEDURE CancelWaitableTimer* (hTimer : HANDLE) : BOOL;
    PROCEDURE CreateFileMappingA* (hFile : HANDLE; VAR [nil] lpFileMappingAttributes : _SECURITY_ATTRIBUTES_struct; flProtect : DWORD; dwMaximumSizeHigh : DWORD; dwMaximumSizeLow : DWORD; lpName : LPCSTR) : HANDLE;
    PROCEDURE CreateFileMappingW* (hFile : HANDLE; VAR [nil] lpFileMappingAttributes : _SECURITY_ATTRIBUTES_struct; flProtect : DWORD; dwMaximumSizeHigh : DWORD; dwMaximumSizeLow : DWORD; lpName : LPCWSTR) : HANDLE;
    PROCEDURE OpenFileMappingA* (dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : LPCSTR) : HANDLE;
    PROCEDURE OpenFileMappingW* (dwDesiredAccess : DWORD; bInheritHandle : BOOL; lpName : LPCWSTR) : HANDLE;
    PROCEDURE GetLogicalDriveStringsA* (nBufferLength : DWORD; lpBuffer : LPSTR) : DWORD;
    PROCEDURE GetLogicalDriveStringsW* (nBufferLength : DWORD; lpBuffer : LPWSTR) : DWORD;
    PROCEDURE LoadLibraryA* (lpLibFileName : LPCSTR) : HMODULE;
    PROCEDURE LoadLibraryW* (lpLibFileName : LPCWSTR) : HMODULE;
    PROCEDURE LoadLibraryExA* (lpLibFileName : LPCSTR; hFile : HANDLE; dwFlags : DWORD) : HMODULE;
    PROCEDURE LoadLibraryExW* (lpLibFileName : LPCWSTR; hFile : HANDLE; dwFlags : DWORD) : HMODULE;
    PROCEDURE GetModuleFileNameA* (hModule : HMODULE; lpFilename : LPSTR; nSize : DWORD) : DWORD;
    PROCEDURE GetModuleFileNameW* (hModule : HMODULE; lpFilename : LPWSTR; nSize : DWORD) : DWORD;
    PROCEDURE GetModuleHandleA* (lpModuleName : LPCSTR) : HMODULE;
    PROCEDURE GetModuleHandleW* (lpModuleName : LPCWSTR) : HMODULE;
    PROCEDURE CreateProcessA* (lpApplicationName : LPCSTR; lpCommandLine : LPSTR; VAR [nil] lpProcessAttributes : _SECURITY_ATTRIBUTES_struct; VAR [nil] lpThreadAttributes : _SECURITY_ATTRIBUTES_struct; bInheritHandles : BOOL; dwCreationFlags : DWORD; lpEnvironment : LPVOID; lpCurrentDirectory : LPCSTR; VAR [nil] lpStartupInfo : _STARTUPINFOA_struct; VAR [nil] lpProcessInformation : _PROCESS_INFORMATION_struct) : BOOL;
    PROCEDURE CreateProcessW* (lpApplicationName : LPCWSTR; lpCommandLine : LPWSTR; VAR [nil] lpProcessAttributes : _SECURITY_ATTRIBUTES_struct; VAR [nil] lpThreadAttributes : _SECURITY_ATTRIBUTES_struct; bInheritHandles : BOOL; dwCreationFlags : DWORD; lpEnvironment : LPVOID; lpCurrentDirectory : LPCWSTR; VAR [nil] lpStartupInfo : _STARTUPINFOW_struct; VAR [nil] lpProcessInformation : _PROCESS_INFORMATION_struct) : BOOL;
    PROCEDURE SetProcessShutdownParameters* (dwLevel : DWORD; dwFlags : DWORD) : BOOL;
    PROCEDURE GetProcessShutdownParameters* (VAR [nil] lpdwLevel : DWORD; VAR [nil] lpdwFlags : DWORD) : BOOL;
    PROCEDURE GetProcessVersion* (ProcessId : DWORD) : DWORD;
    PROCEDURE FatalAppExitA* (uAction : UINT; lpMessageText : LPCSTR);
    PROCEDURE FatalAppExitW* (uAction : UINT; lpMessageText : LPCWSTR);
    PROCEDURE GetStartupInfoA* (VAR [nil] lpStartupInfo : _STARTUPINFOA_struct);
    PROCEDURE GetStartupInfoW* (VAR [nil] lpStartupInfo : _STARTUPINFOW_struct);
    PROCEDURE GetCommandLineA* () : LPSTR;
    PROCEDURE GetCommandLineW* () : LPWSTR;
    PROCEDURE GetEnvironmentVariableA* (lpName : LPCSTR; lpBuffer : LPSTR; nSize : DWORD) : DWORD;
    PROCEDURE GetEnvironmentVariableW* (lpName : LPCWSTR; lpBuffer : LPWSTR; nSize : DWORD) : DWORD;
    PROCEDURE SetEnvironmentVariableA* (lpName : LPCSTR; lpValue : LPCSTR) : BOOL;
    PROCEDURE SetEnvironmentVariableW* (lpName : LPCWSTR; lpValue : LPCWSTR) : BOOL;
    PROCEDURE ExpandEnvironmentStringsA* (lpSrc : LPCSTR; lpDst : LPSTR; nSize : DWORD) : DWORD;
    PROCEDURE ExpandEnvironmentStringsW* (lpSrc : LPCWSTR; lpDst : LPWSTR; nSize : DWORD) : DWORD;
    PROCEDURE OutputDebugStringA* (lpOutputString : LPCSTR);
    PROCEDURE OutputDebugStringW* (lpOutputString : LPCWSTR);
    PROCEDURE FindResourceA* (hModule : HMODULE; lpName : LPCSTR; lpType : LPCSTR) : HRSRC;
    PROCEDURE FindResourceW* (hModule : HMODULE; lpName : LPCWSTR; lpType : LPCWSTR) : HRSRC;
    PROCEDURE FindResourceExA* (hModule : HMODULE; lpType : LPCSTR; lpName : LPCSTR; wLanguage : WORD) : HRSRC;
    PROCEDURE FindResourceExW* (hModule : HMODULE; lpType : LPCWSTR; lpName : LPCWSTR; wLanguage : WORD) : HRSRC;
    PROCEDURE EnumResourceTypesA* (hModule : HMODULE; lpEnumFunc : ENUMRESTYPEPROC; lParam : LONG) : BOOL;
    PROCEDURE EnumResourceTypesW* (hModule : HMODULE; lpEnumFunc : ENUMRESTYPEPROC; lParam : LONG) : BOOL;
    PROCEDURE EnumResourceNamesA* (hModule : HMODULE; lpType : LPCSTR; lpEnumFunc : ENUMRESNAMEPROC; lParam : LONG) : BOOL;
    PROCEDURE EnumResourceNamesW* (hModule : HMODULE; lpType : LPCWSTR; lpEnumFunc : ENUMRESNAMEPROC; lParam : LONG) : BOOL;
    PROCEDURE EnumResourceLanguagesA* (hModule : HMODULE; lpType : LPCSTR; lpName : LPCSTR; lpEnumFunc : ENUMRESLANGPROC; lParam : LONG) : BOOL;
    PROCEDURE EnumResourceLanguagesW* (hModule : HMODULE; lpType : LPCWSTR; lpName : LPCWSTR; lpEnumFunc : ENUMRESLANGPROC; lParam : LONG) : BOOL;
    PROCEDURE BeginUpdateResourceA* (pFileName : LPCSTR; bDeleteExistingResources : BOOL) : HANDLE;
    PROCEDURE BeginUpdateResourceW* (pFileName : LPCWSTR; bDeleteExistingResources : BOOL) : HANDLE;
    PROCEDURE UpdateResourceA* (hUpdate : HANDLE; lpType : LPCSTR; lpName : LPCSTR; wLanguage : WORD; lpData : LPVOID; cbData : DWORD) : BOOL;
    PROCEDURE UpdateResourceW* (hUpdate : HANDLE; lpType : LPCWSTR; lpName : LPCWSTR; wLanguage : WORD; lpData : LPVOID; cbData : DWORD) : BOOL;
    PROCEDURE EndUpdateResourceA* (hUpdate : HANDLE; fDiscard : BOOL) : BOOL;
    PROCEDURE EndUpdateResourceW* (hUpdate : HANDLE; fDiscard : BOOL) : BOOL;
    PROCEDURE GlobalAddAtomA* (lpString : LPCSTR) : ATOM;
    PROCEDURE GlobalAddAtomW* (lpString : LPCWSTR) : ATOM;
    PROCEDURE GlobalFindAtomA* (lpString : LPCSTR) : ATOM;
    PROCEDURE GlobalFindAtomW* (lpString : LPCWSTR) : ATOM;
    PROCEDURE GlobalGetAtomNameA* (nAtom : ATOM; lpBuffer : LPSTR; nSize : LONGINT) : UINT;
    PROCEDURE GlobalGetAtomNameW* (nAtom : ATOM; lpBuffer : LPWSTR; nSize : LONGINT) : UINT;
    PROCEDURE AddAtomA* (lpString : LPCSTR) : ATOM;
    PROCEDURE AddAtomW* (lpString : LPCWSTR) : ATOM;
    PROCEDURE FindAtomA* (lpString : LPCSTR) : ATOM;
    PROCEDURE FindAtomW* (lpString : LPCWSTR) : ATOM;
    PROCEDURE GetAtomNameA* (nAtom : ATOM; lpBuffer : LPSTR; nSize : LONGINT) : UINT;
    PROCEDURE GetAtomNameW* (nAtom : ATOM; lpBuffer : LPWSTR; nSize : LONGINT) : UINT;
    PROCEDURE GetProfileIntA* (lpAppName : LPCSTR; lpKeyName : LPCSTR; nDefault : INT) : UINT;
    PROCEDURE GetProfileIntW* (lpAppName : LPCWSTR; lpKeyName : LPCWSTR; nDefault : INT) : UINT;
    PROCEDURE GetProfileStringA* (lpAppName : LPCSTR; lpKeyName : LPCSTR; lpDefault : LPCSTR; lpReturnedString : LPSTR; nSize : DWORD) : DWORD;
    PROCEDURE GetProfileStringW* (lpAppName : LPCWSTR; lpKeyName : LPCWSTR; lpDefault : LPCWSTR; lpReturnedString : LPWSTR; nSize : DWORD) : DWORD;
    PROCEDURE WriteProfileStringA* (lpAppName : LPCSTR; lpKeyName : LPCSTR; lpString : LPCSTR) : BOOL;
    PROCEDURE WriteProfileStringW* (lpAppName : LPCWSTR; lpKeyName : LPCWSTR; lpString : LPCWSTR) : BOOL;
    PROCEDURE GetProfileSectionA* (lpAppName : LPCSTR; lpReturnedString : LPSTR; nSize : DWORD) : DWORD;
    PROCEDURE GetProfileSectionW* (lpAppName : LPCWSTR; lpReturnedString : LPWSTR; nSize : DWORD) : DWORD;
    PROCEDURE WriteProfileSectionA* (lpAppName : LPCSTR; lpString : LPCSTR) : BOOL;
    PROCEDURE WriteProfileSectionW* (lpAppName : LPCWSTR; lpString : LPCWSTR) : BOOL;
    PROCEDURE GetPrivateProfileIntA* (lpAppName : LPCSTR; lpKeyName : LPCSTR; nDefault : INT; lpFileName : LPCSTR) : UINT;
    PROCEDURE GetPrivateProfileIntW* (lpAppName : LPCWSTR; lpKeyName : LPCWSTR; nDefault : INT; lpFileName : LPCWSTR) : UINT;
    PROCEDURE GetPrivateProfileStringA* (lpAppName : LPCSTR; lpKeyName : LPCSTR; lpDefault : LPCSTR; lpReturnedString : LPSTR; nSize : DWORD; lpFileName : LPCSTR) : DWORD;
    PROCEDURE GetPrivateProfileStringW* (lpAppName : LPCWSTR; lpKeyName : LPCWSTR; lpDefault : LPCWSTR; lpReturnedString : LPWSTR; nSize : DWORD; lpFileName : LPCWSTR) : DWORD;
    PROCEDURE WritePrivateProfileStringA* (lpAppName : LPCSTR; lpKeyName : LPCSTR; lpString : LPCSTR; lpFileName : LPCSTR) : BOOL;
    PROCEDURE WritePrivateProfileStringW* (lpAppName : LPCWSTR; lpKeyName : LPCWSTR; lpString : LPCWSTR; lpFileName : LPCWSTR) : BOOL;
    PROCEDURE GetPrivateProfileSectionA* (lpAppName : LPCSTR; lpReturnedString : LPSTR; nSize : DWORD; lpFileName : LPCSTR) : DWORD;
    PROCEDURE GetPrivateProfileSectionW* (lpAppName : LPCWSTR; lpReturnedString : LPWSTR; nSize : DWORD; lpFileName : LPCWSTR) : DWORD;
    PROCEDURE WritePrivateProfileSectionA* (lpAppName : LPCSTR; lpString : LPCSTR; lpFileName : LPCSTR) : BOOL;
    PROCEDURE WritePrivateProfileSectionW* (lpAppName : LPCWSTR; lpString : LPCWSTR; lpFileName : LPCWSTR) : BOOL;
    PROCEDURE GetPrivateProfileSectionNamesA* (lpszReturnBuffer : LPSTR; nSize : DWORD; lpFileName : LPCSTR) : DWORD;
    PROCEDURE GetPrivateProfileSectionNamesW* (lpszReturnBuffer : LPWSTR; nSize : DWORD; lpFileName : LPCWSTR) : DWORD;
    PROCEDURE GetPrivateProfileStructA* (lpszSection : LPCSTR; lpszKey : LPCSTR; lpStruct : LPVOID; uSizeStruct : UINT; szFile : LPCSTR) : BOOL;
    PROCEDURE GetPrivateProfileStructW* (lpszSection : LPCWSTR; lpszKey : LPCWSTR; lpStruct : LPVOID; uSizeStruct : UINT; szFile : LPCWSTR) : BOOL;
    PROCEDURE WritePrivateProfileStructA* (lpszSection : LPCSTR; lpszKey : LPCSTR; lpStruct : LPVOID; uSizeStruct : UINT; szFile : LPCSTR) : BOOL;
    PROCEDURE WritePrivateProfileStructW* (lpszSection : LPCWSTR; lpszKey : LPCWSTR; lpStruct : LPVOID; uSizeStruct : UINT; szFile : LPCWSTR) : BOOL;
    PROCEDURE GetDriveTypeA* (lpRootPathName : LPCSTR) : UINT;
    PROCEDURE GetDriveTypeW* (lpRootPathName : LPCWSTR) : UINT;
    PROCEDURE GetSystemDirectoryA* (lpBuffer : LPSTR; uSize : UINT) : UINT;
    PROCEDURE GetSystemDirectoryW* (lpBuffer : LPWSTR; uSize : UINT) : UINT;
    PROCEDURE GetTempPathA* (nBufferLength : DWORD; lpBuffer : LPSTR) : DWORD;
    PROCEDURE GetTempPathW* (nBufferLength : DWORD; lpBuffer : LPWSTR) : DWORD;
    PROCEDURE GetTempFileNameA* (lpPathName : LPCSTR; lpPrefixString : LPCSTR; uUnique : UINT; lpTempFileName : LPSTR) : UINT;
    PROCEDURE GetTempFileNameW* (lpPathName : LPCWSTR; lpPrefixString : LPCWSTR; uUnique : UINT; lpTempFileName : LPWSTR) : UINT;
    PROCEDURE GetWindowsDirectoryA* (lpBuffer : LPSTR; uSize : UINT) : UINT;
    PROCEDURE GetWindowsDirectoryW* (lpBuffer : LPWSTR; uSize : UINT) : UINT;
    PROCEDURE SetCurrentDirectoryA* (lpPathName : LPCSTR) : BOOL;
    PROCEDURE SetCurrentDirectoryW* (lpPathName : LPCWSTR) : BOOL;
    PROCEDURE GetCurrentDirectoryA* (nBufferLength : DWORD; lpBuffer : LPSTR) : DWORD;
    PROCEDURE GetCurrentDirectoryW* (nBufferLength : DWORD; lpBuffer : LPWSTR) : DWORD;
    PROCEDURE GetDiskFreeSpaceA* (lpRootPathName : LPCSTR; VAR [nil] lpSectorsPerCluster : DWORD; VAR [nil] lpBytesPerSector : DWORD; VAR [nil] lpNumberOfFreeClusters : DWORD; VAR [nil] lpTotalNumberOfClusters : DWORD) : BOOL;
    PROCEDURE GetDiskFreeSpaceW* (lpRootPathName : LPCWSTR; VAR [nil] lpSectorsPerCluster : DWORD; VAR [nil] lpBytesPerSector : DWORD; VAR [nil] lpNumberOfFreeClusters : DWORD; VAR [nil] lpTotalNumberOfClusters : DWORD) : BOOL;
    PROCEDURE GetDiskFreeSpaceExA* (lpDirectoryName : LPCSTR; VAR [nil] lpFreeBytesAvailableToCaller : ULARGE_INTEGER; VAR [nil] lpTotalNumberOfBytes : ULARGE_INTEGER; VAR [nil] lpTotalNumberOfFreeBytes : ULARGE_INTEGER) : BOOL;
    PROCEDURE GetDiskFreeSpaceExW* (lpDirectoryName : LPCWSTR; VAR [nil] lpFreeBytesAvailableToCaller : ULARGE_INTEGER; VAR [nil] lpTotalNumberOfBytes : ULARGE_INTEGER; VAR [nil] lpTotalNumberOfFreeBytes : ULARGE_INTEGER) : BOOL;
    PROCEDURE CreateDirectoryA* (lpPathName : LPCSTR; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct) : BOOL;
    PROCEDURE CreateDirectoryW* (lpPathName : LPCWSTR; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct) : BOOL;
    PROCEDURE CreateDirectoryExA* (lpTemplateDirectory : LPCSTR; lpNewDirectory : LPCSTR; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct) : BOOL;
    PROCEDURE CreateDirectoryExW* (lpTemplateDirectory : LPCWSTR; lpNewDirectory : LPCWSTR; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct) : BOOL;
    PROCEDURE RemoveDirectoryA* (lpPathName : LPCSTR) : BOOL;
    PROCEDURE RemoveDirectoryW* (lpPathName : LPCWSTR) : BOOL;
    PROCEDURE GetFullPathNameA* (lpFileName : LPCSTR; nBufferLength : DWORD; lpBuffer : LPSTR; VAR [nil] lpFilePart : LPSTR) : DWORD;
    PROCEDURE GetFullPathNameW* (lpFileName : LPCWSTR; nBufferLength : DWORD; lpBuffer : LPWSTR; VAR [nil] lpFilePart : LPWSTR) : DWORD;
    PROCEDURE DefineDosDeviceA* (dwFlags : DWORD; lpDeviceName : LPCSTR; lpTargetPath : LPCSTR) : BOOL;
    PROCEDURE DefineDosDeviceW* (dwFlags : DWORD; lpDeviceName : LPCWSTR; lpTargetPath : LPCWSTR) : BOOL;
    PROCEDURE QueryDosDeviceA* (lpDeviceName : LPCSTR; lpTargetPath : LPSTR; ucchMax : DWORD) : DWORD;
    PROCEDURE QueryDosDeviceW* (lpDeviceName : LPCWSTR; lpTargetPath : LPWSTR; ucchMax : DWORD) : DWORD;
    PROCEDURE CreateFileA* (lpFileName : LPCSTR; dwDesiredAccess : DWORD; dwShareMode : DWORD; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct; dwCreationDisposition : DWORD; dwFlagsAndAttributes : DWORD; hTemplateFile : HANDLE) : HANDLE;
    PROCEDURE CreateFileW* (lpFileName : LPCWSTR; dwDesiredAccess : DWORD; dwShareMode : DWORD; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct; dwCreationDisposition : DWORD; dwFlagsAndAttributes : DWORD; hTemplateFile : HANDLE) : HANDLE;
    PROCEDURE SetFileAttributesA* (lpFileName : LPCSTR; dwFileAttributes : DWORD) : BOOL;
    PROCEDURE SetFileAttributesW* (lpFileName : LPCWSTR; dwFileAttributes : DWORD) : BOOL;
    PROCEDURE GetFileAttributesA* (lpFileName : LPCSTR) : DWORD;
    PROCEDURE GetFileAttributesW* (lpFileName : LPCWSTR) : DWORD;
    PROCEDURE GetFileAttributesExA* (lpFileName : LPCSTR; fInfoLevelId : GET_FILEEX_INFO_LEVELS; lpFileInformation : LPVOID) : BOOL;
    PROCEDURE GetFileAttributesExW* (lpFileName : LPCWSTR; fInfoLevelId : GET_FILEEX_INFO_LEVELS; lpFileInformation : LPVOID) : BOOL;
    PROCEDURE GetCompressedFileSizeA* (lpFileName : LPCSTR; VAR [nil] lpFileSizeHigh : DWORD) : DWORD;
    PROCEDURE GetCompressedFileSizeW* (lpFileName : LPCWSTR; VAR [nil] lpFileSizeHigh : DWORD) : DWORD;
    PROCEDURE DeleteFileA* (lpFileName : LPCSTR) : BOOL;
    PROCEDURE DeleteFileW* (lpFileName : LPCWSTR) : BOOL;
    PROCEDURE FindFirstFileExA* (lpFileName : LPCSTR; fInfoLevelId : FINDEX_INFO_LEVELS; lpFindFileData : LPVOID; fSearchOp : FINDEX_SEARCH_OPS; lpSearchFilter : LPVOID; dwAdditionalFlags : DWORD) : HANDLE;
    PROCEDURE FindFirstFileExW* (lpFileName : LPCWSTR; fInfoLevelId : FINDEX_INFO_LEVELS; lpFindFileData : LPVOID; fSearchOp : FINDEX_SEARCH_OPS; lpSearchFilter : LPVOID; dwAdditionalFlags : DWORD) : HANDLE;
    PROCEDURE FindFirstFileA* (lpFileName : LPCSTR; VAR [nil] lpFindFileData : _WIN32_FIND_DATAA_struct) : HANDLE;
    PROCEDURE FindFirstFileW* (lpFileName : LPCWSTR; VAR [nil] lpFindFileData : _WIN32_FIND_DATAW_struct) : HANDLE;
    PROCEDURE FindNextFileA* (hFindFile : HANDLE; VAR [nil] lpFindFileData : _WIN32_FIND_DATAA_struct) : BOOL;
    PROCEDURE FindNextFileW* (hFindFile : HANDLE; VAR [nil] lpFindFileData : _WIN32_FIND_DATAW_struct) : BOOL;
    PROCEDURE SearchPathA* (lpPath : LPCSTR; lpFileName : LPCSTR; lpExtension : LPCSTR; nBufferLength : DWORD; lpBuffer : LPSTR; VAR [nil] lpFilePart : LPSTR) : DWORD;
    PROCEDURE SearchPathW* (lpPath : LPCWSTR; lpFileName : LPCWSTR; lpExtension : LPCWSTR; nBufferLength : DWORD; lpBuffer : LPWSTR; VAR [nil] lpFilePart : LPWSTR) : DWORD;
    PROCEDURE CopyFileA* (lpExistingFileName : LPCSTR; lpNewFileName : LPCSTR; bFailIfExists : BOOL) : BOOL;
    PROCEDURE CopyFileW* (lpExistingFileName : LPCWSTR; lpNewFileName : LPCWSTR; bFailIfExists : BOOL) : BOOL;
    PROCEDURE CopyFileExA* (lpExistingFileName : LPCSTR; lpNewFileName : LPCSTR; lpProgressRoutine : LPPROGRESS_ROUTINE; lpData : LPVOID; VAR [nil] pbCancel : BOOL; dwCopyFlags : DWORD) : BOOL;
    PROCEDURE CopyFileExW* (lpExistingFileName : LPCWSTR; lpNewFileName : LPCWSTR; lpProgressRoutine : LPPROGRESS_ROUTINE; lpData : LPVOID; VAR [nil] pbCancel : BOOL; dwCopyFlags : DWORD) : BOOL;
    PROCEDURE MoveFileA* (lpExistingFileName : LPCSTR; lpNewFileName : LPCSTR) : BOOL;
    PROCEDURE MoveFileW* (lpExistingFileName : LPCWSTR; lpNewFileName : LPCWSTR) : BOOL;
    PROCEDURE MoveFileExA* (lpExistingFileName : LPCSTR; lpNewFileName : LPCSTR; dwFlags : DWORD) : BOOL;
    PROCEDURE MoveFileExW* (lpExistingFileName : LPCWSTR; lpNewFileName : LPCWSTR; dwFlags : DWORD) : BOOL;
    PROCEDURE CreateNamedPipeA* (lpName : LPCSTR; dwOpenMode : DWORD; dwPipeMode : DWORD; nMaxInstances : DWORD; nOutBufferSize : DWORD; nInBufferSize : DWORD; nDefaultTimeOut : DWORD; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct) : HANDLE;
    PROCEDURE CreateNamedPipeW* (lpName : LPCWSTR; dwOpenMode : DWORD; dwPipeMode : DWORD; nMaxInstances : DWORD; nOutBufferSize : DWORD; nInBufferSize : DWORD; nDefaultTimeOut : DWORD; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct) : HANDLE;
    PROCEDURE GetNamedPipeHandleStateA* (hNamedPipe : HANDLE; VAR [nil] lpState : DWORD; VAR [nil] lpCurInstances : DWORD; VAR [nil] lpMaxCollectionCount : DWORD; VAR [nil] lpCollectDataTimeout : DWORD; lpUserName : LPSTR; nMaxUserNameSize : DWORD) : BOOL;
    PROCEDURE GetNamedPipeHandleStateW* (hNamedPipe : HANDLE; VAR [nil] lpState : DWORD; VAR [nil] lpCurInstances : DWORD; VAR [nil] lpMaxCollectionCount : DWORD; VAR [nil] lpCollectDataTimeout : DWORD; lpUserName : LPWSTR; nMaxUserNameSize : DWORD) : BOOL;
    PROCEDURE CallNamedPipeA* (lpNamedPipeName : LPCSTR; lpInBuffer : LPVOID; nInBufferSize : DWORD; lpOutBuffer : LPVOID; nOutBufferSize : DWORD; VAR [nil] lpBytesRead : DWORD; nTimeOut : DWORD) : BOOL;
    PROCEDURE CallNamedPipeW* (lpNamedPipeName : LPCWSTR; lpInBuffer : LPVOID; nInBufferSize : DWORD; lpOutBuffer : LPVOID; nOutBufferSize : DWORD; VAR [nil] lpBytesRead : DWORD; nTimeOut : DWORD) : BOOL;
    PROCEDURE WaitNamedPipeA* (lpNamedPipeName : LPCSTR; nTimeOut : DWORD) : BOOL;
    PROCEDURE WaitNamedPipeW* (lpNamedPipeName : LPCWSTR; nTimeOut : DWORD) : BOOL;
    PROCEDURE SetVolumeLabelA* (lpRootPathName : LPCSTR; lpVolumeName : LPCSTR) : BOOL;
    PROCEDURE SetVolumeLabelW* (lpRootPathName : LPCWSTR; lpVolumeName : LPCWSTR) : BOOL;
    PROCEDURE SetFileApisToOEM* ();
    PROCEDURE SetFileApisToANSI* ();
    PROCEDURE AreFileApisANSI* () : BOOL;
    PROCEDURE GetVolumeInformationA* (lpRootPathName : LPCSTR; lpVolumeNameBuffer : LPSTR; nVolumeNameSize : DWORD; VAR [nil] lpVolumeSerialNumber : DWORD; VAR [nil] lpMaximumComponentLength : DWORD; VAR [nil] lpFileSystemFlags : DWORD; lpFileSystemNameBuffer : LPSTR; nFileSystemNameSize : DWORD) : BOOL;
    PROCEDURE GetVolumeInformationW* (lpRootPathName : LPCWSTR; lpVolumeNameBuffer : LPWSTR; nVolumeNameSize : DWORD; VAR [nil] lpVolumeSerialNumber : DWORD; VAR [nil] lpMaximumComponentLength : DWORD; VAR [nil] lpFileSystemFlags : DWORD; lpFileSystemNameBuffer : LPWSTR; nFileSystemNameSize : DWORD) : BOOL;
    PROCEDURE CancelIo* (hFile : HANDLE) : BOOL;
    PROCEDURE ClearEventLogA* (hEventLog : HANDLE; lpBackupFileName : LPCSTR) : BOOL;
    PROCEDURE ClearEventLogW* (hEventLog : HANDLE; lpBackupFileName : LPCWSTR) : BOOL;
    PROCEDURE BackupEventLogA* (hEventLog : HANDLE; lpBackupFileName : LPCSTR) : BOOL;
    PROCEDURE BackupEventLogW* (hEventLog : HANDLE; lpBackupFileName : LPCWSTR) : BOOL;
    PROCEDURE CloseEventLog* (hEventLog : HANDLE) : BOOL;
    PROCEDURE DeregisterEventSource* (hEventLog : HANDLE) : BOOL;
    PROCEDURE NotifyChangeEventLog* (hEventLog : HANDLE; hEvent : HANDLE) : BOOL;
    PROCEDURE GetNumberOfEventLogRecords* (hEventLog : HANDLE; VAR [nil] NumberOfRecords : DWORD) : BOOL;
    PROCEDURE GetOldestEventLogRecord* (hEventLog : HANDLE; VAR [nil] OldestRecord : DWORD) : BOOL;
    PROCEDURE OpenEventLogA* (lpUNCServerName : LPCSTR; lpSourceName : LPCSTR) : HANDLE;
    PROCEDURE OpenEventLogW* (lpUNCServerName : LPCWSTR; lpSourceName : LPCWSTR) : HANDLE;
    PROCEDURE RegisterEventSourceA* (lpUNCServerName : LPCSTR; lpSourceName : LPCSTR) : HANDLE;
    PROCEDURE RegisterEventSourceW* (lpUNCServerName : LPCWSTR; lpSourceName : LPCWSTR) : HANDLE;
    PROCEDURE OpenBackupEventLogA* (lpUNCServerName : LPCSTR; lpFileName : LPCSTR) : HANDLE;
    PROCEDURE OpenBackupEventLogW* (lpUNCServerName : LPCWSTR; lpFileName : LPCWSTR) : HANDLE;
    PROCEDURE ReadEventLogA* (hEventLog : HANDLE; dwReadFlags : DWORD; dwRecordOffset : DWORD; lpBuffer : LPVOID; nNumberOfBytesToRead : DWORD; VAR [nil] pnBytesRead : DWORD; VAR [nil] pnMinNumberOfBytesNeeded : DWORD) : BOOL;
    PROCEDURE ReadEventLogW* (hEventLog : HANDLE; dwReadFlags : DWORD; dwRecordOffset : DWORD; lpBuffer : LPVOID; nNumberOfBytesToRead : DWORD; VAR [nil] pnBytesRead : DWORD; VAR [nil] pnMinNumberOfBytesNeeded : DWORD) : BOOL;
    PROCEDURE ReportEventA* (hEventLog : HANDLE; wType : WORD; wCategory : WORD; dwEventID : DWORD; lpUserSid : PSID; wNumStrings : WORD; dwDataSize : DWORD; VAR [nil] lpStrings : LPCSTR; lpRawData : LPVOID) : BOOL;
    PROCEDURE ReportEventW* (hEventLog : HANDLE; wType : WORD; wCategory : WORD; dwEventID : DWORD; lpUserSid : PSID; wNumStrings : WORD; dwDataSize : DWORD; VAR [nil] lpStrings : LPCWSTR; lpRawData : LPVOID) : BOOL;
    PROCEDURE DuplicateToken* (ExistingTokenHandle : HANDLE; ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL; VAR [nil] DuplicateTokenHandle : HANDLE) : BOOL;
    PROCEDURE GetKernelObjectSecurity* (Handle : HANDLE; RequestedInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSECURITY_DESCRIPTOR; nLength : DWORD; VAR [nil] lpnLengthNeeded : DWORD) : BOOL;
    PROCEDURE ImpersonateNamedPipeClient* (hNamedPipe : HANDLE) : BOOL;
    PROCEDURE ImpersonateSelf* (ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL) : BOOL;
    PROCEDURE RevertToSelf* () : BOOL;
    PROCEDURE SetThreadToken* (VAR [nil] Thread : HANDLE; Token : HANDLE) : BOOL;
    PROCEDURE AccessCheck* (pSecurityDescriptor : PSECURITY_DESCRIPTOR; ClientToken : HANDLE; DesiredAccess : DWORD; VAR [nil] GenericMapping : GENERIC_MAPPING; VAR [nil] PrivilegeSet : _PRIVILEGE_SET_struct; VAR [nil] PrivilegeSetLength : DWORD; VAR [nil] GrantedAccess : DWORD; VAR [nil] AccessStatus : BOOL) : BOOL;
    PROCEDURE OpenProcessToken* (ProcessHandle : HANDLE; DesiredAccess : DWORD; VAR [nil] TokenHandle : HANDLE) : BOOL;
    PROCEDURE OpenThreadToken* (ThreadHandle : HANDLE; DesiredAccess : DWORD; OpenAsSelf : BOOL; VAR [nil] TokenHandle : HANDLE) : BOOL;
    PROCEDURE GetTokenInformation* (TokenHandle : HANDLE; TokenInformationClass : TOKEN_INFORMATION_CLASS; TokenInformation : LPVOID; TokenInformationLength : DWORD; VAR [nil] ReturnLength : DWORD) : BOOL;
    PROCEDURE SetTokenInformation* (TokenHandle : HANDLE; TokenInformationClass : TOKEN_INFORMATION_CLASS; TokenInformation : LPVOID; TokenInformationLength : DWORD) : BOOL;
    PROCEDURE AdjustTokenPrivileges* (TokenHandle : HANDLE; DisableAllPrivileges : BOOL; VAR [nil] NewState : _TOKEN_PRIVILEGES_struct; BufferLength : DWORD; VAR [nil] PreviousState : _TOKEN_PRIVILEGES_struct; VAR [nil] ReturnLength : DWORD) : BOOL;
    PROCEDURE AdjustTokenGroups* (TokenHandle : HANDLE; ResetToDefault : BOOL; VAR [nil] NewState : _TOKEN_GROUPS_struct; BufferLength : DWORD; VAR [nil] PreviousState : _TOKEN_GROUPS_struct; VAR [nil] ReturnLength : DWORD) : BOOL;
    PROCEDURE PrivilegeCheck* (ClientToken : HANDLE; VAR [nil] RequiredPrivileges : _PRIVILEGE_SET_struct; VAR [nil] pfResult : BOOL) : BOOL;
    PROCEDURE AccessCheckAndAuditAlarmA* (SubsystemName : LPCSTR; HandleId : LPVOID; ObjectTypeName : LPSTR; ObjectName : LPSTR; SecurityDescriptor : PSECURITY_DESCRIPTOR; DesiredAccess : DWORD; VAR [nil] GenericMapping : GENERIC_MAPPING; ObjectCreation : BOOL; VAR [nil] GrantedAccess : DWORD; VAR [nil] AccessStatus : BOOL; VAR [nil] pfGenerateOnClose : BOOL) : BOOL;
    PROCEDURE AccessCheckAndAuditAlarmW* (SubsystemName : LPCWSTR; HandleId : LPVOID; ObjectTypeName : LPWSTR; ObjectName : LPWSTR; SecurityDescriptor : PSECURITY_DESCRIPTOR; DesiredAccess : DWORD; VAR [nil] GenericMapping : GENERIC_MAPPING; ObjectCreation : BOOL; VAR [nil] GrantedAccess : DWORD; VAR [nil] AccessStatus : BOOL; VAR [nil] pfGenerateOnClose : BOOL) : BOOL;
    PROCEDURE ObjectOpenAuditAlarmA* (SubsystemName : LPCSTR; HandleId : LPVOID; ObjectTypeName : LPSTR; ObjectName : LPSTR; pSecurityDescriptor : PSECURITY_DESCRIPTOR; ClientToken : HANDLE; DesiredAccess : DWORD; GrantedAccess : DWORD; VAR [nil] Privileges : _PRIVILEGE_SET_struct; ObjectCreation : BOOL; AccessGranted : BOOL; VAR [nil] GenerateOnClose : BOOL) : BOOL;
    PROCEDURE ObjectOpenAuditAlarmW* (SubsystemName : LPCWSTR; HandleId : LPVOID; ObjectTypeName : LPWSTR; ObjectName : LPWSTR; pSecurityDescriptor : PSECURITY_DESCRIPTOR; ClientToken : HANDLE; DesiredAccess : DWORD; GrantedAccess : DWORD; VAR [nil] Privileges : _PRIVILEGE_SET_struct; ObjectCreation : BOOL; AccessGranted : BOOL; VAR [nil] GenerateOnClose : BOOL) : BOOL;
    PROCEDURE ObjectPrivilegeAuditAlarmA* (SubsystemName : LPCSTR; HandleId : LPVOID; ClientToken : HANDLE; DesiredAccess : DWORD; VAR [nil] Privileges : _PRIVILEGE_SET_struct; AccessGranted : BOOL) : BOOL;
    PROCEDURE ObjectPrivilegeAuditAlarmW* (SubsystemName : LPCWSTR; HandleId : LPVOID; ClientToken : HANDLE; DesiredAccess : DWORD; VAR [nil] Privileges : _PRIVILEGE_SET_struct; AccessGranted : BOOL) : BOOL;
    PROCEDURE ObjectCloseAuditAlarmA* (SubsystemName : LPCSTR; HandleId : LPVOID; GenerateOnClose : BOOL) : BOOL;
    PROCEDURE ObjectCloseAuditAlarmW* (SubsystemName : LPCWSTR; HandleId : LPVOID; GenerateOnClose : BOOL) : BOOL;
    PROCEDURE ObjectDeleteAuditAlarmA* (SubsystemName : LPCSTR; HandleId : LPVOID; GenerateOnClose : BOOL) : BOOL;
    PROCEDURE ObjectDeleteAuditAlarmW* (SubsystemName : LPCWSTR; HandleId : LPVOID; GenerateOnClose : BOOL) : BOOL;
    PROCEDURE PrivilegedServiceAuditAlarmA* (SubsystemName : LPCSTR; ServiceName : LPCSTR; ClientToken : HANDLE; VAR [nil] Privileges : _PRIVILEGE_SET_struct; AccessGranted : BOOL) : BOOL;
    PROCEDURE PrivilegedServiceAuditAlarmW* (SubsystemName : LPCWSTR; ServiceName : LPCWSTR; ClientToken : HANDLE; VAR [nil] Privileges : _PRIVILEGE_SET_struct; AccessGranted : BOOL) : BOOL;
    PROCEDURE IsValidSid* (pSid : PSID) : BOOL;
    PROCEDURE EqualSid* (pSid1 : PSID; pSid2 : PSID) : BOOL;
    PROCEDURE EqualPrefixSid* (pSid1 : PSID; pSid2 : PSID) : BOOL;
    PROCEDURE GetSidLengthRequired* (nSubAuthorityCount : UCHAR) : DWORD;
    PROCEDURE AllocateAndInitializeSid* (VAR [nil] pIdentifierAuthority : _SID_IDENTIFIER_AUTHORITY_struct; nSubAuthorityCount : BYTE; nSubAuthority0 : DWORD; nSubAuthority1 : DWORD; nSubAuthority2 : DWORD; nSubAuthority3 : DWORD; nSubAuthority4 : DWORD; nSubAuthority5 : DWORD; nSubAuthority6 : DWORD; nSubAuthority7 : DWORD; VAR [nil] pSid : PSID) : BOOL;
    PROCEDURE FreeSid* (pSid : PSID) : PVOID;
    PROCEDURE InitializeSid* (Sid : PSID; VAR [nil] pIdentifierAuthority : _SID_IDENTIFIER_AUTHORITY_struct; nSubAuthorityCount : BYTE) : BOOL;
    PROCEDURE GetSidIdentifierAuthority* (pSid : PSID) : PSID_IDENTIFIER_AUTHORITY;
    PROCEDURE GetSidSubAuthority* (pSid : PSID; nSubAuthority : DWORD) : PDWORD;
    PROCEDURE GetSidSubAuthorityCount* (pSid : PSID) : PUCHAR;
    PROCEDURE GetLengthSid* (pSid : PSID) : DWORD;
    PROCEDURE CopySid* (nDestinationSidLength : DWORD; pDestinationSid : PSID; pSourceSid : PSID) : BOOL;
    PROCEDURE AreAllAccessesGranted* (GrantedAccess : DWORD; DesiredAccess : DWORD) : BOOL;
    PROCEDURE AreAnyAccessesGranted* (GrantedAccess : DWORD; DesiredAccess : DWORD) : BOOL;
    PROCEDURE MapGenericMask* (VAR [nil] AccessMask : DWORD; VAR [nil] GenericMapping : GENERIC_MAPPING);
    PROCEDURE IsValidAcl* (VAR [nil] pAcl : ACL) : BOOL;
    PROCEDURE InitializeAcl* (VAR [nil] pAcl : ACL; nAclLength : DWORD; dwAclRevision : DWORD) : BOOL;
    PROCEDURE GetAclInformation* (VAR [nil] pAcl : ACL; pAclInformation : LPVOID; nAclInformationLength : DWORD; dwAclInformationClass : ACL_INFORMATION_CLASS) : BOOL;
    PROCEDURE SetAclInformation* (VAR [nil] pAcl : ACL; pAclInformation : LPVOID; nAclInformationLength : DWORD; dwAclInformationClass : ACL_INFORMATION_CLASS) : BOOL;
    PROCEDURE AddAce* (VAR [nil] pAcl : ACL; dwAceRevision : DWORD; dwStartingAceIndex : DWORD; pAceList : LPVOID; nAceListLength : DWORD) : BOOL;
    PROCEDURE DeleteAce* (VAR [nil] pAcl : ACL; dwAceIndex : DWORD) : BOOL;
    PROCEDURE GetAce* (VAR [nil] pAcl : ACL; dwAceIndex : DWORD; VAR [nil] pAce : LPVOID) : BOOL;
    PROCEDURE AddAccessAllowedAce* (VAR [nil] pAcl : ACL; dwAceRevision : DWORD; AccessMask : DWORD; pSid : PSID) : BOOL;
    PROCEDURE AddAccessDeniedAce* (VAR [nil] pAcl : ACL; dwAceRevision : DWORD; AccessMask : DWORD; pSid : PSID) : BOOL;
    PROCEDURE AddAuditAccessAce* (VAR [nil] pAcl : ACL; dwAceRevision : DWORD; dwAccessMask : DWORD; pSid : PSID; bAuditSuccess : BOOL; bAuditFailure : BOOL) : BOOL;
    PROCEDURE FindFirstFreeAce* (VAR [nil] pAcl : ACL; VAR [nil] pAce : LPVOID) : BOOL;
    PROCEDURE InitializeSecurityDescriptor* (pSecurityDescriptor : PSECURITY_DESCRIPTOR; dwRevision : DWORD) : BOOL;
    PROCEDURE IsValidSecurityDescriptor* (pSecurityDescriptor : PSECURITY_DESCRIPTOR) : BOOL;
    PROCEDURE GetSecurityDescriptorLength* (pSecurityDescriptor : PSECURITY_DESCRIPTOR) : DWORD;
    PROCEDURE GetSecurityDescriptorControl* (pSecurityDescriptor : PSECURITY_DESCRIPTOR; VAR [nil] pControl : WORD; VAR [nil] lpdwRevision : DWORD) : BOOL;
    PROCEDURE SetSecurityDescriptorDacl* (pSecurityDescriptor : PSECURITY_DESCRIPTOR; bDaclPresent : BOOL; VAR [nil] pDacl : ACL; bDaclDefaulted : BOOL) : BOOL;
    PROCEDURE GetSecurityDescriptorDacl* (pSecurityDescriptor : PSECURITY_DESCRIPTOR; VAR [nil] lpbDaclPresent : BOOL; VAR [nil] pDacl : PACL; VAR [nil] lpbDaclDefaulted : BOOL) : BOOL;
    PROCEDURE SetSecurityDescriptorSacl* (pSecurityDescriptor : PSECURITY_DESCRIPTOR; bSaclPresent : BOOL; VAR [nil] pSacl : ACL; bSaclDefaulted : BOOL) : BOOL;
    PROCEDURE GetSecurityDescriptorSacl* (pSecurityDescriptor : PSECURITY_DESCRIPTOR; VAR [nil] lpbSaclPresent : BOOL; VAR [nil] pSacl : PACL; VAR [nil] lpbSaclDefaulted : BOOL) : BOOL;
    PROCEDURE SetSecurityDescriptorOwner* (pSecurityDescriptor : PSECURITY_DESCRIPTOR; pOwner : PSID; bOwnerDefaulted : BOOL) : BOOL;
    PROCEDURE GetSecurityDescriptorOwner* (pSecurityDescriptor : PSECURITY_DESCRIPTOR; VAR [nil] pOwner : PSID; VAR [nil] lpbOwnerDefaulted : BOOL) : BOOL;
    PROCEDURE SetSecurityDescriptorGroup* (pSecurityDescriptor : PSECURITY_DESCRIPTOR; pGroup : PSID; bGroupDefaulted : BOOL) : BOOL;
    PROCEDURE GetSecurityDescriptorGroup* (pSecurityDescriptor : PSECURITY_DESCRIPTOR; VAR [nil] pGroup : PSID; VAR [nil] lpbGroupDefaulted : BOOL) : BOOL;
    PROCEDURE CreatePrivateObjectSecurity* (ParentDescriptor : PSECURITY_DESCRIPTOR; CreatorDescriptor : PSECURITY_DESCRIPTOR; VAR [nil] NewDescriptor : PSECURITY_DESCRIPTOR; IsDirectoryObject : BOOL; Token : HANDLE; VAR [nil] GenericMapping : GENERIC_MAPPING) : BOOL;
    PROCEDURE SetPrivateObjectSecurity* (SecurityInformation : SECURITY_INFORMATION; ModificationDescriptor : PSECURITY_DESCRIPTOR; VAR [nil] ObjectsSecurityDescriptor : PSECURITY_DESCRIPTOR; VAR [nil] GenericMapping : GENERIC_MAPPING; Token : HANDLE) : BOOL;
    PROCEDURE GetPrivateObjectSecurity* (ObjectDescriptor : PSECURITY_DESCRIPTOR; SecurityInformation : SECURITY_INFORMATION; ResultantDescriptor : PSECURITY_DESCRIPTOR; DescriptorLength : DWORD; VAR [nil] ReturnLength : DWORD) : BOOL;
    PROCEDURE DestroyPrivateObjectSecurity* (VAR [nil] ObjectDescriptor : PSECURITY_DESCRIPTOR) : BOOL;
    PROCEDURE MakeSelfRelativeSD* (pAbsoluteSecurityDescriptor : PSECURITY_DESCRIPTOR; pSelfRelativeSecurityDescriptor : PSECURITY_DESCRIPTOR; VAR [nil] lpdwBufferLength : DWORD) : BOOL;
    PROCEDURE MakeAbsoluteSD* (pSelfRelativeSecurityDescriptor : PSECURITY_DESCRIPTOR; pAbsoluteSecurityDescriptor : PSECURITY_DESCRIPTOR; VAR [nil] lpdwAbsoluteSecurityDescriptorSize : DWORD; VAR [nil] pDacl : ACL; VAR [nil] lpdwDaclSize : DWORD; VAR [nil] pSacl : ACL; VAR [nil] lpdwSaclSize : DWORD; pOwner : PSID; VAR [nil] lpdwOwnerSize : DWORD; pPrimaryGroup : PSID; VAR [nil] lpdwPrimaryGroupSize : DWORD) : BOOL;
    PROCEDURE SetFileSecurityA* (lpFileName : LPCSTR; SecurityInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSECURITY_DESCRIPTOR) : BOOL;
    PROCEDURE SetFileSecurityW* (lpFileName : LPCWSTR; SecurityInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSECURITY_DESCRIPTOR) : BOOL;
    PROCEDURE GetFileSecurityA* (lpFileName : LPCSTR; RequestedInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSECURITY_DESCRIPTOR; nLength : DWORD; VAR [nil] lpnLengthNeeded : DWORD) : BOOL;
    PROCEDURE GetFileSecurityW* (lpFileName : LPCWSTR; RequestedInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSECURITY_DESCRIPTOR; nLength : DWORD; VAR [nil] lpnLengthNeeded : DWORD) : BOOL;
    PROCEDURE SetKernelObjectSecurity* (Handle : HANDLE; SecurityInformation : SECURITY_INFORMATION; SecurityDescriptor : PSECURITY_DESCRIPTOR) : BOOL;
    PROCEDURE FindFirstChangeNotificationA* (lpPathName : LPCSTR; bWatchSubtree : BOOL; dwNotifyFilter : DWORD) : HANDLE;
    PROCEDURE FindFirstChangeNotificationW* (lpPathName : LPCWSTR; bWatchSubtree : BOOL; dwNotifyFilter : DWORD) : HANDLE;
    PROCEDURE FindNextChangeNotification* (hChangeHandle : HANDLE) : BOOL;
    PROCEDURE FindCloseChangeNotification* (hChangeHandle : HANDLE) : BOOL;
    PROCEDURE ReadDirectoryChangesW* (hDirectory : HANDLE; lpBuffer : LPVOID; nBufferLength : DWORD; bWatchSubtree : BOOL; dwNotifyFilter : DWORD; VAR [nil] lpBytesReturned : DWORD; VAR [nil] lpOverlapped : _OVERLAPPED_struct; lpCompletionRoutine : LPOVERLAPPED_COMPLETION_ROUTINE) : BOOL;
    PROCEDURE VirtualLock* (lpAddress : LPVOID; dwSize : DWORD) : BOOL;
    PROCEDURE VirtualUnlock* (lpAddress : LPVOID; dwSize : DWORD) : BOOL;
    PROCEDURE MapViewOfFileEx* (hFileMappingObject : HANDLE; dwDesiredAccess : DWORD; dwFileOffsetHigh : DWORD; dwFileOffsetLow : DWORD; dwNumberOfBytesToMap : DWORD; lpBaseAddress : LPVOID) : LPVOID;
    PROCEDURE SetPriorityClass* (hProcess : HANDLE; dwPriorityClass : DWORD) : BOOL;
    PROCEDURE GetPriorityClass* (hProcess : HANDLE) : DWORD;
    PROCEDURE IsBadReadPtr* (lp : LPVOID; ucb : UINT) : BOOL;
    PROCEDURE IsBadWritePtr* (lp : LPVOID; ucb : UINT) : BOOL;
    PROCEDURE IsBadHugeReadPtr* (lp : LPVOID; ucb : UINT) : BOOL;
    PROCEDURE IsBadHugeWritePtr* (lp : LPVOID; ucb : UINT) : BOOL;
    PROCEDURE IsBadCodePtr* (lpfn : FARPROC) : BOOL;
    PROCEDURE IsBadStringPtrA* (lpsz : LPCSTR; ucchMax : UINT) : BOOL;
    PROCEDURE IsBadStringPtrW* (lpsz : LPCWSTR; ucchMax : UINT) : BOOL;
    PROCEDURE LookupAccountSidA* (lpSystemName : LPCSTR; Sid : PSID; Name : LPSTR; VAR [nil] cbName : DWORD; ReferencedDomainName : LPSTR; VAR [nil] cbReferencedDomainName : DWORD; peUse : PSID_NAME_USE) : BOOL;
    PROCEDURE LookupAccountSidW* (lpSystemName : LPCWSTR; Sid : PSID; Name : LPWSTR; VAR [nil] cbName : DWORD; ReferencedDomainName : LPWSTR; VAR [nil] cbReferencedDomainName : DWORD; peUse : PSID_NAME_USE) : BOOL;
    PROCEDURE LookupAccountNameA* (lpSystemName : LPCSTR; lpAccountName : LPCSTR; Sid : PSID; VAR [nil] cbSid : DWORD; ReferencedDomainName : LPSTR; VAR [nil] cbReferencedDomainName : DWORD; peUse : PSID_NAME_USE) : BOOL;
    PROCEDURE LookupAccountNameW* (lpSystemName : LPCWSTR; lpAccountName : LPCWSTR; Sid : PSID; VAR [nil] cbSid : DWORD; ReferencedDomainName : LPWSTR; VAR [nil] cbReferencedDomainName : DWORD; peUse : PSID_NAME_USE) : BOOL;
    PROCEDURE LookupPrivilegeValueA* (lpSystemName : LPCSTR; lpName : LPCSTR; VAR [nil] lpLuid : _LUID_struct) : BOOL;
    PROCEDURE LookupPrivilegeValueW* (lpSystemName : LPCWSTR; lpName : LPCWSTR; VAR [nil] lpLuid : _LUID_struct) : BOOL;
    PROCEDURE LookupPrivilegeNameA* (lpSystemName : LPCSTR; VAR [nil] lpLuid : _LUID_struct; lpName : LPSTR; VAR [nil] cbName : DWORD) : BOOL;
    PROCEDURE LookupPrivilegeNameW* (lpSystemName : LPCWSTR; VAR [nil] lpLuid : _LUID_struct; lpName : LPWSTR; VAR [nil] cbName : DWORD) : BOOL;
    PROCEDURE LookupPrivilegeDisplayNameA* (lpSystemName : LPCSTR; lpName : LPCSTR; lpDisplayName : LPSTR; VAR [nil] cbDisplayName : DWORD; VAR [nil] lpLanguageId : DWORD) : BOOL;
    PROCEDURE LookupPrivilegeDisplayNameW* (lpSystemName : LPCWSTR; lpName : LPCWSTR; lpDisplayName : LPWSTR; VAR [nil] cbDisplayName : DWORD; VAR [nil] lpLanguageId : DWORD) : BOOL;
    PROCEDURE AllocateLocallyUniqueId* (VAR [nil] Luid : _LUID_struct) : BOOL;
    PROCEDURE BuildCommDCBA* (lpDef : LPCSTR; VAR [nil] lpDCB : _DCB_struct) : BOOL;
    PROCEDURE BuildCommDCBW* (lpDef : LPCWSTR; VAR [nil] lpDCB : _DCB_struct) : BOOL;
    PROCEDURE BuildCommDCBAndTimeoutsA* (lpDef : LPCSTR; VAR [nil] lpDCB : _DCB_struct; VAR [nil] lpCommTimeouts : _COMMTIMEOUTS_struct) : BOOL;
    PROCEDURE BuildCommDCBAndTimeoutsW* (lpDef : LPCWSTR; VAR [nil] lpDCB : _DCB_struct; VAR [nil] lpCommTimeouts : _COMMTIMEOUTS_struct) : BOOL;
    PROCEDURE CommConfigDialogA* (lpszName : LPCSTR; hWnd : HWND; VAR [nil] lpCC : _COMMCONFIG_struct) : BOOL;
    PROCEDURE CommConfigDialogW* (lpszName : LPCWSTR; hWnd : HWND; VAR [nil] lpCC : _COMMCONFIG_struct) : BOOL;
    PROCEDURE GetDefaultCommConfigA* (lpszName : LPCSTR; VAR [nil] lpCC : _COMMCONFIG_struct; VAR [nil] lpdwSize : DWORD) : BOOL;
    PROCEDURE GetDefaultCommConfigW* (lpszName : LPCWSTR; VAR [nil] lpCC : _COMMCONFIG_struct; VAR [nil] lpdwSize : DWORD) : BOOL;
    PROCEDURE SetDefaultCommConfigA* (lpszName : LPCSTR; VAR [nil] lpCC : _COMMCONFIG_struct; dwSize : DWORD) : BOOL;
    PROCEDURE SetDefaultCommConfigW* (lpszName : LPCWSTR; VAR [nil] lpCC : _COMMCONFIG_struct; dwSize : DWORD) : BOOL;
    PROCEDURE GetComputerNameA* (lpBuffer : LPSTR; VAR [nil] nSize : DWORD) : BOOL;
    PROCEDURE GetComputerNameW* (lpBuffer : LPWSTR; VAR [nil] nSize : DWORD) : BOOL;
    PROCEDURE SetComputerNameA* (lpComputerName : LPCSTR) : BOOL;
    PROCEDURE SetComputerNameW* (lpComputerName : LPCWSTR) : BOOL;
    PROCEDURE GetUserNameA* (lpBuffer : LPSTR; VAR [nil] nSize : DWORD) : BOOL;
    PROCEDURE GetUserNameW* (lpBuffer : LPWSTR; VAR [nil] nSize : DWORD) : BOOL;
    PROCEDURE LogonUserA* (lpszUsername : LPSTR; lpszDomain : LPSTR; lpszPassword : LPSTR; dwLogonType : DWORD; dwLogonProvider : DWORD; VAR [nil] phToken : HANDLE) : BOOL;
    PROCEDURE LogonUserW* (lpszUsername : LPWSTR; lpszDomain : LPWSTR; lpszPassword : LPWSTR; dwLogonType : DWORD; dwLogonProvider : DWORD; VAR [nil] phToken : HANDLE) : BOOL;
    PROCEDURE ImpersonateLoggedOnUser* (hToken : HANDLE) : BOOL;
    PROCEDURE CreateProcessAsUserA* (hToken : HANDLE; lpApplicationName : LPCSTR; lpCommandLine : LPSTR; VAR [nil] lpProcessAttributes : _SECURITY_ATTRIBUTES_struct; VAR [nil] lpThreadAttributes : _SECURITY_ATTRIBUTES_struct; bInheritHandles : BOOL; dwCreationFlags : DWORD; lpEnvironment : LPVOID; lpCurrentDirectory : LPCSTR; VAR [nil] lpStartupInfo : _STARTUPINFOA_struct; VAR [nil] lpProcessInformation : _PROCESS_INFORMATION_struct) : BOOL;
    PROCEDURE CreateProcessAsUserW* (hToken : HANDLE; lpApplicationName : LPCWSTR; lpCommandLine : LPWSTR; VAR [nil] lpProcessAttributes : _SECURITY_ATTRIBUTES_struct; VAR [nil] lpThreadAttributes : _SECURITY_ATTRIBUTES_struct; bInheritHandles : BOOL; dwCreationFlags : DWORD; lpEnvironment : LPVOID; lpCurrentDirectory : LPCWSTR; VAR [nil] lpStartupInfo : _STARTUPINFOW_struct; VAR [nil] lpProcessInformation : _PROCESS_INFORMATION_struct) : BOOL;
    PROCEDURE DuplicateTokenEx* (hExistingToken : HANDLE; dwDesiredAccess : DWORD; VAR [nil] lpTokenAttributes : _SECURITY_ATTRIBUTES_struct; ImpersonationLevel : SECURITY_IMPERSONATION_LEVEL; TokenType : TOKEN_TYPE; VAR [nil] phNewToken : HANDLE) : BOOL;
    PROCEDURE CreateRestrictedToken* (ExistingTokenHandle : HANDLE; Flags : DWORD; DisableSidCount : DWORD; VAR [nil] SidsToDisable : _SID_AND_ATTRIBUTES_struct; DeletePrivilegeCount : DWORD; VAR [nil] PrivilegesToDelete : _LUID_AND_ATTRIBUTES_struct; RestrictedSidCount : DWORD; VAR [nil] SidsToRestrict : _SID_AND_ATTRIBUTES_struct; VAR [nil] NewTokenHandle : HANDLE) : BOOL;
    PROCEDURE IsTokenRestricted* (TokenHandle : HANDLE) : BOOL;
    PROCEDURE GetCurrentHwProfileA* (VAR [nil] lpHwProfileInfo : tagHW_PROFILE_INFOA_struct) : BOOL;
    PROCEDURE GetCurrentHwProfileW* (VAR [nil] lpHwProfileInfo : tagHW_PROFILE_INFOW_struct) : BOOL;
    PROCEDURE QueryPerformanceCounter* (VAR [nil] lpPerformanceCount : LARGE_INTEGER) : BOOL;
    PROCEDURE QueryPerformanceFrequency* (VAR [nil] lpFrequency : LARGE_INTEGER) : BOOL;
    PROCEDURE GetVersionExA* (VAR [nil] lpVersionInformation : _OSVERSIONINFOA_struct) : BOOL;
    PROCEDURE GetVersionExW* (VAR [nil] lpVersionInformation : _OSVERSIONINFOW_struct) : BOOL;
    PROCEDURE GetSystemPowerStatus* (VAR [nil] lpSystemPowerStatus : _SYSTEM_POWER_STATUS_struct) : BOOL;
    PROCEDURE SetSystemPowerState* (fSuspend : BOOL; fForce : BOOL) : BOOL;
    PROCEDURE WinSubmitCertificate* (VAR [nil] lpCertificate : _WIN_CERTIFICATE_struct) : BOOL;
    PROCEDURE WinVerifyTrust* (hwnd : HWND; VAR [nil] ActionID : GUID; ActionData : LPVOID) : LONG;
    PROCEDURE WinLoadTrustProvider* (VAR [nil] ActionID : GUID) : BOOL;
    PROCEDURE AddFontResourceA* (p0 : LPCSTR) : LONGINT;
    PROCEDURE AddFontResourceW* (p0 : LPCWSTR) : LONGINT;
    PROCEDURE AnimatePalette* (p0 : HPALETTE; p1 : UINT; p2 : UINT; VAR [nil] p3 : PALETTEENTRY) : BOOL;
    PROCEDURE Arc* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : LONGINT; p6 : LONGINT; p7 : LONGINT; p8 : LONGINT) : BOOL;
    PROCEDURE BitBlt* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : HDC; p6 : LONGINT; p7 : LONGINT; p8 : DWORD) : BOOL;
    PROCEDURE CancelDC* (p0 : HDC) : BOOL;
    PROCEDURE Chord* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : LONGINT; p6 : LONGINT; p7 : LONGINT; p8 : LONGINT) : BOOL;
    PROCEDURE ChoosePixelFormat* (p0 : HDC; VAR [nil] p1 : PIXELFORMATDESCRIPTOR) : LONGINT;
    PROCEDURE CloseMetaFile* (p0 : HDC) : HMETAFILE;
    PROCEDURE CombineRgn* (p0 : HRGN; p1 : HRGN; p2 : HRGN; p3 : LONGINT) : LONGINT;
    PROCEDURE CopyMetaFileA* (p0 : HMETAFILE; p1 : LPCSTR) : HMETAFILE;
    PROCEDURE CopyMetaFileW* (p0 : HMETAFILE; p1 : LPCWSTR) : HMETAFILE;
    PROCEDURE CreateBitmap* (p0 : LONGINT; p1 : LONGINT; p2 : UINT; p3 : UINT; p4 : LPVOID) : HBITMAP;
    PROCEDURE CreateBitmapIndirect* (VAR [nil] p0 : BITMAP) : HBITMAP;
    PROCEDURE CreateBrushIndirect* (VAR [nil] p0 : LOGBRUSH) : HBRUSH;
    PROCEDURE CreateCompatibleBitmap* (p0 : HDC; p1 : LONGINT; p2 : LONGINT) : HBITMAP;
    PROCEDURE CreateDiscardableBitmap* (p0 : HDC; p1 : LONGINT; p2 : LONGINT) : HBITMAP;
    PROCEDURE CreateCompatibleDC* (p0 : HDC) : HDC;
    PROCEDURE CreateDCA* (p0 : LPCSTR; p1 : LPCSTR; p2 : LPCSTR; VAR [nil] p3 : DEVMODEA) : HDC;
    PROCEDURE CreateDCW* (p0 : LPCWSTR; p1 : LPCWSTR; p2 : LPCWSTR; VAR [nil] p3 : DEVMODEW) : HDC;
    PROCEDURE CreateDIBitmap* (p0 : HDC; VAR [nil] p1 : BITMAPINFOHEADER; p2 : DWORD; p3 : LPVOID; VAR [nil] p4 : BITMAPINFO; p5 : UINT) : HBITMAP;
    PROCEDURE CreateDIBPatternBrush* (p0 : HGLOBAL; p1 : UINT) : HBRUSH;
    PROCEDURE CreateDIBPatternBrushPt* (p0 : LPVOID; p1 : UINT) : HBRUSH;
    PROCEDURE CreateEllipticRgn* (p0 : LONGINT; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT) : HRGN;
    PROCEDURE CreateEllipticRgnIndirect* (VAR [nil] p0 : RECT) : HRGN;
    PROCEDURE CreateFontIndirectA* (VAR [nil] p0 : LOGFONTA) : HFONT;
    PROCEDURE CreateFontIndirectW* (VAR [nil] p0 : LOGFONTW) : HFONT;
    PROCEDURE CreateFontA* (p0 : LONGINT; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : DWORD; p6 : DWORD; p7 : DWORD; p8 : DWORD; p9 : DWORD; p10 : DWORD; p11 : DWORD; p12 : DWORD; p13 : LPCSTR) : HFONT;
    PROCEDURE CreateFontW* (p0 : LONGINT; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : DWORD; p6 : DWORD; p7 : DWORD; p8 : DWORD; p9 : DWORD; p10 : DWORD; p11 : DWORD; p12 : DWORD; p13 : LPCWSTR) : HFONT;
    PROCEDURE CreateHatchBrush* (p0 : LONGINT; p1 : COLORREF) : HBRUSH;
    PROCEDURE CreateICA* (p0 : LPCSTR; p1 : LPCSTR; p2 : LPCSTR; VAR [nil] p3 : DEVMODEA) : HDC;
    PROCEDURE CreateICW* (p0 : LPCWSTR; p1 : LPCWSTR; p2 : LPCWSTR; VAR [nil] p3 : DEVMODEW) : HDC;
    PROCEDURE CreateMetaFileA* (p0 : LPCSTR) : HDC;
    PROCEDURE CreateMetaFileW* (p0 : LPCWSTR) : HDC;
    PROCEDURE CreatePalette* (VAR [nil] p0 : LOGPALETTE) : HPALETTE;
    PROCEDURE CreatePen* (p0 : LONGINT; p1 : LONGINT; p2 : COLORREF) : HPEN;
    PROCEDURE CreatePenIndirect* (VAR [nil] p0 : LOGPEN) : HPEN;
    PROCEDURE CreatePolyPolygonRgn* (VAR [nil] p0 : POINT; VAR [nil] p1 : INT; p2 : LONGINT; p3 : LONGINT) : HRGN;
    PROCEDURE CreatePatternBrush* (p0 : HBITMAP) : HBRUSH;
    PROCEDURE CreateRectRgn* (p0 : LONGINT; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT) : HRGN;
    PROCEDURE CreateRectRgnIndirect* (VAR [nil] p0 : RECT) : HRGN;
    PROCEDURE CreateRoundRectRgn* (p0 : LONGINT; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : LONGINT) : HRGN;
    PROCEDURE CreateScalableFontResourceA* (p0 : DWORD; p1 : LPCSTR; p2 : LPCSTR; p3 : LPCSTR) : BOOL;
    PROCEDURE CreateScalableFontResourceW* (p0 : DWORD; p1 : LPCWSTR; p2 : LPCWSTR; p3 : LPCWSTR) : BOOL;
    PROCEDURE CreateSolidBrush* (p0 : COLORREF) : HBRUSH;
    PROCEDURE DeleteDC* (p0 : HDC) : BOOL;
    PROCEDURE DeleteMetaFile* (p0 : HMETAFILE) : BOOL;
    PROCEDURE DeleteObject* (p0 : HGDIOBJ) : BOOL;
    PROCEDURE DescribePixelFormat* (p0 : HDC; p1 : LONGINT; p2 : UINT; VAR [nil] p3 : tagPIXELFORMATDESCRIPTOR_struct) : LONGINT;
    PROCEDURE DeviceCapabilitiesA* (p0 : LPCSTR; p1 : LPCSTR; p2 : WORD; p3 : LPSTR; VAR [nil] p4 : DEVMODEA) : LONGINT;
    PROCEDURE DeviceCapabilitiesW* (p0 : LPCWSTR; p1 : LPCWSTR; p2 : WORD; p3 : LPWSTR; VAR [nil] p4 : DEVMODEW) : LONGINT;
    PROCEDURE DrawEscape* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LPCSTR) : LONGINT;
    PROCEDURE Ellipse* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT) : BOOL;
    PROCEDURE EnumFontFamiliesExA* (p0 : HDC; VAR [nil] p1 : tagLOGFONTA_struct; p2 : FONTENUMPROCA; p3 : LPARAM; p4 : DWORD) : LONGINT;
    PROCEDURE EnumFontFamiliesExW* (p0 : HDC; VAR [nil] p1 : tagLOGFONTW_struct; p2 : FONTENUMPROCW; p3 : LPARAM; p4 : DWORD) : LONGINT;
    PROCEDURE EnumFontFamiliesA* (p0 : HDC; p1 : LPCSTR; p2 : FONTENUMPROCA; p3 : LPARAM) : LONGINT;
    PROCEDURE EnumFontFamiliesW* (p0 : HDC; p1 : LPCWSTR; p2 : FONTENUMPROCW; p3 : LPARAM) : LONGINT;
    PROCEDURE EnumFontsA* (p0 : HDC; p1 : LPCSTR; p2 : FONTENUMPROCA; p3 : LPARAM) : LONGINT;
    PROCEDURE EnumFontsW* (p0 : HDC; p1 : LPCWSTR; p2 : FONTENUMPROCW; p3 : LPARAM) : LONGINT;
    PROCEDURE EnumObjects* (p0 : HDC; p1 : LONGINT; p2 : GOBJENUMPROC; p3 : LPVOID) : LONGINT;
    PROCEDURE EqualRgn* (p0 : HRGN; p1 : HRGN) : BOOL;
    PROCEDURE Escape* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LPCSTR; p4 : LPVOID) : LONGINT;
    PROCEDURE ExtEscape* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LPCSTR; p4 : LONGINT; p5 : LPSTR) : LONGINT;
    PROCEDURE ExcludeClipRect* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT) : LONGINT;
    PROCEDURE ExtCreateRegion* (VAR [nil] p0 : XFORM; p1 : DWORD; VAR [nil] p2 : RGNDATA) : HRGN;
    PROCEDURE ExtFloodFill* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : COLORREF; p4 : UINT) : BOOL;
    PROCEDURE FillRgn* (p0 : HDC; p1 : HRGN; p2 : HBRUSH) : BOOL;
    PROCEDURE FloodFill* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : COLORREF) : BOOL;
    PROCEDURE FrameRgn* (p0 : HDC; p1 : HRGN; p2 : HBRUSH; p3 : LONGINT; p4 : LONGINT) : BOOL;
    PROCEDURE GetROP2* (p0 : HDC) : LONGINT;
    PROCEDURE GetAspectRatioFilterEx* (p0 : HDC; VAR [nil] p1 : tagSIZE_struct) : BOOL;
    PROCEDURE GetBkColor* (p0 : HDC) : COLORREF;
    PROCEDURE GetBkMode* (p0 : HDC) : LONGINT;
    PROCEDURE GetBitmapBits* (p0 : HBITMAP; p1 : LONG; p2 : LPVOID) : LONG;
    PROCEDURE GetBitmapDimensionEx* (p0 : HBITMAP; VAR [nil] p1 : tagSIZE_struct) : BOOL;
    PROCEDURE GetBoundsRect* (p0 : HDC; VAR [nil] p1 : tagRECT_struct; p2 : UINT) : UINT;
    PROCEDURE GetBrushOrgEx* (p0 : HDC; VAR [nil] p1 : tagPOINT_struct) : BOOL;
    PROCEDURE GetCharWidthA* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : LONGINT) : BOOL;
    PROCEDURE GetCharWidthW* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : LONGINT) : BOOL;
    PROCEDURE GetCharWidth32A* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : LONGINT) : BOOL;
    PROCEDURE GetCharWidth32W* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : LONGINT) : BOOL;
    PROCEDURE GetCharWidthFloatA* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : FLOAT) : BOOL;
    PROCEDURE GetCharWidthFloatW* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : FLOAT) : BOOL;
    PROCEDURE GetCharABCWidthsA* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : _ABC_struct) : BOOL;
    PROCEDURE GetCharABCWidthsW* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : _ABC_struct) : BOOL;
    PROCEDURE GetCharABCWidthsFloatA* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : _ABCFLOAT_struct) : BOOL;
    PROCEDURE GetCharABCWidthsFloatW* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : _ABCFLOAT_struct) : BOOL;
    PROCEDURE GetClipBox* (p0 : HDC; VAR [nil] p1  : tagRECT_struct) : LONGINT;
    PROCEDURE GetClipRgn* (p0 : HDC; p1 : HRGN) : LONGINT;
    PROCEDURE GetMetaRgn* (p0 : HDC; p1 : HRGN) : LONGINT;
    PROCEDURE GetCurrentObject* (p0 : HDC; p1 : UINT) : HGDIOBJ;
    PROCEDURE GetCurrentPositionEx* (p0 : HDC; VAR [nil] p1 : tagPOINT_struct) : BOOL;
    PROCEDURE GetDeviceCaps* (p0 : HDC; p1 : LONGINT) : LONGINT;
    PROCEDURE GetDIBits* (p0 : HDC; p1 : HBITMAP; p2 : UINT; p3 : UINT; p4 : LPVOID; VAR [nil] p5 : tagBITMAPINFO_struct; p6 : UINT) : LONGINT;
    PROCEDURE GetFontData* (p0 : HDC; p1 : DWORD; p2 : DWORD; p3 : LPVOID; p4 : DWORD) : DWORD;
    PROCEDURE GetGlyphOutlineA* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : _GLYPHMETRICS_struct; p4 : DWORD; p5 : LPVOID; VAR [nil] p6 : MAT2) : DWORD;
    PROCEDURE GetGlyphOutlineW* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : _GLYPHMETRICS_struct; p4 : DWORD; p5 : LPVOID; VAR [nil] p6 : MAT2) : DWORD;
    PROCEDURE GetGraphicsMode* (p0 : HDC) : LONGINT;
    PROCEDURE GetMapMode* (p0 : HDC) : LONGINT;
    PROCEDURE GetMetaFileBitsEx* (p0 : HMETAFILE; p1 : UINT; p2 : LPVOID) : UINT;
    PROCEDURE GetMetaFileA* (p0 : LPCSTR) : HMETAFILE;
    PROCEDURE GetMetaFileW* (p0 : LPCWSTR) : HMETAFILE;
    PROCEDURE GetNearestColor* (p0 : HDC; p1 : COLORREF) : COLORREF;
    PROCEDURE GetNearestPaletteIndex* (p0 : HPALETTE; p1 : COLORREF) : UINT;
    PROCEDURE GetObjectType* (h : HGDIOBJ) : DWORD;
    PROCEDURE GetOutlineTextMetricsA* (p0 : HDC; p1 : UINT; VAR [nil] p2 : _OUTLINETEXTMETRICA_struct) : UINT;
    PROCEDURE GetOutlineTextMetricsW* (p0 : HDC; p1 : UINT; VAR [nil] p2 : _OUTLINETEXTMETRICW_struct) : UINT;
    PROCEDURE GetPaletteEntries* (p0 : HPALETTE; p1 : UINT; p2 : UINT; VAR [nil] p3 : tagPALETTEENTRY_struct) : UINT;
    PROCEDURE GetPixel* (p0 : HDC; p1 : LONGINT; p2 : LONGINT) : COLORREF;
    PROCEDURE GetPixelFormat* (p0 : HDC) : LONGINT;
    PROCEDURE GetPolyFillMode* (p0 : HDC) : LONGINT;
    PROCEDURE GetRasterizerCaps* (VAR [nil] p0 : _RASTERIZER_STATUS_struct; p1 : UINT) : BOOL;
    PROCEDURE GetRegionData* (p0 : HRGN; p1 : DWORD; VAR [nil] p2 : _RGNDATA_struct) : DWORD;
    PROCEDURE GetRgnBox* (p0 : HRGN; VAR [nil] p1 : tagRECT_struct) : LONGINT;
    PROCEDURE GetStockObject* (p0 : LONGINT) : HGDIOBJ;
    PROCEDURE GetStretchBltMode* (p0 : HDC) : LONGINT;
    PROCEDURE GetSystemPaletteEntries* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : tagPALETTEENTRY_struct) : UINT;
    PROCEDURE GetSystemPaletteUse* (p0 : HDC) : UINT;
    PROCEDURE GetTextCharacterExtra* (p0 : HDC) : LONGINT;
    PROCEDURE GetTextAlign* (p0 : HDC) : UINT;
    PROCEDURE GetTextColor* (p0 : HDC) : COLORREF;
    PROCEDURE GetTextExtentPointA* (p0 : HDC; p1 : LPCSTR; p2 : LONGINT; VAR [nil] p3 : tagSIZE_struct) : BOOL;
    PROCEDURE GetTextExtentPointW* (p0 : HDC; p1 : LPCWSTR; p2 : LONGINT; VAR [nil] p3 : tagSIZE_struct) : BOOL;
    PROCEDURE GetTextExtentPoint32A* (p0 : HDC; p1 : LPCSTR; p2 : LONGINT; VAR [nil] p3 : tagSIZE_struct) : BOOL;
    PROCEDURE GetTextExtentPoint32W* (p0 : HDC; p1 : LPCWSTR; p2 : LONGINT; VAR [nil] p3 : tagSIZE_struct) : BOOL;
    PROCEDURE GetTextExtentExPointA* (p0 : HDC; p1 : LPCSTR; p2 : LONGINT; p3 : LONGINT; VAR [nil] p4 : LONGINT; VAR [nil] p5 : LONGINT; VAR [nil] p6 : tagSIZE_struct) : BOOL;
    PROCEDURE GetTextExtentExPointW* (p0 : HDC; p1 : LPCWSTR; p2 : LONGINT; p3 : LONGINT; VAR [nil] p4 : LONGINT; VAR [nil] p5 : LONGINT; VAR [nil] p6 : tagSIZE_struct) : BOOL;
    PROCEDURE GetTextCharset* (hdc : HDC) : LONGINT;
    PROCEDURE GetTextCharsetInfo* (hdc : HDC; VAR [nil] lpSig : tagFONTSIGNATURE_struct; dwFlags : DWORD) : LONGINT;
    PROCEDURE TranslateCharsetInfo* (VAR [nil] lpSrc : DWORD; VAR [nil] lpCs : tagCHARSETINFO_struct; dwFlags : DWORD) : BOOL;
    PROCEDURE GetFontLanguageInfo* (p0 : HDC) : DWORD;
    PROCEDURE GetCharacterPlacementA* (p0 : HDC; p1 : LPCSTR; p2 : LONGINT; p3 : LONGINT; VAR [nil] p4 : tagGCP_RESULTSA_struct; p5 : DWORD) : DWORD;
    PROCEDURE GetCharacterPlacementW* (p0 : HDC; p1 : LPCWSTR; p2 : LONGINT; p3 : LONGINT; VAR [nil] p4 : tagGCP_RESULTSW_struct; p5 : DWORD) : DWORD;
    PROCEDURE GetViewportExtEx* (p0 : HDC; VAR [nil] p1 : tagSIZE_struct) : BOOL;
    PROCEDURE GetViewportOrgEx* (p0 : HDC; VAR [nil] p1 : tagPOINT_struct) : BOOL;
    PROCEDURE GetWindowExtEx* (p0 : HDC; VAR [nil] p1 : tagSIZE_struct) : BOOL;
    PROCEDURE GetWindowOrgEx* (p0 : HDC; VAR [nil] p1 : tagPOINT_struct) : BOOL;
    PROCEDURE IntersectClipRect* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT) : LONGINT;
    PROCEDURE InvertRgn* (p0 : HDC; p1 : HRGN) : BOOL;
    PROCEDURE LineDDA* (p0 : LONGINT; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LINEDDAPROC; p5 : LPARAM) : BOOL;
    PROCEDURE LineTo* (p0 : HDC; p1 : LONGINT; p2 : LONGINT) : BOOL;
    PROCEDURE MaskBlt* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : HDC; p6 : LONGINT; p7 : LONGINT; p8 : HBITMAP; p9 : LONGINT; p10 : LONGINT; p11 : DWORD) : BOOL;
    PROCEDURE PlgBlt* (p0 : HDC; VAR [nil] p1 : POINT; p2 : HDC; p3 : LONGINT; p4 : LONGINT; p5 : LONGINT; p6 : LONGINT; p7 : HBITMAP; p8 : LONGINT; p9 : LONGINT) : BOOL;
    PROCEDURE OffsetClipRgn* (p0 : HDC; p1 : LONGINT; p2 : LONGINT) : LONGINT;
    PROCEDURE OffsetRgn* (p0 : HRGN; p1 : LONGINT; p2 : LONGINT) : LONGINT;
    PROCEDURE PatBlt* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : DWORD) : BOOL;
    PROCEDURE Pie* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : LONGINT; p6 : LONGINT; p7 : LONGINT; p8 : LONGINT) : BOOL;
    PROCEDURE PlayMetaFile* (p0 : HDC; p1 : HMETAFILE) : BOOL;
    PROCEDURE PaintRgn* (p0 : HDC; p1 : HRGN) : BOOL;
    PROCEDURE PolyPolygon* (p0 : HDC; VAR [nil] p1 : POINT; VAR [nil] p2 : INT; p3 : LONGINT) : BOOL;
    PROCEDURE PtInRegion* (p0 : HRGN; p1 : LONGINT; p2 : LONGINT) : BOOL;
    PROCEDURE PtVisible* (p0 : HDC; p1 : LONGINT; p2 : LONGINT) : BOOL;
    PROCEDURE RectInRegion* (p0 : HRGN; VAR [nil] p1 : RECT) : BOOL;
    PROCEDURE RectVisible* (p0 : HDC; VAR [nil] p1 : RECT) : BOOL;
    PROCEDURE Rectangle* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT) : BOOL;
    PROCEDURE RestoreDC* (p0 : HDC; p1 : LONGINT) : BOOL;
    PROCEDURE ResetDCA* (p0 : HDC; VAR [nil] p1 : DEVMODEA) : HDC;
    PROCEDURE ResetDCW* (p0 : HDC; VAR [nil] p1 : DEVMODEW) : HDC;
    PROCEDURE RealizePalette* (p0 : HDC) : UINT;
    PROCEDURE RemoveFontResourceA* (p0 : LPCSTR) : BOOL;
    PROCEDURE RemoveFontResourceW* (p0 : LPCWSTR) : BOOL;
    PROCEDURE RoundRect* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : LONGINT; p6 : LONGINT) : BOOL;
    PROCEDURE ResizePalette* (p0 : HPALETTE; p1 : UINT) : BOOL;
    PROCEDURE SaveDC* (p0 : HDC) : LONGINT;
    PROCEDURE SelectClipRgn* (p0 : HDC; p1 : HRGN) : LONGINT;
    PROCEDURE ExtSelectClipRgn* (p0 : HDC; p1 : HRGN; p2 : LONGINT) : LONGINT;
    PROCEDURE SetMetaRgn* (p0 : HDC) : LONGINT;
    PROCEDURE SelectObject* (p0 : HDC; p1 : HGDIOBJ) : HGDIOBJ;
    PROCEDURE SelectPalette* (p0 : HDC; p1 : HPALETTE; p2 : BOOL) : HPALETTE;
    PROCEDURE SetBkColor* (p0 : HDC; p1 : COLORREF) : COLORREF;
    PROCEDURE SetBkMode* (p0 : HDC; p1 : LONGINT) : LONGINT;
    PROCEDURE SetBitmapBits* (p0 : HBITMAP; p1 : DWORD; p2 : LPVOID) : LONG;
    PROCEDURE SetBoundsRect* (p0 : HDC; VAR [nil] p1 : RECT; p2 : UINT) : UINT;
    PROCEDURE SetDIBits* (p0 : HDC; p1 : HBITMAP; p2 : UINT; p3 : UINT; p4 : LPVOID; VAR [nil] p5 : BITMAPINFO; p6 : UINT) : LONGINT;
    PROCEDURE SetDIBitsToDevice* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : DWORD; p4 : DWORD; p5 : LONGINT; p6 : LONGINT; p7 : UINT; p8 : UINT; p9 : LPVOID; VAR [nil] p10 : BITMAPINFO; p11 : UINT) : LONGINT;
    PROCEDURE SetMapperFlags* (p0 : HDC; p1 : DWORD) : DWORD;
    PROCEDURE SetGraphicsMode* (hdc : HDC; iMode : LONGINT) : LONGINT;
    PROCEDURE SetMapMode* (p0 : HDC; p1 : LONGINT) : LONGINT;
    PROCEDURE SetMetaFileBitsEx* (p0 : UINT; p1 : PBYTE) : HMETAFILE;
    PROCEDURE SetPaletteEntries* (p0 : HPALETTE; p1 : UINT; p2 : UINT; VAR [nil] p3 : PALETTEENTRY) : UINT;
    PROCEDURE SetPixel* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : COLORREF) : COLORREF;
    PROCEDURE SetPixelV* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : COLORREF) : BOOL;
    PROCEDURE SetPixelFormat* (p0 : HDC; p1 : LONGINT; VAR [nil] p2 : PIXELFORMATDESCRIPTOR) : BOOL;
    PROCEDURE SetPolyFillMode* (p0 : HDC; p1 : LONGINT) : LONGINT;
    PROCEDURE StretchBlt* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : HDC; p6 : LONGINT; p7 : LONGINT; p8 : LONGINT; p9 : LONGINT; p10 : DWORD) : BOOL;
    PROCEDURE SetRectRgn* (p0 : HRGN; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT) : BOOL;
    PROCEDURE StretchDIBits* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : LONGINT; p6 : LONGINT; p7 : LONGINT; p8 : LONGINT; p9 : LPVOID; VAR [nil] p10 : BITMAPINFO; p11 : UINT; p12 : DWORD) : LONGINT;
    PROCEDURE SetROP2* (p0 : HDC; p1 : LONGINT) : LONGINT;
    PROCEDURE SetStretchBltMode* (p0 : HDC; p1 : LONGINT) : LONGINT;
    PROCEDURE SetSystemPaletteUse* (p0 : HDC; p1 : UINT) : UINT;
    PROCEDURE SetTextCharacterExtra* (p0 : HDC; p1 : LONGINT) : LONGINT;
    PROCEDURE SetTextColor* (p0 : HDC; p1 : COLORREF) : COLORREF;
    PROCEDURE SetTextAlign* (p0 : HDC; p1 : UINT) : UINT;
    PROCEDURE SetTextJustification* (p0 : HDC; p1 : LONGINT; p2 : LONGINT) : BOOL;
    PROCEDURE UpdateColors* (p0 : HDC) : BOOL;
    PROCEDURE AlphaBlend* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : HDC; p6 : LONGINT; p7 : LONGINT; p8 : LONGINT; p9 : LONGINT; p10 : BLENDFUNCTION) : BOOL;
    PROCEDURE AlphaDIBBlend* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : LPVOID; VAR [nil] p6 : BITMAPINFO; p7 : UINT; p8 : LONGINT; p9 : LONGINT; p10 : LONGINT; p11 : LONGINT; p12 : BLENDFUNCTION) : BOOL;
    PROCEDURE TransparentBlt* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : HDC; p6 : LONGINT; p7 : LONGINT; p8 : LONGINT; p9 : LONGINT; p10 : UINT) : BOOL;
    PROCEDURE TransparentDIBits* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : LPVOID; VAR [nil] p6 : BITMAPINFO; p7 : UINT; p8 : LONGINT; p9 : LONGINT; p10 : LONGINT; p11 : LONGINT; p12 : UINT) : BOOL;
    PROCEDURE GradientFill* (p0 : HDC; VAR [nil] p1 : _TRIVERTEX_struct; p2 : ULONG; p3 : PVOID; p4 : ULONG; p5 : ULONG) : BOOL;
    PROCEDURE PlayMetaFileRecord* (p0 : HDC; VAR [nil] p1 : tagHANDLETABLE_struct; VAR [nil] p2 : tagMETARECORD_struct; p3 : UINT) : BOOL;
    PROCEDURE EnumMetaFile* (p0 : HDC; p1 : HMETAFILE; p2 : MFENUMPROC; p3 : LPARAM) : BOOL;
    PROCEDURE CloseEnhMetaFile* (p0 : HDC) : HENHMETAFILE;
    PROCEDURE CopyEnhMetaFileA* (p0 : HENHMETAFILE; p1 : LPCSTR) : HENHMETAFILE;
    PROCEDURE CopyEnhMetaFileW* (p0 : HENHMETAFILE; p1 : LPCWSTR) : HENHMETAFILE;
    PROCEDURE CreateEnhMetaFileA* (p0 : HDC; p1 : LPCSTR; VAR [nil] p2 : RECT; p3 : LPCSTR) : HDC;
    PROCEDURE CreateEnhMetaFileW* (p0 : HDC; p1 : LPCWSTR; VAR [nil] p2 : RECT; p3 : LPCWSTR) : HDC;
    PROCEDURE DeleteEnhMetaFile* (p0 : HENHMETAFILE) : BOOL;
    PROCEDURE EnumEnhMetaFile* (p0 : HDC; p1 : HENHMETAFILE; p2 : ENHMFENUMPROC; p3 : LPVOID; VAR [nil] p4 : RECT) : BOOL;
    PROCEDURE GetEnhMetaFileA* (p0 : LPCSTR) : HENHMETAFILE;
    PROCEDURE GetEnhMetaFileW* (p0 : LPCWSTR) : HENHMETAFILE;
    PROCEDURE GetEnhMetaFileBits* (p0 : HENHMETAFILE; p1 : UINT; p2 : LPBYTE) : UINT;
    PROCEDURE GetEnhMetaFileDescriptionA* (p0 : HENHMETAFILE; p1 : UINT; p2 : LPSTR) : UINT;
    PROCEDURE GetEnhMetaFileDescriptionW* (p0 : HENHMETAFILE; p1 : UINT; p2 : LPWSTR) : UINT;
    PROCEDURE GetEnhMetaFileHeader* (p0 : HENHMETAFILE; p1 : UINT; VAR [nil] p2 : tagENHMETAHEADER_struct) : UINT;
    PROCEDURE GetEnhMetaFilePaletteEntries* (p0 : HENHMETAFILE; p1 : UINT; VAR [nil] p2 : tagPALETTEENTRY_struct) : UINT;
    PROCEDURE GetEnhMetaFilePixelFormat* (p0 : HENHMETAFILE; p1 : UINT; VAR [nil] p2 : PIXELFORMATDESCRIPTOR) : UINT;
    PROCEDURE GetWinMetaFileBits* (p0 : HENHMETAFILE; p1 : UINT; p2 : LPBYTE; p3 : INT; p4 : HDC) : UINT;
    PROCEDURE PlayEnhMetaFile* (p0 : HDC; p1 : HENHMETAFILE; VAR [nil] p2 : RECT) : BOOL;
    PROCEDURE PlayEnhMetaFileRecord* (p0 : HDC; VAR [nil] p1 : tagHANDLETABLE_struct; VAR [nil] p2 : ENHMETARECORD; p3 : UINT) : BOOL;
    PROCEDURE SetEnhMetaFileBits* (p0 : UINT; p1 : PBYTE) : HENHMETAFILE;
    PROCEDURE SetWinMetaFileBits* (p0 : UINT; p1 : PBYTE; p2 : HDC; VAR [nil] p3 : METAFILEPICT) : HENHMETAFILE;
    PROCEDURE GdiComment* (p0 : HDC; p1 : UINT; p2 : PBYTE) : BOOL;
    PROCEDURE GetTextMetricsA* (p0 : HDC; VAR [nil] p1 : tagTEXTMETRICA_struct) : BOOL;
    PROCEDURE GetTextMetricsW* (p0 : HDC; VAR [nil] p1 : tagTEXTMETRICW_struct) : BOOL;
    PROCEDURE AngleArc* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : DWORD; p4 : FLOAT; p5 : FLOAT) : BOOL;
    PROCEDURE PolyPolyline* (p0 : HDC; VAR [nil] p1 : POINT; VAR [nil] p2 : DWORD; p3 : DWORD) : BOOL;
    PROCEDURE GetWorldTransform* (p0 : HDC; VAR [nil] p1 : tagXFORM_struct) : BOOL;
    PROCEDURE SetWorldTransform* (p0 : HDC; VAR [nil] p1 : XFORM) : BOOL;
    PROCEDURE ModifyWorldTransform* (p0 : HDC; VAR [nil] p1 : XFORM; p2 : DWORD) : BOOL;
    PROCEDURE CombineTransform* (VAR [nil] p0 : tagXFORM_struct; VAR [nil] p1 : XFORM; VAR [nil] p2 : XFORM) : BOOL;
    PROCEDURE CreateDIBSection* (p0 : HDC; VAR [nil] p1 : BITMAPINFO; p2 : UINT; VAR [nil] p3 : LPVOID; p4 : HANDLE; p5 : DWORD) : HBITMAP;
    PROCEDURE GetDIBColorTable* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : RGBQUAD) : UINT;
    PROCEDURE SetDIBColorTable* (p0 : HDC; p1 : UINT; p2 : UINT; VAR [nil] p3 : RGBQUAD) : UINT;
    PROCEDURE SetColorAdjustment* (p0 : HDC; VAR [nil] p1 : COLORADJUSTMENT) : BOOL;
    PROCEDURE GetColorAdjustment* (p0 : HDC; VAR [nil] p1 : tagCOLORADJUSTMENT_struct) : BOOL;
    PROCEDURE CreateHalftonePalette* (p0 : HDC) : HPALETTE;
    PROCEDURE StartDocA* (p0 : HDC; VAR [nil] p1 : DOCINFOA) : LONGINT;
    PROCEDURE StartDocW* (p0 : HDC; VAR [nil] p1 : DOCINFOW) : LONGINT;
    PROCEDURE EndDoc* (p0 : HDC) : LONGINT;
    PROCEDURE StartPage* (p0 : HDC) : LONGINT;
    PROCEDURE EndPage* (p0 : HDC) : LONGINT;
    PROCEDURE AbortDoc* (p0 : HDC) : LONGINT;
    PROCEDURE SetAbortProc* (p0 : HDC; p1 : ABORTPROC) : LONGINT;
    PROCEDURE AbortPath* (p0 : HDC) : BOOL;
    PROCEDURE ArcTo* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; p5 : LONGINT; p6 : LONGINT; p7 : LONGINT; p8 : LONGINT) : BOOL;
    PROCEDURE BeginPath* (p0 : HDC) : BOOL;
    PROCEDURE CloseFigure* (p0 : HDC) : BOOL;
    PROCEDURE EndPath* (p0 : HDC) : BOOL;
    PROCEDURE FillPath* (p0 : HDC) : BOOL;
    PROCEDURE FlattenPath* (p0 : HDC) : BOOL;
    PROCEDURE GetPath* (p0 : HDC; VAR [nil] p1 : tagPOINT_struct; p2 : LPBYTE; p3 : LONGINT) : LONGINT;
    PROCEDURE PathToRegion* (p0 : HDC) : HRGN;
    PROCEDURE PolyDraw* (p0 : HDC; VAR [nil] p1 : POINT; p2 : PBYTE; p3 : LONGINT) : BOOL;
    PROCEDURE SelectClipPath* (p0 : HDC; p1 : LONGINT) : BOOL;
    PROCEDURE SetArcDirection* (p0 : HDC; p1 : LONGINT) : LONGINT;
    PROCEDURE SetMiterLimit* (p0 : HDC; p1 : FLOAT; VAR [nil] p2 : FLOAT) : BOOL;
    PROCEDURE StrokeAndFillPath* (p0 : HDC) : BOOL;
    PROCEDURE StrokePath* (p0 : HDC) : BOOL;
    PROCEDURE WidenPath* (p0 : HDC) : BOOL;
    PROCEDURE ExtCreatePen* (p0 : DWORD; p1 : DWORD; VAR [nil] p2 : LOGBRUSH; p3 : DWORD; VAR [nil] p4 : DWORD) : HPEN;
    PROCEDURE GetMiterLimit* (p0 : HDC; VAR [nil] p1 : FLOAT) : BOOL;
    PROCEDURE GetArcDirection* (p0 : HDC) : LONGINT;
    PROCEDURE GetObjectA* (p0 : HGDIOBJ; p1 : LONGINT; p2 : LPVOID) : LONGINT;
    PROCEDURE GetObjectW* (p0 : HGDIOBJ; p1 : LONGINT; p2 : LPVOID) : LONGINT;
    PROCEDURE MoveToEx* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; VAR [nil] p3 : tagPOINT_struct) : BOOL;
    PROCEDURE TextOutA* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LPCSTR; p4 : LONGINT) : BOOL;
    PROCEDURE TextOutW* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LPCWSTR; p4 : LONGINT) : BOOL;
    PROCEDURE ExtTextOutA* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : UINT; VAR [nil] p4 : RECT; p5 : LPCSTR; p6 : UINT; VAR [nil] p7 : INT) : BOOL;
    PROCEDURE ExtTextOutW* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : UINT; VAR [nil] p4 : RECT; p5 : LPCWSTR; p6 : UINT; VAR [nil] p7 : INT) : BOOL;
    PROCEDURE PolyTextOutA* (p0 : HDC; VAR [nil] p1 : POLYTEXTA; p2 : LONGINT) : BOOL;
    PROCEDURE PolyTextOutW* (p0 : HDC; VAR [nil] p1 : POLYTEXTW; p2 : LONGINT) : BOOL;
    PROCEDURE CreatePolygonRgn* (VAR [nil] p0 : POINT; p1 : LONGINT; p2 : LONGINT) : HRGN;
    PROCEDURE DPtoLP* (p0 : HDC; VAR [nil] p1 : tagPOINT_struct; p2 : LONGINT) : BOOL;
    PROCEDURE LPtoDP* (p0 : HDC; VAR [nil] p1 : tagPOINT_struct; p2 : LONGINT) : BOOL;
    PROCEDURE Polygon* (p0 : HDC; VAR [nil] p1 : POINT; p2 : LONGINT) : BOOL;
    PROCEDURE Polyline* (p0 : HDC; VAR [nil] p1 : POINT; p2 : LONGINT) : BOOL;
    PROCEDURE PolyBezier* (p0 : HDC; VAR [nil] p1 : POINT; p2 : DWORD) : BOOL;
    PROCEDURE PolyBezierTo* (p0 : HDC; VAR [nil] p1 : POINT; p2 : DWORD) : BOOL;
    PROCEDURE PolylineTo* (p0 : HDC; VAR [nil] p1 : POINT; p2 : DWORD) : BOOL;
    PROCEDURE SetViewportExtEx* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; VAR [nil] p3 : tagSIZE_struct) : BOOL;
    PROCEDURE SetViewportOrgEx* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; VAR [nil] p3 : tagPOINT_struct) : BOOL;
    PROCEDURE SetWindowExtEx* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; VAR [nil] p3 : tagSIZE_struct) : BOOL;
    PROCEDURE SetWindowOrgEx* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; VAR [nil] p3 : tagPOINT_struct) : BOOL;
    PROCEDURE OffsetViewportOrgEx* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; VAR [nil] p3 : tagPOINT_struct) : BOOL;
    PROCEDURE OffsetWindowOrgEx* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; VAR [nil] p3 : tagPOINT_struct) : BOOL;
    PROCEDURE ScaleViewportExtEx* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; VAR [nil] p5 : tagSIZE_struct) : BOOL;
    PROCEDURE ScaleWindowExtEx* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; p4 : LONGINT; VAR [nil] p5 : tagSIZE_struct) : BOOL;
    PROCEDURE SetBitmapDimensionEx* (p0 : HBITMAP; p1 : LONGINT; p2 : LONGINT; VAR [nil] p3 : tagSIZE_struct) : BOOL;
    PROCEDURE SetBrushOrgEx* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; VAR [nil] p3 : tagPOINT_struct) : BOOL;
    PROCEDURE GetTextFaceA* (p0 : HDC; p1 : LONGINT; p2 : LPSTR) : LONGINT;
    PROCEDURE GetTextFaceW* (p0 : HDC; p1 : LONGINT; p2 : LPWSTR) : LONGINT;
    PROCEDURE GetKerningPairsA* (p0 : HDC; p1 : DWORD; VAR [nil] p2 : tagKERNINGPAIR_struct) : DWORD;
    PROCEDURE GetKerningPairsW* (p0 : HDC; p1 : DWORD; VAR [nil] p2 : tagKERNINGPAIR_struct) : DWORD;
    PROCEDURE GetDCOrgEx* (p0 : HDC; VAR [nil] p1 : tagPOINT_struct) : BOOL;
    PROCEDURE FixBrushOrgEx* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; VAR [nil] p3 : tagPOINT_struct) : BOOL;
    PROCEDURE UnrealizeObject* (p0 : HGDIOBJ) : BOOL;
    PROCEDURE GdiFlush* () : BOOL;
    PROCEDURE GdiSetBatchLimit* (p0 : DWORD) : DWORD;
    PROCEDURE GdiGetBatchLimit* () : DWORD;
    PROCEDURE SetICMMode* (p0 : HDC; p1 : LONGINT) : LONGINT;
    PROCEDURE CheckColorsInGamut* (p0 : HDC; p1 : LPVOID; p2 : LPVOID; p3 : DWORD) : BOOL;
    PROCEDURE GetColorSpace* (p0 : HDC) : HCOLORSPACE;
    PROCEDURE GetLogColorSpaceA* (p0 : HCOLORSPACE; VAR [nil] p1 : tagLOGCOLORSPACEA_struct; p2 : DWORD) : BOOL;
    PROCEDURE GetLogColorSpaceW* (p0 : HCOLORSPACE; VAR [nil] p1 : tagLOGCOLORSPACEW_struct; p2 : DWORD) : BOOL;
    PROCEDURE CreateColorSpaceA* (VAR [nil] p0 : tagLOGCOLORSPACEA_struct) : HCOLORSPACE;
    PROCEDURE CreateColorSpaceW* (VAR [nil] p0 : tagLOGCOLORSPACEW_struct) : HCOLORSPACE;
    PROCEDURE SetColorSpace* (p0 : HDC; p1 : HCOLORSPACE) : HCOLORSPACE;
    PROCEDURE DeleteColorSpace* (p0 : HCOLORSPACE) : BOOL;
    PROCEDURE GetICMProfileA* (p0 : HDC; VAR [nil] p1 : DWORD; p2 : LPSTR) : BOOL;
    PROCEDURE GetICMProfileW* (p0 : HDC; VAR [nil] p1 : DWORD; p2 : LPWSTR) : BOOL;
    PROCEDURE SetICMProfileA* (p0 : HDC; p1 : LPSTR) : BOOL;
    PROCEDURE SetICMProfileW* (p0 : HDC; p1 : LPWSTR) : BOOL;
    PROCEDURE GetDeviceGammaRamp* (p0 : HDC; p1 : LPVOID) : BOOL;
    PROCEDURE SetDeviceGammaRamp* (p0 : HDC; p1 : LPVOID) : BOOL;
    PROCEDURE ColorMatchToTarget* (p0 : HDC; p1 : HDC; p2 : DWORD) : BOOL;
    PROCEDURE EnumICMProfilesA* (p0 : HDC; p1 : ICMENUMPROCA; p2 : LPARAM) : LONGINT;
    PROCEDURE EnumICMProfilesW* (p0 : HDC; p1 : ICMENUMPROCW; p2 : LPARAM) : LONGINT;
    PROCEDURE UpdateICMRegKeyA* (p0 : DWORD; p1 : LPSTR; p2 : LPSTR; p3 : UINT) : BOOL;
    PROCEDURE UpdateICMRegKeyW* (p0 : DWORD; p1 : LPWSTR; p2 : LPWSTR; p3 : UINT) : BOOL;
    PROCEDURE wglCopyContext* (p0 : HGLRC; p1 : HGLRC; p2 : UINT) : BOOL;
    PROCEDURE wglCreateContext* (p0 : HDC) : HGLRC;
    PROCEDURE wglCreateLayerContext* (p0 : HDC; p1 : LONGINT) : HGLRC;
    PROCEDURE wglDeleteContext* (p0 : HGLRC) : BOOL;
    PROCEDURE wglGetCurrentContext* () : HGLRC;
    PROCEDURE wglGetCurrentDC* () : HDC;
    PROCEDURE wglGetProcAddress* (p0 : LPCSTR) : PROC;
    PROCEDURE wglMakeCurrent* (p0 : HDC; p1 : HGLRC) : BOOL;
    PROCEDURE wglShareLists* (p0 : HGLRC; p1 : HGLRC) : BOOL;
    PROCEDURE wglUseFontBitmapsA* (p0 : HDC; p1 : DWORD; p2 : DWORD; p3 : DWORD) : BOOL;
    PROCEDURE wglUseFontBitmapsW* (p0 : HDC; p1 : DWORD; p2 : DWORD; p3 : DWORD) : BOOL;
    PROCEDURE SwapBuffers* (p0 : HDC) : BOOL;
    PROCEDURE wglUseFontOutlinesA* (p0 : HDC; p1 : DWORD; p2 : DWORD; p3 : DWORD; p4 : FLOAT; p5 : FLOAT; p6 : LONGINT; VAR [nil] p7 : _GLYPHMETRICSFLOAT_struct) : BOOL;
    PROCEDURE wglUseFontOutlinesW* (p0 : HDC; p1 : DWORD; p2 : DWORD; p3 : DWORD; p4 : FLOAT; p5 : FLOAT; p6 : LONGINT; VAR [nil] p7 : _GLYPHMETRICSFLOAT_struct) : BOOL;
    PROCEDURE wglDescribeLayerPlane* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : UINT; VAR [nil] p4 : tagLAYERPLANEDESCRIPTOR_struct) : BOOL;
    PROCEDURE wglSetLayerPaletteEntries* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; VAR [nil] p4 : COLORREF) : LONGINT;
    PROCEDURE wglGetLayerPaletteEntries* (p0 : HDC; p1 : LONGINT; p2 : LONGINT; p3 : LONGINT; VAR [nil] p4 : COLORREF) : LONGINT;
    PROCEDURE wglRealizeLayerPalette* (p0 : HDC; p1 : LONGINT; p2 : BOOL) : BOOL;
    PROCEDURE wglSwapLayerBuffers* (p0 : HDC; p1 : UINT) : BOOL;
    PROCEDURE wvsprintfA* (p0 : LPSTR; p1 : LPCSTR; arglist : va_list) : LONGINT;
    PROCEDURE wvsprintfW* (p0 : LPWSTR; p1 : LPCWSTR; arglist : va_list) : LONGINT;
    PROCEDURE wsprintfA* [ "C" ] (p0 : LPSTR; p1 : LPCSTR; ...) : LONGINT;
    PROCEDURE wsprintfW* [ "C" ] (p0 : LPWSTR; p1 : LPCWSTR; ...) : LONGINT;
    PROCEDURE LoadKeyboardLayoutA* (pwszKLID : LPCSTR; Flags : UINT) : HKL;
    PROCEDURE LoadKeyboardLayoutW* (pwszKLID : LPCWSTR; Flags : UINT) : HKL;
    PROCEDURE ActivateKeyboardLayout* (hkl : HKL; Flags : UINT) : HKL;
    PROCEDURE ToUnicodeEx* (wVirtKey : UINT; wScanCode : UINT; lpKeyState : PBYTE; pwszBuff : LPWSTR; cchBuff : LONGINT; wFlags : UINT; dwhkl : HKL) : LONGINT;
    PROCEDURE UnloadKeyboardLayout* (hkl : HKL) : BOOL;
    PROCEDURE GetKeyboardLayoutNameA* (pwszKLID : LPSTR) : BOOL;
    PROCEDURE GetKeyboardLayoutNameW* (pwszKLID : LPWSTR) : BOOL;
    PROCEDURE GetKeyboardLayoutList* (nBuff : LONGINT; VAR [nil] lpList : HKL) : LONGINT;
    PROCEDURE GetKeyboardLayout* (dwLayout : DWORD) : HKL;
    PROCEDURE CreateDesktopA* (lpszDesktop : LPSTR; lpszDevice : LPSTR; VAR [nil] pDevmode : _devicemodeA_struct; dwFlags : DWORD; dwDesiredAccess : ACCESS_MASK; VAR [nil] lpsa : _SECURITY_ATTRIBUTES_struct) : HDESK;
    PROCEDURE CreateDesktopW* (lpszDesktop : LPWSTR; lpszDevice : LPWSTR; VAR [nil] pDevmode : _devicemodeW_struct; dwFlags : DWORD; dwDesiredAccess : ACCESS_MASK; VAR [nil] lpsa : _SECURITY_ATTRIBUTES_struct) : HDESK;
    PROCEDURE OpenDesktopA* (lpszDesktop : LPSTR; dwFlags : DWORD; fInherit : BOOL; dwDesiredAccess : ACCESS_MASK) : HDESK;
    PROCEDURE OpenDesktopW* (lpszDesktop : LPWSTR; dwFlags : DWORD; fInherit : BOOL; dwDesiredAccess : ACCESS_MASK) : HDESK;
    PROCEDURE OpenInputDesktop* (dwFlags : DWORD; fInherit : BOOL; dwDesiredAccess : ACCESS_MASK) : HDESK;
    PROCEDURE EnumDesktopsA* (hwinsta : HWINSTA; lpEnumFunc : DESKTOPENUMPROCA; lParam : LPARAM) : BOOL;
    PROCEDURE EnumDesktopsW* (hwinsta : HWINSTA; lpEnumFunc : DESKTOPENUMPROCW; lParam : LPARAM) : BOOL;
    PROCEDURE EnumDesktopWindows* (hDesktop : HDESK; lpfn : WNDENUMPROC; lParam : LPARAM) : BOOL;
    PROCEDURE SwitchDesktop* (hDesktop : HDESK) : BOOL;
    PROCEDURE SetThreadDesktop* (hDesktop : HDESK) : BOOL;
    PROCEDURE CloseDesktop* (hDesktop : HDESK) : BOOL;
    PROCEDURE GetThreadDesktop* (dwThreadId : DWORD) : HDESK;
    PROCEDURE CreateWindowStationA* (lpwinsta : LPSTR; dwReserved : DWORD; dwDesiredAccess : ACCESS_MASK; VAR [nil] lpsa : _SECURITY_ATTRIBUTES_struct) : HWINSTA;
    PROCEDURE CreateWindowStationW* (lpwinsta : LPWSTR; dwReserved : DWORD; dwDesiredAccess : ACCESS_MASK; VAR [nil] lpsa : _SECURITY_ATTRIBUTES_struct) : HWINSTA;
    PROCEDURE OpenWindowStationA* (lpszWinSta : LPSTR; fInherit : BOOL; dwDesiredAccess : ACCESS_MASK) : HWINSTA;
    PROCEDURE OpenWindowStationW* (lpszWinSta : LPWSTR; fInherit : BOOL; dwDesiredAccess : ACCESS_MASK) : HWINSTA;
    PROCEDURE EnumWindowStationsA* (lpEnumFunc : WINSTAENUMPROCA; lParam : LPARAM) : BOOL;
    PROCEDURE EnumWindowStationsW* (lpEnumFunc : WINSTAENUMPROCW; lParam : LPARAM) : BOOL;
    PROCEDURE CloseWindowStation* (hWinSta : HWINSTA) : BOOL;
    PROCEDURE SetProcessWindowStation* (hWinSta : HWINSTA) : BOOL;
    PROCEDURE GetProcessWindowStation* () : HWINSTA;
    PROCEDURE SetUserObjectSecurity* (hObj : HANDLE; VAR [nil] pSIRequested : DWORD; pSID : PSECURITY_DESCRIPTOR) : BOOL;
    PROCEDURE GetUserObjectSecurity* (hObj : HANDLE; VAR [nil] pSIRequested : DWORD; pSID : PSECURITY_DESCRIPTOR; nLength : DWORD; VAR [nil] lpnLengthNeeded : DWORD) : BOOL;
    PROCEDURE GetUserObjectInformationA* (hObj : HANDLE; nIndex : LONGINT; pvInfo : PVOID; nLength : DWORD; VAR [nil] lpnLengthNeeded : DWORD) : BOOL;
    PROCEDURE GetUserObjectInformationW* (hObj : HANDLE; nIndex : LONGINT; pvInfo : PVOID; nLength : DWORD; VAR [nil] lpnLengthNeeded : DWORD) : BOOL;
    PROCEDURE SetUserObjectInformationA* (hObj : HANDLE; nIndex : LONGINT; pvInfo : PVOID; nLength : DWORD) : BOOL;
    PROCEDURE SetUserObjectInformationW* (hObj : HANDLE; nIndex : LONGINT; pvInfo : PVOID; nLength : DWORD) : BOOL;
    PROCEDURE RegisterWindowMessageA* (lpString : LPCSTR) : UINT;
    PROCEDURE RegisterWindowMessageW* (lpString : LPCWSTR) : UINT;
    PROCEDURE TrackMouseEvent* (VAR [nil] lpEventTrack : tagTRACKMOUSEEVENT_struct) : BOOL;
    PROCEDURE DrawEdge* (hdc : HDC; VAR [nil] qrc : tagRECT_struct; edge : UINT; grfFlags : UINT) : BOOL;
    PROCEDURE DrawFrameControl* (p0 : HDC; VAR [nil] p1 : tagRECT_struct; p2 : UINT; p3 : UINT) : BOOL;
    PROCEDURE DrawCaption* (p0 : HWND; p1 : HDC; VAR [nil] p2 : RECT; p3 : UINT) : BOOL;
    PROCEDURE DrawAnimatedRects* (hwnd : HWND; idAni : LONGINT; VAR [nil] lprcFrom : RECT; VAR [nil] lprcTo : RECT) : BOOL;
    PROCEDURE GetMessageA* (VAR [nil] lpMsg : tagMSG_struct; hWnd : HWND; wMsgFilterMin : UINT; wMsgFilterMax : UINT) : BOOL;
    PROCEDURE GetMessageW* (VAR [nil] lpMsg : tagMSG_struct; hWnd : HWND; wMsgFilterMin : UINT; wMsgFilterMax : UINT) : BOOL;
    PROCEDURE TranslateMessage* (VAR [nil] lpMsg : MSG) : BOOL;
    PROCEDURE DispatchMessageA* (VAR [nil] lpMsg : MSG) : LONG;
    PROCEDURE DispatchMessageW* (VAR [nil] lpMsg : MSG) : LONG;
    PROCEDURE SetMessageQueue* (cMessagesMax : LONGINT) : BOOL;
    PROCEDURE PeekMessageA* (VAR [nil] lpMsg : tagMSG_struct; hWnd : HWND; wMsgFilterMin : UINT; wMsgFilterMax : UINT; wRemoveMsg : UINT) : BOOL;
    PROCEDURE PeekMessageW* (VAR [nil] lpMsg : tagMSG_struct; hWnd : HWND; wMsgFilterMin : UINT; wMsgFilterMax : UINT; wRemoveMsg : UINT) : BOOL;
    PROCEDURE RegisterHotKey* (hWnd : HWND; id : LONGINT; fsModifiers : UINT; vk : UINT) : BOOL;
    PROCEDURE UnregisterHotKey* (hWnd : HWND; id : LONGINT) : BOOL;
    PROCEDURE ExitWindowsEx* (uFlags : UINT; dwReserved : DWORD) : BOOL;
    PROCEDURE SwapMouseButton* (fSwap : BOOL) : BOOL;
    PROCEDURE GetMessagePos* () : DWORD;
    PROCEDURE GetMessageTime* () : LONG;
    PROCEDURE GetMessageExtraInfo* () : LONG;
    PROCEDURE SetMessageExtraInfo* (lParam : LPARAM) : LPARAM;
    PROCEDURE SendMessageA* (hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT;
    PROCEDURE SendMessageW* (hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT;
    PROCEDURE SendMessageTimeoutA* (hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM; fuFlags : UINT; uTimeout : UINT; VAR [nil] lpdwResult : DWORD) : LRESULT;
    PROCEDURE SendMessageTimeoutW* (hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM; fuFlags : UINT; uTimeout : UINT; VAR [nil] lpdwResult : DWORD) : LRESULT;
    PROCEDURE SendNotifyMessageA* (hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL;
    PROCEDURE SendNotifyMessageW* (hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL;
    PROCEDURE SendMessageCallbackA* (hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM; lpResultCallBack : SENDASYNCPROC; dwData : DWORD) : BOOL;
    PROCEDURE SendMessageCallbackW* (hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM; lpResultCallBack : SENDASYNCPROC; dwData : DWORD) : BOOL;
    PROCEDURE BroadcastSystemMessageA* (p0 : DWORD; VAR [nil] p1 : DWORD; p2 : UINT; p3 : WPARAM; p4 : LPARAM) : LONGINT;
    PROCEDURE BroadcastSystemMessageW* (p0 : DWORD; VAR [nil] p1 : DWORD; p2 : UINT; p3 : WPARAM; p4 : LPARAM) : LONGINT;
    PROCEDURE PostMessageA* (hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL;
    PROCEDURE PostMessageW* (hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL;
    PROCEDURE PostThreadMessageA* (idThread : DWORD; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL;
    PROCEDURE PostThreadMessageW* (idThread : DWORD; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : BOOL;
    PROCEDURE AttachThreadInput* (idAttach : DWORD; idAttachTo : DWORD; fAttach : BOOL) : BOOL;
    PROCEDURE ReplyMessage* (lResult : LRESULT) : BOOL;
    PROCEDURE WaitMessage* () : BOOL;
    PROCEDURE WaitForInputIdle* (hProcess : HANDLE; dwMilliseconds : DWORD) : DWORD;
    PROCEDURE DefWindowProcA* (hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT;
    PROCEDURE DefWindowProcW* (hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT;
    PROCEDURE PostQuitMessage* (nExitCode : LONGINT);
    PROCEDURE CallWindowProcA* (lpPrevWndFunc : FARPROC; hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT;
    PROCEDURE CallWindowProcW* (lpPrevWndFunc : FARPROC; hWnd : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT;
    PROCEDURE InSendMessage* () : BOOL;
    PROCEDURE GetDoubleClickTime* () : UINT;
    PROCEDURE SetDoubleClickTime* (p0 : UINT) : BOOL;
    PROCEDURE RegisterClassA* (VAR [nil] lpWndClass : WNDCLASSA) : ATOM;
    PROCEDURE RegisterClassW* (VAR [nil] lpWndClass : WNDCLASSW) : ATOM;
    PROCEDURE UnregisterClassA* (lpClassName : LPCSTR; hInstance : HINSTANCE) : BOOL;
    PROCEDURE UnregisterClassW* (lpClassName : LPCWSTR; hInstance : HINSTANCE) : BOOL;
    PROCEDURE GetClassInfoA* (hInstance : HINSTANCE; lpClassName : LPCSTR; VAR [nil] lpWndClass : tagWNDCLASSA_struct) : BOOL;
    PROCEDURE GetClassInfoW* (hInstance : HINSTANCE; lpClassName : LPCWSTR; VAR [nil] lpWndClass : tagWNDCLASSW_struct) : BOOL;
    PROCEDURE RegisterClassExA* (VAR [nil] p0 : WNDCLASSEXA) : ATOM;
    PROCEDURE RegisterClassExW* (VAR [nil] p0 : WNDCLASSEXW) : ATOM;
    PROCEDURE GetClassInfoExA* (p0 : HINSTANCE; p1 : LPCSTR; VAR [nil] p2 : tagWNDCLASSEXA_struct) : BOOL;
    PROCEDURE GetClassInfoExW* (p0 : HINSTANCE; p1 : LPCWSTR; VAR [nil] p2 : tagWNDCLASSEXW_struct) : BOOL;
    PROCEDURE CreateWindowExA* (dwExStyle : DWORD; lpClassName : LPCSTR; lpWindowName : LPCSTR; dwStyle : DWORD; X : LONGINT; Y : LONGINT; nWidth : LONGINT; nHeight : LONGINT; hWndParent : HWND; hMenu : HMENU; hInstance : HINSTANCE; lpParam : LPVOID) : HWND;
    PROCEDURE CreateWindowExW* (dwExStyle : DWORD; lpClassName : LPCWSTR; lpWindowName : LPCWSTR; dwStyle : DWORD; X : LONGINT; Y : LONGINT; nWidth : LONGINT; nHeight : LONGINT; hWndParent : HWND; hMenu : HMENU; hInstance : HINSTANCE; lpParam : LPVOID) : HWND;
    PROCEDURE IsWindow* (hWnd : HWND) : BOOL;
    PROCEDURE IsMenu* (hMenu : HMENU) : BOOL;
    PROCEDURE IsChild* (hWndParent : HWND; hWnd : HWND) : BOOL;
    PROCEDURE DestroyWindow* (hWnd : HWND) : BOOL;
    PROCEDURE ShowWindow* (hWnd : HWND; nCmdShow : LONGINT) : BOOL;
    PROCEDURE ShowWindowAsync* (hWnd : HWND; nCmdShow : LONGINT) : BOOL;
    PROCEDURE FlashWindow* (hWnd : HWND; bInvert : BOOL) : BOOL;
    PROCEDURE ShowOwnedPopups* (hWnd : HWND; fShow : BOOL) : BOOL;
    PROCEDURE OpenIcon* (hWnd : HWND) : BOOL;
    PROCEDURE CloseWindow* (hWnd : HWND) : BOOL;
    PROCEDURE MoveWindow* (hWnd : HWND; X : LONGINT; Y : LONGINT; nWidth : LONGINT; nHeight : LONGINT; bRepaint : BOOL) : BOOL;
    PROCEDURE SetWindowPos* (hWnd : HWND; hWndInsertAfter : HWND; X : LONGINT; Y : LONGINT; cx : LONGINT; cy : LONGINT; uFlags : UINT) : BOOL;
    PROCEDURE GetWindowPlacement* (hWnd : HWND; VAR [nil] lpwndpl : WINDOWPLACEMENT) : BOOL;
    PROCEDURE SetWindowPlacement* (hWnd : HWND; VAR [nil] lpwndpl : WINDOWPLACEMENT) : BOOL;
    PROCEDURE BeginDeferWindowPos* (nNumWindows : LONGINT) : HDWP;
    PROCEDURE DeferWindowPos* (hWinPosInfo : HDWP; hWnd : HWND; hWndInsertAfter : HWND; x : LONGINT; y : LONGINT; cx : LONGINT; cy : LONGINT; uFlags : UINT) : HDWP;
    PROCEDURE EndDeferWindowPos* (hWinPosInfo : HDWP) : BOOL;
    PROCEDURE IsWindowVisible* (hWnd : HWND) : BOOL;
    PROCEDURE IsIconic* (hWnd : HWND) : BOOL;
    PROCEDURE AnyPopup* () : BOOL;
    PROCEDURE BringWindowToTop* (hWnd : HWND) : BOOL;
    PROCEDURE IsZoomed* (hWnd : HWND) : BOOL;
    PROCEDURE CreateDialogParamA* (hInstance : HINSTANCE; lpTemplateName : LPCSTR; hWndParent : HWND; lpDialogFunc : DLGPROC; dwInitParam : LPARAM) : HWND;
    PROCEDURE CreateDialogParamW* (hInstance : HINSTANCE; lpTemplateName : LPCWSTR; hWndParent : HWND; lpDialogFunc : DLGPROC; dwInitParam : LPARAM) : HWND;
    PROCEDURE CreateDialogIndirectParamA* (hInstance : HINSTANCE; VAR [nil] lpTemplate : DLGTEMPLATE; hWndParent : HWND; lpDialogFunc : DLGPROC; dwInitParam : LPARAM) : HWND;
    PROCEDURE CreateDialogIndirectParamW* (hInstance : HINSTANCE; VAR [nil] lpTemplate : DLGTEMPLATE; hWndParent : HWND; lpDialogFunc : DLGPROC; dwInitParam : LPARAM) : HWND;
    PROCEDURE DialogBoxParamA* (hInstance : HINSTANCE; lpTemplateName : LPCSTR; hWndParent : HWND; lpDialogFunc : DLGPROC; dwInitParam : LPARAM) : LONGINT;
    PROCEDURE DialogBoxParamW* (hInstance : HINSTANCE; lpTemplateName : LPCWSTR; hWndParent : HWND; lpDialogFunc : DLGPROC; dwInitParam : LPARAM) : LONGINT;
    PROCEDURE DialogBoxIndirectParamA* (hInstance : HINSTANCE; VAR [nil] hDialogTemplate : DLGTEMPLATE; hWndParent : HWND; lpDialogFunc : DLGPROC; dwInitParam : LPARAM) : LONGINT;
    PROCEDURE DialogBoxIndirectParamW* (hInstance : HINSTANCE; VAR [nil] hDialogTemplate : DLGTEMPLATE; hWndParent : HWND; lpDialogFunc : DLGPROC; dwInitParam : LPARAM) : LONGINT;
    PROCEDURE EndDialog* (hDlg : HWND; nResult : LONGINT) : BOOL;
    PROCEDURE GetDlgItem* (hDlg : HWND; nIDDlgItem : LONGINT) : HWND;
    PROCEDURE SetDlgItemInt* (hDlg : HWND; nIDDlgItem : LONGINT; uValue : UINT; bSigned : BOOL) : BOOL;
    PROCEDURE GetDlgItemInt* (hDlg : HWND; nIDDlgItem : LONGINT; VAR [nil] lpTranslated : BOOL; bSigned : BOOL) : UINT;
    PROCEDURE SetDlgItemTextA* (hDlg : HWND; nIDDlgItem : LONGINT; lpString : LPCSTR) : BOOL;
    PROCEDURE SetDlgItemTextW* (hDlg : HWND; nIDDlgItem : LONGINT; lpString : LPCWSTR) : BOOL;
    PROCEDURE GetDlgItemTextA* (hDlg : HWND; nIDDlgItem : LONGINT; lpString : LPSTR; nMaxCount : LONGINT) : UINT;
    PROCEDURE GetDlgItemTextW* (hDlg : HWND; nIDDlgItem : LONGINT; lpString : LPWSTR; nMaxCount : LONGINT) : UINT;
    PROCEDURE CheckDlgButton* (hDlg : HWND; nIDButton : LONGINT; uCheck : UINT) : BOOL;
    PROCEDURE CheckRadioButton* (hDlg : HWND; nIDFirstButton : LONGINT; nIDLastButton : LONGINT; nIDCheckButton : LONGINT) : BOOL;
    PROCEDURE IsDlgButtonChecked* (hDlg : HWND; nIDButton : LONGINT) : UINT;
    PROCEDURE SendDlgItemMessageA* (hDlg : HWND; nIDDlgItem : LONGINT; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LONG;
    PROCEDURE SendDlgItemMessageW* (hDlg : HWND; nIDDlgItem : LONGINT; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LONG;
    PROCEDURE GetNextDlgGroupItem* (hDlg : HWND; hCtl : HWND; bPrevious : BOOL) : HWND;
    PROCEDURE GetNextDlgTabItem* (hDlg : HWND; hCtl : HWND; bPrevious : BOOL) : HWND;
    PROCEDURE GetDlgCtrlID* (hWnd : HWND) : LONGINT;
    PROCEDURE GetDialogBaseUnits* () : LONGINT;
    PROCEDURE DefDlgProcA* (hDlg : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT;
    PROCEDURE DefDlgProcW* (hDlg : HWND; Msg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT;
    PROCEDURE CallMsgFilterA* (VAR [nil] lpMsg : tagMSG_struct; nCode : LONGINT) : BOOL;
    PROCEDURE CallMsgFilterW* (VAR [nil] lpMsg : tagMSG_struct; nCode : LONGINT) : BOOL;
    PROCEDURE OpenClipboard* (hWndNewOwner : HWND) : BOOL;
    PROCEDURE CloseClipboard* () : BOOL;
    PROCEDURE GetClipboardOwner* () : HWND;
    PROCEDURE SetClipboardViewer* (hWndNewViewer : HWND) : HWND;
    PROCEDURE GetClipboardViewer* () : HWND;
    PROCEDURE ChangeClipboardChain* (hWndRemove : HWND; hWndNewNext : HWND) : BOOL;
    PROCEDURE SetClipboardData* (uFormat : UINT; hMem : HANDLE) : HANDLE;
    PROCEDURE GetClipboardData* (uFormat : UINT) : HANDLE;
    PROCEDURE RegisterClipboardFormatA* (lpszFormat : LPCSTR) : UINT;
    PROCEDURE RegisterClipboardFormatW* (lpszFormat : LPCWSTR) : UINT;
    PROCEDURE CountClipboardFormats* () : LONGINT;
    PROCEDURE EnumClipboardFormats* (format : UINT) : UINT;
    PROCEDURE GetClipboardFormatNameA* (format : UINT; lpszFormatName : LPSTR; cchMaxCount : LONGINT) : LONGINT;
    PROCEDURE GetClipboardFormatNameW* (format : UINT; lpszFormatName : LPWSTR; cchMaxCount : LONGINT) : LONGINT;
    PROCEDURE EmptyClipboard* () : BOOL;
    PROCEDURE IsClipboardFormatAvailable* (format : UINT) : BOOL;
    PROCEDURE GetPriorityClipboardFormat* (VAR [nil] paFormatPriorityList : UINT; cFormats : LONGINT) : LONGINT;
    PROCEDURE GetOpenClipboardWindow* () : HWND;
    PROCEDURE CharToOemA* (lpszSrc : LPCSTR; lpszDst : LPSTR) : BOOL;
    PROCEDURE CharToOemW* (lpszSrc : LPCWSTR; lpszDst : LPSTR) : BOOL;
    PROCEDURE OemToCharA* (lpszSrc : LPCSTR; lpszDst : LPSTR) : BOOL;
    PROCEDURE OemToCharW* (lpszSrc : LPCSTR; lpszDst : LPWSTR) : BOOL;
    PROCEDURE CharToOemBuffA* (lpszSrc : LPCSTR; lpszDst : LPSTR; cchDstLength : DWORD) : BOOL;
    PROCEDURE CharToOemBuffW* (lpszSrc : LPCWSTR; lpszDst : LPSTR; cchDstLength : DWORD) : BOOL;
    PROCEDURE OemToCharBuffA* (lpszSrc : LPCSTR; lpszDst : LPSTR; cchDstLength : DWORD) : BOOL;
    PROCEDURE OemToCharBuffW* (lpszSrc : LPCSTR; lpszDst : LPWSTR; cchDstLength : DWORD) : BOOL;
    PROCEDURE CharUpperA* (lpsz : LPSTR) : LPSTR;
    PROCEDURE CharUpperW* (lpsz : LPWSTR) : LPWSTR;
    PROCEDURE CharUpperBuffA* (lpsz : LPSTR; cchLength : DWORD) : DWORD;
    PROCEDURE CharUpperBuffW* (lpsz : LPWSTR; cchLength : DWORD) : DWORD;
    PROCEDURE CharLowerA* (lpsz : LPSTR) : LPSTR;
    PROCEDURE CharLowerW* (lpsz : LPWSTR) : LPWSTR;
    PROCEDURE CharLowerBuffA* (lpsz : LPSTR; cchLength : DWORD) : DWORD;
    PROCEDURE CharLowerBuffW* (lpsz : LPWSTR; cchLength : DWORD) : DWORD;
    PROCEDURE CharNextA* (lpsz : LPCSTR) : LPSTR;
    PROCEDURE CharNextW* (lpsz : LPCWSTR) : LPWSTR;
    PROCEDURE CharPrevA* (lpszStart : LPCSTR; lpszCurrent : LPCSTR) : LPSTR;
    PROCEDURE CharPrevW* (lpszStart : LPCWSTR; lpszCurrent : LPCWSTR) : LPWSTR;
    PROCEDURE CharNextExA* (CodePage : WORD; lpCurrentChar : LPCSTR; dwFlags : DWORD) : LPSTR;
    PROCEDURE CharPrevExA* (CodePage : WORD; lpStart : LPCSTR; lpCurrentChar : LPCSTR; dwFlags : DWORD) : LPSTR;
    PROCEDURE IsCharAlphaA* (ch : CHAR) : BOOL;
    PROCEDURE IsCharAlphaW* (ch : WCHAR) : BOOL;
    PROCEDURE IsCharAlphaNumericA* (ch : CHAR) : BOOL;
    PROCEDURE IsCharAlphaNumericW* (ch : WCHAR) : BOOL;
    PROCEDURE IsCharUpperA* (ch : CHAR) : BOOL;
    PROCEDURE IsCharUpperW* (ch : WCHAR) : BOOL;
    PROCEDURE IsCharLowerA* (ch : CHAR) : BOOL;
    PROCEDURE IsCharLowerW* (ch : WCHAR) : BOOL;
    PROCEDURE SetFocus* (hWnd : HWND) : HWND;
    PROCEDURE GetActiveWindow* () : HWND;
    PROCEDURE GetFocus* () : HWND;
    PROCEDURE GetKBCodePage* () : UINT;
    PROCEDURE GetKeyState* (nVirtKey : LONGINT) : SHORT;
    PROCEDURE GetAsyncKeyState* (vKey : LONGINT) : SHORT;
    PROCEDURE GetKeyboardState* (lpKeyState : PBYTE) : BOOL;
    PROCEDURE SetKeyboardState* (lpKeyState : LPBYTE) : BOOL;
    PROCEDURE GetKeyNameTextA* (lParam : LONG; lpString : LPSTR; nSize : LONGINT) : LONGINT;
    PROCEDURE GetKeyNameTextW* (lParam : LONG; lpString : LPWSTR; nSize : LONGINT) : LONGINT;
    PROCEDURE GetKeyboardType* (nTypeFlag : LONGINT) : LONGINT;
    PROCEDURE ToAscii* (uVirtKey : UINT; uScanCode : UINT; lpKeyState : PBYTE; VAR [nil] lpChar : WORD; uFlags : UINT) : LONGINT;
    PROCEDURE ToAsciiEx* (uVirtKey : UINT; uScanCode : UINT; lpKeyState : PBYTE; VAR [nil] lpChar : WORD; uFlags : UINT; dwhkl : HKL) : LONGINT;
    PROCEDURE ToUnicode* (wVirtKey : UINT; wScanCode : UINT; lpKeyState : PBYTE; pwszBuff : LPWSTR; cchBuff : LONGINT; wFlags : UINT) : LONGINT;
    PROCEDURE OemKeyScan* (wOemChar : WORD) : DWORD;
    PROCEDURE VkKeyScanA* (ch : CHAR) : SHORT;
    PROCEDURE VkKeyScanW* (ch : WCHAR) : SHORT;
    PROCEDURE VkKeyScanExA* (ch : CHAR; dwhkl : HKL) : SHORT;
    PROCEDURE VkKeyScanExW* (ch : WCHAR; dwhkl : HKL) : SHORT;
    PROCEDURE keybd_event* (bVk : BYTE; bScan : BYTE; dwFlags : DWORD; dwExtraInfo : DWORD);
    PROCEDURE mouse_event* (dwFlags : DWORD; dx : DWORD; dy : DWORD; dwData : DWORD; dwExtraInfo : DWORD);
    PROCEDURE MapVirtualKeyA* (uCode : UINT; uMapType : UINT) : UINT;
    PROCEDURE MapVirtualKeyW* (uCode : UINT; uMapType : UINT) : UINT;
    PROCEDURE MapVirtualKeyExA* (uCode : UINT; uMapType : UINT; dwhkl : HKL) : UINT;
    PROCEDURE MapVirtualKeyExW* (uCode : UINT; uMapType : UINT; dwhkl : HKL) : UINT;
    PROCEDURE GetInputState* () : BOOL;
    PROCEDURE GetQueueStatus* (flags : UINT) : DWORD;
    PROCEDURE GetCapture* () : HWND;
    PROCEDURE SetCapture* (hWnd : HWND) : HWND;
    PROCEDURE ReleaseCapture* () : BOOL;
    PROCEDURE MsgWaitForMultipleObjects* (nCount : DWORD; VAR [nil] pHandles : HANDLE; fWaitAll : BOOL; dwMilliseconds : DWORD; dwWakeMask : DWORD) : DWORD;
    PROCEDURE MsgWaitForMultipleObjectsEx* (nCount : DWORD; VAR [nil] pHandles : HANDLE; dwMilliseconds : DWORD; dwWakeMask : DWORD; dwFlags : DWORD) : DWORD;
    PROCEDURE SetTimer* (hWnd : HWND; nIDEvent : UINT; uElapse : UINT; lpTimerFunc : TIMERPROC) : UINT;
    PROCEDURE KillTimer* (hWnd : HWND; uIDEvent : UINT) : BOOL;
    PROCEDURE IsWindowUnicode* (hWnd : HWND) : BOOL;
    PROCEDURE EnableWindow* (hWnd : HWND; bEnable : BOOL) : BOOL;
    PROCEDURE IsWindowEnabled* (hWnd : HWND) : BOOL;
    PROCEDURE LoadAcceleratorsA* (hInstance : HINSTANCE; lpTableName : LPCSTR) : HACCEL;
    PROCEDURE LoadAcceleratorsW* (hInstance : HINSTANCE; lpTableName : LPCWSTR) : HACCEL;
    PROCEDURE CreateAcceleratorTableA* (VAR [nil] p0 : tagACCEL_struct; p1 : LONGINT) : HACCEL;
    PROCEDURE CreateAcceleratorTableW* (VAR [nil] p0 : tagACCEL_struct; p1 : LONGINT) : HACCEL;
    PROCEDURE DestroyAcceleratorTable* (hAccel : HACCEL) : BOOL;
    PROCEDURE CopyAcceleratorTableA* (hAccelSrc : HACCEL; VAR [nil] lpAccelDst : tagACCEL_struct; cAccelEntries : LONGINT) : LONGINT;
    PROCEDURE CopyAcceleratorTableW* (hAccelSrc : HACCEL; VAR [nil] lpAccelDst : tagACCEL_struct; cAccelEntries : LONGINT) : LONGINT;
    PROCEDURE TranslateAcceleratorA* (hWnd : HWND; hAccTable : HACCEL; VAR [nil] lpMsg : tagMSG_struct) : LONGINT;
    PROCEDURE TranslateAcceleratorW* (hWnd : HWND; hAccTable : HACCEL; VAR [nil] lpMsg : tagMSG_struct) : LONGINT;
    PROCEDURE GetSystemMetrics* (nIndex : LONGINT) : LONGINT;
    PROCEDURE LoadMenuA* (hInstance : HINSTANCE; lpMenuName : LPCSTR) : HMENU;
    PROCEDURE LoadMenuW* (hInstance : HINSTANCE; lpMenuName : LPCWSTR) : HMENU;
    PROCEDURE LoadMenuIndirectA* (lpMenuTemplate : AutoPtr_MENUTEMPLATEA) : HMENU;
    PROCEDURE LoadMenuIndirectW* (lpMenuTemplate : AutoPtr_MENUTEMPLATEW) : HMENU;
    PROCEDURE GetMenu* (hWnd : HWND) : HMENU;
    PROCEDURE SetMenu* (hWnd : HWND; hMenu : HMENU) : BOOL;
    PROCEDURE ChangeMenuA* (hMenu : HMENU; cmd : UINT; lpszNewItem : LPCSTR; cmdInsert : UINT; flags : UINT) : BOOL;
    PROCEDURE ChangeMenuW* (hMenu : HMENU; cmd : UINT; lpszNewItem : LPCWSTR; cmdInsert : UINT; flags : UINT) : BOOL;
    PROCEDURE HiliteMenuItem* (hWnd : HWND; hMenu : HMENU; uIDHiliteItem : UINT; uHilite : UINT) : BOOL;
    PROCEDURE GetMenuStringA* (hMenu : HMENU; uIDItem : UINT; lpString : LPSTR; nMaxCount : LONGINT; uFlag : UINT) : LONGINT;
    PROCEDURE GetMenuStringW* (hMenu : HMENU; uIDItem : UINT; lpString : LPWSTR; nMaxCount : LONGINT; uFlag : UINT) : LONGINT;
    PROCEDURE GetMenuState* (hMenu : HMENU; uId : UINT; uFlags : UINT) : UINT;
    PROCEDURE DrawMenuBar* (hWnd : HWND) : BOOL;
    PROCEDURE GetSystemMenu* (hWnd : HWND; bRevert : BOOL) : HMENU;
    PROCEDURE CreateMenu* () : HMENU;
    PROCEDURE CreatePopupMenu* () : HMENU;
    PROCEDURE DestroyMenu* (hMenu : HMENU) : BOOL;
    PROCEDURE CheckMenuItem* (hMenu : HMENU; uIDCheckItem : UINT; uCheck : UINT) : DWORD;
    PROCEDURE EnableMenuItem* (hMenu : HMENU; uIDEnableItem : UINT; uEnable : UINT) : BOOL;
    PROCEDURE GetSubMenu* (hMenu : HMENU; nPos : LONGINT) : HMENU;
    PROCEDURE GetMenuItemID* (hMenu : HMENU; nPos : LONGINT) : UINT;
    PROCEDURE GetMenuItemCount* (hMenu : HMENU) : LONGINT;
    PROCEDURE InsertMenuA* (hMenu : HMENU; uPosition : UINT; uFlags : UINT; uIDNewItem : UINT; lpNewItem : LPCSTR) : BOOL;
    PROCEDURE InsertMenuW* (hMenu : HMENU; uPosition : UINT; uFlags : UINT; uIDNewItem : UINT; lpNewItem : LPCWSTR) : BOOL;
    PROCEDURE AppendMenuA* (hMenu : HMENU; uFlags : UINT; uIDNewItem : UINT; lpNewItem : LPCSTR) : BOOL;
    PROCEDURE AppendMenuW* (hMenu : HMENU; uFlags : UINT; uIDNewItem : UINT; lpNewItem : LPCWSTR) : BOOL;
    PROCEDURE ModifyMenuA* (hMnu : HMENU; uPosition : UINT; uFlags : UINT; uIDNewItem : UINT; lpNewItem : LPCSTR) : BOOL;
    PROCEDURE ModifyMenuW* (hMnu : HMENU; uPosition : UINT; uFlags : UINT; uIDNewItem : UINT; lpNewItem : LPCWSTR) : BOOL;
    PROCEDURE RemoveMenu* (hMenu : HMENU; uPosition : UINT; uFlags : UINT) : BOOL;
    PROCEDURE DeleteMenu* (hMenu : HMENU; uPosition : UINT; uFlags : UINT) : BOOL;
    PROCEDURE SetMenuItemBitmaps* (hMenu : HMENU; uPosition : UINT; uFlags : UINT; hBitmapUnchecked : HBITMAP; hBitmapChecked : HBITMAP) : BOOL;
    PROCEDURE GetMenuCheckMarkDimensions* () : LONG;
    PROCEDURE TrackPopupMenu* (hMenu : HMENU; uFlags : UINT; x : LONGINT; y : LONGINT; nReserved : LONGINT; hWnd : HWND; VAR [nil] prcRect : RECT) : BOOL;
    PROCEDURE TrackPopupMenuEx* (p0 : HMENU; p1 : UINT; p2 : LONGINT; p3 : LONGINT; p4 : HWND; VAR [nil] p5 : TPMPARAMS) : BOOL;
    PROCEDURE InsertMenuItemA* (p0 : HMENU; p1 : UINT; p2 : BOOL; VAR [nil] p3 : MENUITEMINFOA) : BOOL;
    PROCEDURE InsertMenuItemW* (p0 : HMENU; p1 : UINT; p2 : BOOL; VAR [nil] p3 : MENUITEMINFOW) : BOOL;
    PROCEDURE GetMenuItemInfoA* (p0 : HMENU; p1 : UINT; p2 : BOOL; VAR [nil] p3 : tagMENUITEMINFOA_struct) : BOOL;
    PROCEDURE GetMenuItemInfoW* (p0 : HMENU; p1 : UINT; p2 : BOOL; VAR [nil] p3 : tagMENUITEMINFOW_struct) : BOOL;
    PROCEDURE SetMenuItemInfoA* (p0 : HMENU; p1 : UINT; p2 : BOOL; VAR [nil] p3 : MENUITEMINFOA) : BOOL;
    PROCEDURE SetMenuItemInfoW* (p0 : HMENU; p1 : UINT; p2 : BOOL; VAR [nil] p3 : MENUITEMINFOW) : BOOL;
    PROCEDURE GetMenuDefaultItem* (hMenu : HMENU; fByPos : UINT; gmdiFlags : UINT) : UINT;
    PROCEDURE SetMenuDefaultItem* (hMenu : HMENU; uItem : UINT; fByPos : UINT) : BOOL;
    PROCEDURE GetMenuItemRect* (hWnd : HWND; hMenu : HMENU; uItem : UINT; VAR [nil] lprcItem : tagRECT_struct) : BOOL;
    PROCEDURE MenuItemFromPoint* (hWnd : HWND; hMenu : HMENU; ptScreen : POINT) : LONGINT;
    PROCEDURE DragObject* (p0 : HWND; p1 : HWND; p2 : UINT; p3 : DWORD; p4 : HCURSOR) : DWORD;
    PROCEDURE DragDetect* (p0 : HWND; p1 : POINT) : BOOL;
    PROCEDURE DrawIcon* (hDC : HDC; X : LONGINT; Y : LONGINT; hIcon : HICON) : BOOL;
    PROCEDURE DrawTextA* (hDC : HDC; lpString : LPCSTR; nCount : LONGINT; VAR [nil] lpRect : tagRECT_struct; uFormat : UINT) : LONGINT;
    PROCEDURE DrawTextW* (hDC : HDC; lpString : LPCWSTR; nCount : LONGINT; VAR [nil] lpRect : tagRECT_struct; uFormat : UINT) : LONGINT;
    PROCEDURE DrawTextExA* (p0 : HDC; p1 : LPSTR; p2 : LONGINT; VAR [nil] p3 : tagRECT_struct; p4 : UINT; VAR [nil] p5 : tagDRAWTEXTPARAMS_struct) : LONGINT;
    PROCEDURE DrawTextExW* (p0 : HDC; p1 : LPWSTR; p2 : LONGINT; VAR [nil] p3 : tagRECT_struct; p4 : UINT; VAR [nil] p5 : tagDRAWTEXTPARAMS_struct) : LONGINT;
    PROCEDURE GrayStringA* (hDC : HDC; hBrush : HBRUSH; lpOutputFunc : GRAYSTRINGPROC; lpData : LPARAM; nCount : LONGINT; X : LONGINT; Y : LONGINT; nWidth : LONGINT; nHeight : LONGINT) : BOOL;
    PROCEDURE GrayStringW* (hDC : HDC; hBrush : HBRUSH; lpOutputFunc : GRAYSTRINGPROC; lpData : LPARAM; nCount : LONGINT; X : LONGINT; Y : LONGINT; nWidth : LONGINT; nHeight : LONGINT) : BOOL;
    PROCEDURE DrawStateA* (p0 : HDC; p1 : HBRUSH; p2 : DRAWSTATEPROC; p3 : LPARAM; p4 : WPARAM; p5 : LONGINT; p6 : LONGINT; p7 : LONGINT; p8 : LONGINT; p9 : UINT) : BOOL;
    PROCEDURE DrawStateW* (p0 : HDC; p1 : HBRUSH; p2 : DRAWSTATEPROC; p3 : LPARAM; p4 : WPARAM; p5 : LONGINT; p6 : LONGINT; p7 : LONGINT; p8 : LONGINT; p9 : UINT) : BOOL;
    PROCEDURE TabbedTextOutA* (hDC : HDC; X : LONGINT; Y : LONGINT; lpString : LPCSTR; nCount : LONGINT; nTabPositions : LONGINT; VAR [nil] lpnTabStopPositions : LONGINT; nTabOrigin : LONGINT) : LONG;
    PROCEDURE TabbedTextOutW* (hDC : HDC; X : LONGINT; Y : LONGINT; lpString : LPCWSTR; nCount : LONGINT; nTabPositions : LONGINT; VAR [nil] lpnTabStopPositions : LONGINT; nTabOrigin : LONGINT) : LONG;
    PROCEDURE GetTabbedTextExtentA* (hDC : HDC; lpString : LPCSTR; nCount : LONGINT; nTabPositions : LONGINT; VAR [nil] lpnTabStopPositions : LONGINT) : DWORD;
    PROCEDURE GetTabbedTextExtentW* (hDC : HDC; lpString : LPCWSTR; nCount : LONGINT; nTabPositions : LONGINT; VAR [nil] lpnTabStopPositions : LONGINT) : DWORD;
    PROCEDURE UpdateWindow* (hWnd : HWND) : BOOL;
    PROCEDURE SetActiveWindow* (hWnd : HWND) : HWND;
    PROCEDURE GetForegroundWindow* () : HWND;
    PROCEDURE PaintDesktop* (hdc : HDC) : BOOL;
    PROCEDURE SetForegroundWindow* (hWnd : HWND) : BOOL;
    PROCEDURE WindowFromDC* (hDC : HDC) : HWND;
    PROCEDURE GetDC* (hWnd : HWND) : HDC;
    PROCEDURE GetDCEx* (hWnd : HWND; hrgnClip : HRGN; flags : DWORD) : HDC;
    PROCEDURE AlignRects* (VAR [nil] arc : tagRECT_struct; cCount : DWORD; iPrimary : DWORD; dwFlags : DWORD) : BOOL;
    PROCEDURE GetWindowDC* (hWnd : HWND) : HDC;
    PROCEDURE ReleaseDC* (hWnd : HWND; hDC : HDC) : LONGINT;
    PROCEDURE BeginPaint* (hWnd : HWND; VAR [nil] lpPaint : tagPAINTSTRUCT_struct) : HDC;
    PROCEDURE EndPaint* (hWnd : HWND; VAR [nil] lpPaint : PAINTSTRUCT) : BOOL;
    PROCEDURE GetUpdateRect* (hWnd : HWND; VAR [nil] lpRect : tagRECT_struct; bErase : BOOL) : BOOL;
    PROCEDURE GetUpdateRgn* (hWnd : HWND; hRgn : HRGN; bErase : BOOL) : LONGINT;
    PROCEDURE SetWindowRgn* (hWnd : HWND; hRgn : HRGN; bRedraw : BOOL) : LONGINT;
    PROCEDURE GetWindowRgn* (hWnd : HWND; hRgn : HRGN) : LONGINT;
    PROCEDURE ExcludeUpdateRgn* (hDC : HDC; hWnd : HWND) : LONGINT;
    PROCEDURE InvalidateRect* (hWnd : HWND; VAR [nil] lpRect : RECT; bErase : BOOL) : BOOL;
    PROCEDURE ValidateRect* (hWnd : HWND; VAR [nil] lpRect : RECT) : BOOL;
    PROCEDURE InvalidateRgn* (hWnd : HWND; hRgn : HRGN; bErase : BOOL) : BOOL;
    PROCEDURE ValidateRgn* (hWnd : HWND; hRgn : HRGN) : BOOL;
    PROCEDURE RedrawWindow* (hWnd : HWND; VAR [nil] lprcUpdate : RECT; hrgnUpdate : HRGN; flags : UINT) : BOOL;
    PROCEDURE LockWindowUpdate* (hWndLock : HWND) : BOOL;
    PROCEDURE ScrollWindow* (hWnd : HWND; XAmount : LONGINT; YAmount : LONGINT; VAR [nil] lpRect : RECT; VAR [nil] lpClipRect : RECT) : BOOL;
    PROCEDURE ScrollDC* (hDC : HDC; dx : LONGINT; dy : LONGINT; VAR [nil] lprcScroll : RECT; VAR [nil] lprcClip : RECT; hrgnUpdate : HRGN; VAR [nil] lprcUpdate : tagRECT_struct) : BOOL;
    PROCEDURE ScrollWindowEx* (hWnd : HWND; dx : LONGINT; dy : LONGINT; VAR [nil] prcScroll : RECT; VAR [nil] prcClip : RECT; hrgnUpdate : HRGN; VAR [nil] prcUpdate : tagRECT_struct; flags : UINT) : LONGINT;
    PROCEDURE SetScrollPos* (hWnd : HWND; nBar : LONGINT; nPos : LONGINT; bRedraw : BOOL) : LONGINT;
    PROCEDURE GetScrollPos* (hWnd : HWND; nBar : LONGINT) : LONGINT;
    PROCEDURE SetScrollRange* (hWnd : HWND; nBar : LONGINT; nMinPos : LONGINT; nMaxPos : LONGINT; bRedraw : BOOL) : BOOL;
    PROCEDURE GetScrollRange* (hWnd : HWND; nBar : LONGINT; VAR [nil] lpMinPos : LONGINT; VAR [nil] lpMaxPos : LONGINT) : BOOL;
    PROCEDURE ShowScrollBar* (hWnd : HWND; wBar : LONGINT; bShow : BOOL) : BOOL;
    PROCEDURE EnableScrollBar* (hWnd : HWND; wSBflags : UINT; wArrows : UINT) : BOOL;
    PROCEDURE SetPropA* (hWnd : HWND; lpString : LPCSTR; hData : HANDLE) : BOOL;
    PROCEDURE SetPropW* (hWnd : HWND; lpString : LPCWSTR; hData : HANDLE) : BOOL;
    PROCEDURE GetPropA* (hWnd : HWND; lpString : LPCSTR) : HANDLE;
    PROCEDURE GetPropW* (hWnd : HWND; lpString : LPCWSTR) : HANDLE;
    PROCEDURE RemovePropA* (hWnd : HWND; lpString : LPCSTR) : HANDLE;
    PROCEDURE RemovePropW* (hWnd : HWND; lpString : LPCWSTR) : HANDLE;
    PROCEDURE EnumPropsExA* (hWnd : HWND; lpEnumFunc : PROPENUMPROCEXA; lParam : LPARAM) : LONGINT;
    PROCEDURE EnumPropsExW* (hWnd : HWND; lpEnumFunc : PROPENUMPROCEXW; lParam : LPARAM) : LONGINT;
    PROCEDURE EnumPropsA* (hWnd : HWND; lpEnumFunc : PROPENUMPROCA) : LONGINT;
    PROCEDURE EnumPropsW* (hWnd : HWND; lpEnumFunc : PROPENUMPROCW) : LONGINT;
    PROCEDURE SetWindowTextA* (hWnd : HWND; lpString : LPCSTR) : BOOL;
    PROCEDURE SetWindowTextW* (hWnd : HWND; lpString : LPCWSTR) : BOOL;
    PROCEDURE GetWindowTextA* (hWnd : HWND; lpString : LPSTR; nMaxCount : LONGINT) : LONGINT;
    PROCEDURE GetWindowTextW* (hWnd : HWND; lpString : LPWSTR; nMaxCount : LONGINT) : LONGINT;
    PROCEDURE GetWindowTextLengthA* (hWnd : HWND) : LONGINT;
    PROCEDURE GetWindowTextLengthW* (hWnd : HWND) : LONGINT;
    PROCEDURE GetClientRect* (hWnd : HWND; VAR [nil] lpRect : tagRECT_struct) : BOOL;
    PROCEDURE GetWindowRect* (hWnd : HWND; VAR [nil] lpRect : tagRECT_struct) : BOOL;
    PROCEDURE AdjustWindowRect* (VAR [nil] lpRect : tagRECT_struct; dwStyle : DWORD; bMenu : BOOL) : BOOL;
    PROCEDURE AdjustWindowRectEx* (VAR [nil] lpRect : tagRECT_struct; dwStyle : DWORD; bMenu : BOOL; dwExStyle : DWORD) : BOOL;
    PROCEDURE SetWindowContextHelpId* (p0 : HWND; p1 : DWORD) : BOOL;
    PROCEDURE GetWindowContextHelpId* (p0 : HWND) : DWORD;
    PROCEDURE SetMenuContextHelpId* (p0 : HMENU; p1 : DWORD) : BOOL;
    PROCEDURE GetMenuContextHelpId* (p0 : HMENU) : DWORD;
    PROCEDURE MessageBoxA* (hWnd : HWND; lpText : LPCSTR; lpCaption : LPCSTR; uType : UINT) : LONGINT;
    PROCEDURE MessageBoxW* (hWnd : HWND; lpText : LPCWSTR; lpCaption : LPCWSTR; uType : UINT) : LONGINT;
    PROCEDURE MessageBoxExA* (hWnd : HWND; lpText : LPCSTR; lpCaption : LPCSTR; uType : UINT; wLanguageId : WORD) : LONGINT;
    PROCEDURE MessageBoxExW* (hWnd : HWND; lpText : LPCWSTR; lpCaption : LPCWSTR; uType : UINT; wLanguageId : WORD) : LONGINT;
    PROCEDURE MessageBoxIndirectA* (VAR [nil] p0 : tagMSGBOXPARAMSA_struct) : LONGINT;
    PROCEDURE MessageBoxIndirectW* (VAR [nil] p0 : tagMSGBOXPARAMSW_struct) : LONGINT;
    PROCEDURE MessageBeep* (uType : UINT) : BOOL;
    PROCEDURE ShowCursor* (bShow : BOOL) : LONGINT;
    PROCEDURE SetCursorPos* (X : LONGINT; Y : LONGINT) : BOOL;
    PROCEDURE SetCursor* (hCursor : HCURSOR) : HCURSOR;
    PROCEDURE GetCursorPos* (VAR [nil] lpPoint : tagPOINT_struct) : BOOL;
    PROCEDURE ClipCursor* (VAR [nil] lpRect : RECT) : BOOL;
    PROCEDURE GetClipCursor* (VAR [nil] lpRect : tagRECT_struct) : BOOL;
    PROCEDURE GetCursor* () : HCURSOR;
    PROCEDURE CreateCaret* (hWnd : HWND; hBitmap : HBITMAP; nWidth : LONGINT; nHeight : LONGINT) : BOOL;
    PROCEDURE GetCaretBlinkTime* () : UINT;
    PROCEDURE SetCaretBlinkTime* (uMSeconds : UINT) : BOOL;
    PROCEDURE DestroyCaret* () : BOOL;
    PROCEDURE HideCaret* (hWnd : HWND) : BOOL;
    PROCEDURE ShowCaret* (hWnd : HWND) : BOOL;
    PROCEDURE SetCaretPos* (X : LONGINT; Y : LONGINT) : BOOL;
    PROCEDURE GetCaretPos* (VAR [nil] lpPoint : tagPOINT_struct) : BOOL;
    PROCEDURE ClientToScreen* (hWnd : HWND; VAR [nil] lpPoint : tagPOINT_struct) : BOOL;
    PROCEDURE ScreenToClient* (hWnd : HWND; VAR [nil] lpPoint : tagPOINT_struct) : BOOL;
    PROCEDURE MapWindowPoints* (hWndFrom : HWND; hWndTo : HWND; VAR [nil] lpPoints : tagPOINT_struct; cPoints : UINT) : LONGINT;
    PROCEDURE WindowFromPoint* (Point : POINT) : HWND;
    PROCEDURE ChildWindowFromPoint* (hWndParent : HWND; Point : POINT) : HWND;
    PROCEDURE ChildWindowFromPointEx* (p0 : HWND; p1 : POINT; p2 : UINT) : HWND;
    PROCEDURE GetSysColor* (nIndex : LONGINT) : DWORD;
    PROCEDURE GetSysColorBrush* (nIndex : LONGINT) : HBRUSH;
    PROCEDURE SetSysColors* (cElements : LONGINT; VAR [nil] lpaElements : INT; VAR [nil] lpaRgbValues : COLORREF) : BOOL;
    PROCEDURE DrawFocusRect* (hDC : HDC; VAR [nil] lprc : RECT) : BOOL;
    PROCEDURE FillRect* (hDC : HDC; VAR [nil] lprc : RECT; hbr : HBRUSH) : LONGINT;
    PROCEDURE FrameRect* (hDC : HDC; VAR [nil] lprc : RECT; hbr : HBRUSH) : LONGINT;
    PROCEDURE InvertRect* (hDC : HDC; VAR [nil] lprc : RECT) : BOOL;
    PROCEDURE SetRect* (VAR [nil] lprc : tagRECT_struct; xLeft : LONGINT; yTop : LONGINT; xRight : LONGINT; yBottom : LONGINT) : BOOL;
    PROCEDURE SetRectEmpty* (VAR [nil] lprc : tagRECT_struct) : BOOL;
    PROCEDURE CopyRect* (VAR [nil] lprcDst : tagRECT_struct; VAR [nil] lprcSrc : RECT) : BOOL;
    PROCEDURE InflateRect* (VAR [nil] lprc : tagRECT_struct; dx : LONGINT; dy : LONGINT) : BOOL;
    PROCEDURE IntersectRect* (VAR [nil] lprcDst : tagRECT_struct; VAR [nil] lprcSrc1 : RECT; VAR [nil] lprcSrc2 : RECT) : BOOL;
    PROCEDURE UnionRect* (VAR [nil] lprcDst : tagRECT_struct; VAR [nil] lprcSrc1 : RECT; VAR [nil] lprcSrc2 : RECT) : BOOL;
    PROCEDURE SubtractRect* (VAR [nil] lprcDst : tagRECT_struct; VAR [nil] lprcSrc1 : RECT; VAR [nil] lprcSrc2 : RECT) : BOOL;
    PROCEDURE OffsetRect* (VAR [nil] lprc : tagRECT_struct; dx : LONGINT; dy : LONGINT) : BOOL;
    PROCEDURE IsRectEmpty* (VAR [nil] lprc : RECT) : BOOL;
    PROCEDURE EqualRect* (VAR [nil] lprc1 : RECT; VAR [nil] lprc2 : RECT) : BOOL;
    PROCEDURE PtInRect* (VAR [nil] lprc : RECT; pt : POINT) : BOOL;
    PROCEDURE GetWindowWord* (hWnd : HWND; nIndex : LONGINT) : WORD;
    PROCEDURE SetWindowWord* (hWnd : HWND; nIndex : LONGINT; wNewWord : WORD) : WORD;
    PROCEDURE GetWindowLongA* (hWnd : HWND; nIndex : LONGINT) : LONG;
    PROCEDURE GetWindowLongW* (hWnd : HWND; nIndex : LONGINT) : LONG;
    PROCEDURE SetWindowLongA* (hWnd : HWND; nIndex : LONGINT; dwNewLong : LONG) : LONG;
    PROCEDURE SetWindowLongW* (hWnd : HWND; nIndex : LONGINT; dwNewLong : LONG) : LONG;
    PROCEDURE GetClassWord* (hWnd : HWND; nIndex : LONGINT) : WORD;
    PROCEDURE SetClassWord* (hWnd : HWND; nIndex : LONGINT; wNewWord : WORD) : WORD;
    PROCEDURE GetClassLongA* (hWnd : HWND; nIndex : LONGINT) : DWORD;
    PROCEDURE GetClassLongW* (hWnd : HWND; nIndex : LONGINT) : DWORD;
    PROCEDURE SetClassLongA* (hWnd : HWND; nIndex : LONGINT; dwNewLong : LONG) : DWORD;
    PROCEDURE SetClassLongW* (hWnd : HWND; nIndex : LONGINT; dwNewLong : LONG) : DWORD;
    PROCEDURE GetDesktopWindow* () : HWND;
    PROCEDURE GetParent* (hWnd : HWND) : HWND;
    PROCEDURE SetParent* (hWndChild : HWND; hWndNewParent : HWND) : HWND;
    PROCEDURE EnumChildWindows* (hWndParent : HWND; lpEnumFunc : WNDENUMPROC; lParam : LPARAM) : BOOL;
    PROCEDURE FindWindowA* (lpClassName : LPCSTR; lpWindowName : LPCSTR) : HWND;
    PROCEDURE FindWindowW* (lpClassName : LPCWSTR; lpWindowName : LPCWSTR) : HWND;
    PROCEDURE FindWindowExA* (p0 : HWND; p1 : HWND; p2 : LPCSTR; p3 : LPCSTR) : HWND;
    PROCEDURE FindWindowExW* (p0 : HWND; p1 : HWND; p2 : LPCWSTR; p3 : LPCWSTR) : HWND;
    PROCEDURE EnumWindows* (lpEnumFunc : WNDENUMPROC; lParam : LPARAM) : BOOL;
    PROCEDURE EnumThreadWindows* (dwThreadId : DWORD; lpfn : WNDENUMPROC; lParam : LPARAM) : BOOL;
    PROCEDURE GetClassNameA* (hWnd : HWND; lpClassName : LPSTR; nMaxCount : LONGINT) : LONGINT;
    PROCEDURE GetClassNameW* (hWnd : HWND; lpClassName : LPWSTR; nMaxCount : LONGINT) : LONGINT;
    PROCEDURE GetTopWindow* (hWnd : HWND) : HWND;
    PROCEDURE GetWindowThreadProcessId* (hWnd : HWND; VAR [nil] lpdwProcessId : DWORD) : DWORD;
    PROCEDURE GetLastActivePopup* (hWnd : HWND) : HWND;
    PROCEDURE GetWindow* (hWnd : HWND; uCmd : UINT) : HWND;
    PROCEDURE SetWindowsHookA* (nFilterType : LONGINT; pfnFilterProc : HOOKPROC) : HOOKPROC;
    PROCEDURE SetWindowsHookW* (nFilterType : LONGINT; pfnFilterProc : HOOKPROC) : HOOKPROC;
    PROCEDURE UnhookWindowsHook* (nCode : LONGINT; pfnFilterProc : HOOKPROC) : BOOL;
    PROCEDURE SetWindowsHookExA* (idHook : LONGINT; lpfn : HOOKPROC; hmod : HINSTANCE; dwThreadId : DWORD) : HHOOK;
    PROCEDURE SetWindowsHookExW* (idHook : LONGINT; lpfn : HOOKPROC; hmod : HINSTANCE; dwThreadId : DWORD) : HHOOK;
    PROCEDURE UnhookWindowsHookEx* (hhk : HHOOK) : BOOL;
    PROCEDURE CallNextHookEx* (hhk : HHOOK; nCode : LONGINT; wParam : WPARAM; lParam : LPARAM) : LRESULT;
    PROCEDURE CheckMenuRadioItem* (p0 : HMENU; p1 : UINT; p2 : UINT; p3 : UINT; p4 : UINT) : BOOL;
    PROCEDURE LoadBitmapA* (hInstance : HINSTANCE; lpBitmapName : LPCSTR) : HBITMAP;
    PROCEDURE LoadBitmapW* (hInstance : HINSTANCE; lpBitmapName : LPCWSTR) : HBITMAP;
    PROCEDURE LoadCursorA* (hInstance : HINSTANCE; lpCursorName : LPCSTR) : HCURSOR;
    PROCEDURE LoadCursorW* (hInstance : HINSTANCE; lpCursorName : LPCWSTR) : HCURSOR;
    PROCEDURE LoadCursorFromFileA* (lpFileName : LPCSTR) : HCURSOR;
    PROCEDURE LoadCursorFromFileW* (lpFileName : LPCWSTR) : HCURSOR;
    PROCEDURE CreateCursor* (hInst : HINSTANCE; xHotSpot : LONGINT; yHotSpot : LONGINT; nWidth : LONGINT; nHeight : LONGINT; pvANDPlane : LPVOID; pvXORPlane : LPVOID) : HCURSOR;
    PROCEDURE DestroyCursor* (hCursor : HCURSOR) : BOOL;
    PROCEDURE SetSystemCursor* (hcur : HCURSOR; id : DWORD) : BOOL;
    PROCEDURE LoadIconA* (hInstance : HINSTANCE; lpIconName : LPCSTR) : HICON;
    PROCEDURE LoadIconW* (hInstance : HINSTANCE; lpIconName : LPCWSTR) : HICON;
    PROCEDURE CreateIcon* (hInstance : HINSTANCE; nWidth : LONGINT; nHeight : LONGINT; cPlanes : BYTE; cBitsPixel : BYTE; lpbANDbits : PBYTE; lpbXORbits : PBYTE) : HICON;
    PROCEDURE DestroyIcon* (hIcon : HICON) : BOOL;
    PROCEDURE LookupIconIdFromDirectory* (presbits : PBYTE; fIcon : BOOL) : LONGINT;
    PROCEDURE LookupIconIdFromDirectoryEx* (presbits : PBYTE; fIcon : BOOL; cxDesired : LONGINT; cyDesired : LONGINT; Flags : UINT) : LONGINT;
    PROCEDURE CreateIconFromResource* (presbits : PBYTE; dwResSize : DWORD; fIcon : BOOL; dwVer : DWORD) : HICON;
    PROCEDURE CreateIconFromResourceEx* (presbits : PBYTE; dwResSize : DWORD; fIcon : BOOL; dwVer : DWORD; cxDesired : LONGINT; cyDesired : LONGINT; Flags : UINT) : HICON;
    PROCEDURE LoadImageA* (p0 : HINSTANCE; p1 : LPCSTR; p2 : UINT; p3 : LONGINT; p4 : LONGINT; p5 : UINT) : HANDLE;
    PROCEDURE LoadImageW* (p0 : HINSTANCE; p1 : LPCWSTR; p2 : UINT; p3 : LONGINT; p4 : LONGINT; p5 : UINT) : HANDLE;
    PROCEDURE CopyImage* (p0 : HANDLE; p1 : UINT; p2 : LONGINT; p3 : LONGINT; p4 : UINT) : HANDLE;
    PROCEDURE DrawIconEx* (hdc : HDC; xLeft : LONGINT; yTop : LONGINT; hIcon : HICON; cxWidth : LONGINT; cyWidth : LONGINT; istepIfAniCur : UINT; hbrFlickerFreeDraw : HBRUSH; diFlags : UINT) : BOOL;
    PROCEDURE CreateIconIndirect* (VAR [nil] piconinfo : ICONINFO) : HICON;
    PROCEDURE CopyIcon* (hIcon : HICON) : HICON;
    PROCEDURE GetIconInfo* (hIcon : HICON; VAR [nil] piconinfo : ICONINFO) : BOOL;
    PROCEDURE LoadStringA* (hInstance : HINSTANCE; uID : UINT; lpBuffer : LPSTR; nBufferMax : LONGINT) : LONGINT;
    PROCEDURE LoadStringW* (hInstance : HINSTANCE; uID : UINT; lpBuffer : LPWSTR; nBufferMax : LONGINT) : LONGINT;
    PROCEDURE IsDialogMessageA* (hDlg : HWND; VAR [nil] lpMsg : tagMSG_struct) : BOOL;
    PROCEDURE IsDialogMessageW* (hDlg : HWND; VAR [nil] lpMsg : tagMSG_struct) : BOOL;
    PROCEDURE MapDialogRect* (hDlg : HWND; VAR [nil] lpRect : tagRECT_struct) : BOOL;
    PROCEDURE DlgDirListA* (hDlg : HWND; lpPathSpec : LPSTR; nIDListBox : LONGINT; nIDStaticPath : LONGINT; uFileType : UINT) : LONGINT;
    PROCEDURE DlgDirListW* (hDlg : HWND; lpPathSpec : LPWSTR; nIDListBox : LONGINT; nIDStaticPath : LONGINT; uFileType : UINT) : LONGINT;
    PROCEDURE DlgDirSelectExA* (hDlg : HWND; lpString : LPSTR; nCount : LONGINT; nIDListBox : LONGINT) : BOOL;
    PROCEDURE DlgDirSelectExW* (hDlg : HWND; lpString : LPWSTR; nCount : LONGINT; nIDListBox : LONGINT) : BOOL;
    PROCEDURE DlgDirListComboBoxA* (hDlg : HWND; lpPathSpec : LPSTR; nIDComboBox : LONGINT; nIDStaticPath : LONGINT; uFiletype : UINT) : LONGINT;
    PROCEDURE DlgDirListComboBoxW* (hDlg : HWND; lpPathSpec : LPWSTR; nIDComboBox : LONGINT; nIDStaticPath : LONGINT; uFiletype : UINT) : LONGINT;
    PROCEDURE DlgDirSelectComboBoxExA* (hDlg : HWND; lpString : LPSTR; nCount : LONGINT; nIDComboBox : LONGINT) : BOOL;
    PROCEDURE DlgDirSelectComboBoxExW* (hDlg : HWND; lpString : LPWSTR; nCount : LONGINT; nIDComboBox : LONGINT) : BOOL;
    PROCEDURE SetScrollInfo* (p0 : HWND; p1 : LONGINT; VAR [nil] p2 : SCROLLINFO; p3 : BOOL) : LONGINT;
    PROCEDURE GetScrollInfo* (p0 : HWND; p1 : LONGINT; VAR [nil] p2 : tagSCROLLINFO_struct) : BOOL;
    PROCEDURE DefFrameProcA* (hWnd : HWND; hWndMDIClient : HWND; uMsg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT;
    PROCEDURE DefFrameProcW* (hWnd : HWND; hWndMDIClient : HWND; uMsg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT;
    PROCEDURE DefMDIChildProcA* (hWnd : HWND; uMsg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT;
    PROCEDURE DefMDIChildProcW* (hWnd : HWND; uMsg : UINT; wParam : WPARAM; lParam : LPARAM) : LRESULT;
    PROCEDURE TranslateMDISysAccel* (hWndClient : HWND; VAR [nil] lpMsg : tagMSG_struct) : BOOL;
    PROCEDURE ArrangeIconicWindows* (hWnd : HWND) : UINT;
    PROCEDURE CreateMDIWindowA* (lpClassName : LPSTR; lpWindowName : LPSTR; dwStyle : DWORD; X : LONGINT; Y : LONGINT; nWidth : LONGINT; nHeight : LONGINT; hWndParent : HWND; hInstance : HINSTANCE; lParam : LPARAM) : HWND;
    PROCEDURE CreateMDIWindowW* (lpClassName : LPWSTR; lpWindowName : LPWSTR; dwStyle : DWORD; X : LONGINT; Y : LONGINT; nWidth : LONGINT; nHeight : LONGINT; hWndParent : HWND; hInstance : HINSTANCE; lParam : LPARAM) : HWND;
    PROCEDURE TileWindows* (hwndParent : HWND; wHow : UINT; VAR [nil] lpRect : RECT; cKids : UINT; VAR [nil] lpKids : HWND) : WORD;
    PROCEDURE CascadeWindows* (hwndParent : HWND; wHow : UINT; VAR [nil] lpRect : RECT; cKids : UINT; VAR [nil] lpKids : HWND) : WORD;
    PROCEDURE WinHelpA* (hWndMain : HWND; lpszHelp : LPCSTR; uCommand : UINT; dwData : DWORD) : BOOL;
    PROCEDURE WinHelpW* (hWndMain : HWND; lpszHelp : LPCWSTR; uCommand : UINT; dwData : DWORD) : BOOL;
    PROCEDURE ChangeDisplaySettingsA* (VAR [nil] lpDevMode : _devicemodeA_struct; dwFlags : DWORD) : LONG;
    PROCEDURE ChangeDisplaySettingsW* (VAR [nil] lpDevMode : _devicemodeW_struct; dwFlags : DWORD) : LONG;
    PROCEDURE ChangeDisplaySettingsExA* (lpszDeviceName : LPCSTR; VAR [nil] lpDevMode : _devicemodeA_struct; hwnd : HWND; dwflags : DWORD; lParam : LPVOID) : LONG;
    PROCEDURE ChangeDisplaySettingsExW* (lpszDeviceName : LPCWSTR; VAR [nil] lpDevMode : _devicemodeW_struct; hwnd : HWND; dwflags : DWORD; lParam : LPVOID) : LONG;
    PROCEDURE EnumDisplaySettingsA* (lpszDeviceName : LPCSTR; iModeNum : DWORD; VAR [nil] lpDevMode : _devicemodeA_struct) : BOOL;
    PROCEDURE EnumDisplaySettingsW* (lpszDeviceName : LPCWSTR; iModeNum : DWORD; VAR [nil] lpDevMode : _devicemodeW_struct) : BOOL;
    PROCEDURE SystemParametersInfoA* (uiAction : UINT; uiParam : UINT; pvParam : PVOID; fWinIni : UINT) : BOOL;
    PROCEDURE SystemParametersInfoW* (uiAction : UINT; uiParam : UINT; pvParam : PVOID; fWinIni : UINT) : BOOL;
    PROCEDURE SetDebugErrorLevel* (dwLevel : DWORD);
    PROCEDURE SetLastErrorEx* (dwErrCode : DWORD; dwType : DWORD);
    PROCEDURE IsValidCodePage* (CodePage : UINT) : BOOL;
    PROCEDURE GetACP* () : UINT;
    PROCEDURE GetOEMCP* () : UINT;
    PROCEDURE GetCPInfo* (CodePage : UINT; VAR [nil] lpCPInfo : _cpinfo_struct) : BOOL;
    PROCEDURE GetCPInfoExA* (CodePage : UINT; dwFlags : DWORD; VAR [nil] lpCPInfoEx : _cpinfoexA_struct) : BOOL;
    PROCEDURE GetCPInfoExW* (CodePage : UINT; dwFlags : DWORD; VAR [nil] lpCPInfoEx : _cpinfoexW_struct) : BOOL;
    PROCEDURE IsDBCSLeadByte* (TestChar : BYTE) : BOOL;
    PROCEDURE IsDBCSLeadByteEx* (CodePage : UINT; TestChar : BYTE) : BOOL;
    PROCEDURE MultiByteToWideChar* (CodePage : UINT; dwFlags : DWORD; lpMultiByteStr : LPCSTR; cchMultiByte : LONGINT; lpWideCharStr : LPWSTR; cchWideChar : LONGINT) : LONGINT;
    PROCEDURE WideCharToMultiByte* (CodePage : UINT; dwFlags : DWORD; lpWideCharStr : LPCWSTR; cchWideChar : LONGINT; lpMultiByteStr : LPSTR; cchMultiByte : LONGINT; lpDefaultChar : LPCSTR; VAR [nil] lpUsedDefaultChar : BOOL) : LONGINT;
    PROCEDURE CompareStringA* (Locale : LCID; dwCmpFlags : DWORD; lpString1 : LPCSTR; cchCount1 : LONGINT; lpString2 : LPCSTR; cchCount2 : LONGINT) : LONGINT;
    PROCEDURE CompareStringW* (Locale : LCID; dwCmpFlags : DWORD; lpString1 : LPCWSTR; cchCount1 : LONGINT; lpString2 : LPCWSTR; cchCount2 : LONGINT) : LONGINT;
    PROCEDURE LCMapStringA* (Locale : LCID; dwMapFlags : DWORD; lpSrcStr : LPCSTR; cchSrc : LONGINT; lpDestStr : LPSTR; cchDest : LONGINT) : LONGINT;
    PROCEDURE LCMapStringW* (Locale : LCID; dwMapFlags : DWORD; lpSrcStr : LPCWSTR; cchSrc : LONGINT; lpDestStr : LPWSTR; cchDest : LONGINT) : LONGINT;
    PROCEDURE GetLocaleInfoA* (Locale : LCID; LCType : LCTYPE; lpLCData : LPSTR; cchData : LONGINT) : LONGINT;
    PROCEDURE GetLocaleInfoW* (Locale : LCID; LCType : LCTYPE; lpLCData : LPWSTR; cchData : LONGINT) : LONGINT;
    PROCEDURE SetLocaleInfoA* (Locale : LCID; LCType : LCTYPE; lpLCData : LPCSTR) : BOOL;
    PROCEDURE SetLocaleInfoW* (Locale : LCID; LCType : LCTYPE; lpLCData : LPCWSTR) : BOOL;
    PROCEDURE GetTimeFormatA* (Locale : LCID; dwFlags : DWORD; VAR [nil] lpTime : SYSTEMTIME; lpFormat : LPCSTR; lpTimeStr : LPSTR; cchTime : LONGINT) : LONGINT;
    PROCEDURE GetTimeFormatW* (Locale : LCID; dwFlags : DWORD; VAR [nil] lpTime : SYSTEMTIME; lpFormat : LPCWSTR; lpTimeStr : LPWSTR; cchTime : LONGINT) : LONGINT;
    PROCEDURE GetDateFormatA* (Locale : LCID; dwFlags : DWORD; VAR [nil] lpDate : SYSTEMTIME; lpFormat : LPCSTR; lpDateStr : LPSTR; cchDate : LONGINT) : LONGINT;
    PROCEDURE GetDateFormatW* (Locale : LCID; dwFlags : DWORD; VAR [nil] lpDate : SYSTEMTIME; lpFormat : LPCWSTR; lpDateStr : LPWSTR; cchDate : LONGINT) : LONGINT;
    PROCEDURE GetNumberFormatA* (Locale : LCID; dwFlags : DWORD; lpValue : LPCSTR; VAR [nil] lpFormat : NUMBERFMTA; lpNumberStr : LPSTR; cchNumber : LONGINT) : LONGINT;
    PROCEDURE GetNumberFormatW* (Locale : LCID; dwFlags : DWORD; lpValue : LPCWSTR; VAR [nil] lpFormat : NUMBERFMTW; lpNumberStr : LPWSTR; cchNumber : LONGINT) : LONGINT;
    PROCEDURE GetCurrencyFormatA* (Locale : LCID; dwFlags : DWORD; lpValue : LPCSTR; VAR [nil] lpFormat : CURRENCYFMTA; lpCurrencyStr : LPSTR; cchCurrency : LONGINT) : LONGINT;
    PROCEDURE GetCurrencyFormatW* (Locale : LCID; dwFlags : DWORD; lpValue : LPCWSTR; VAR [nil] lpFormat : CURRENCYFMTW; lpCurrencyStr : LPWSTR; cchCurrency : LONGINT) : LONGINT;
    PROCEDURE EnumCalendarInfoA* (lpCalInfoEnumProc : CALINFO_ENUMPROCA; Locale : LCID; Calendar : CALID; CalType : CALTYPE) : BOOL;
    PROCEDURE EnumCalendarInfoW* (lpCalInfoEnumProc : CALINFO_ENUMPROCW; Locale : LCID; Calendar : CALID; CalType : CALTYPE) : BOOL;
    PROCEDURE EnumTimeFormatsA* (lpTimeFmtEnumProc : TIMEFMT_ENUMPROCA; Locale : LCID; dwFlags : DWORD) : BOOL;
    PROCEDURE EnumTimeFormatsW* (lpTimeFmtEnumProc : TIMEFMT_ENUMPROCW; Locale : LCID; dwFlags : DWORD) : BOOL;
    PROCEDURE EnumDateFormatsA* (lpDateFmtEnumProc : DATEFMT_ENUMPROCA; Locale : LCID; dwFlags : DWORD) : BOOL;
    PROCEDURE EnumDateFormatsW* (lpDateFmtEnumProc : DATEFMT_ENUMPROCW; Locale : LCID; dwFlags : DWORD) : BOOL;
    PROCEDURE IsValidLocale* (Locale : LCID; dwFlags : DWORD) : BOOL;
    PROCEDURE ConvertDefaultLocale* (Locale : LCID) : LCID;
    PROCEDURE GetThreadLocale* () : LCID;
    PROCEDURE SetThreadLocale* (Locale : LCID) : BOOL;
    PROCEDURE GetSystemDefaultLangID* () : LANGID;
    PROCEDURE GetUserDefaultLangID* () : LANGID;
    PROCEDURE GetSystemDefaultLCID* () : LCID;
    PROCEDURE GetUserDefaultLCID* () : LCID;
    PROCEDURE GetStringTypeExA* (Locale : LCID; dwInfoType : DWORD; lpSrcStr : LPCSTR; cchSrc : LONGINT; VAR [nil] lpCharType : WORD) : BOOL;
    PROCEDURE GetStringTypeExW* (Locale : LCID; dwInfoType : DWORD; lpSrcStr : LPCWSTR; cchSrc : LONGINT; VAR [nil] lpCharType : WORD) : BOOL;
    PROCEDURE GetStringTypeA* (Locale : LCID; dwInfoType : DWORD; lpSrcStr : LPCSTR; cchSrc : LONGINT; VAR [nil] lpCharType : WORD) : BOOL;
    PROCEDURE GetStringTypeW* (dwInfoType : DWORD; lpSrcStr : LPCWSTR; cchSrc : LONGINT; VAR [nil] lpCharType : WORD) : BOOL;
    PROCEDURE FoldStringA* (dwMapFlags : DWORD; lpSrcStr : LPCSTR; cchSrc : LONGINT; lpDestStr : LPSTR; cchDest : LONGINT) : LONGINT;
    PROCEDURE FoldStringW* (dwMapFlags : DWORD; lpSrcStr : LPCWSTR; cchSrc : LONGINT; lpDestStr : LPWSTR; cchDest : LONGINT) : LONGINT;
    PROCEDURE EnumSystemLocalesA* (lpLocaleEnumProc : LOCALE_ENUMPROCA; dwFlags : DWORD) : BOOL;
    PROCEDURE EnumSystemLocalesW* (lpLocaleEnumProc : LOCALE_ENUMPROCW; dwFlags : DWORD) : BOOL;
    PROCEDURE EnumSystemCodePagesA* (lpCodePageEnumProc : CODEPAGE_ENUMPROCA; dwFlags : DWORD) : BOOL;
    PROCEDURE EnumSystemCodePagesW* (lpCodePageEnumProc : CODEPAGE_ENUMPROCW; dwFlags : DWORD) : BOOL;
    PROCEDURE PeekConsoleInputA* (hConsoleInput : HANDLE; VAR [nil] lpBuffer : _INPUT_RECORD_struct; nLength : DWORD; VAR [nil] lpNumberOfEventsRead : DWORD) : BOOL;
    PROCEDURE PeekConsoleInputW* (hConsoleInput : HANDLE; VAR [nil] lpBuffer : _INPUT_RECORD_struct; nLength : DWORD; VAR [nil] lpNumberOfEventsRead : DWORD) : BOOL;
    PROCEDURE ReadConsoleInputA* (hConsoleInput : HANDLE; VAR [nil] lpBuffer : _INPUT_RECORD_struct; nLength : DWORD; VAR [nil] lpNumberOfEventsRead : DWORD) : BOOL;
    PROCEDURE ReadConsoleInputW* (hConsoleInput : HANDLE; VAR [nil] lpBuffer : _INPUT_RECORD_struct; nLength : DWORD; VAR [nil] lpNumberOfEventsRead : DWORD) : BOOL;
    PROCEDURE WriteConsoleInputA* (hConsoleInput : HANDLE; VAR [nil] lpBuffer : INPUT_RECORD; nLength : DWORD; VAR [nil] lpNumberOfEventsWritten : DWORD) : BOOL;
    PROCEDURE WriteConsoleInputW* (hConsoleInput : HANDLE; VAR [nil] lpBuffer : INPUT_RECORD; nLength : DWORD; VAR [nil] lpNumberOfEventsWritten : DWORD) : BOOL;
    PROCEDURE ReadConsoleOutputA* (hConsoleOutput : HANDLE; VAR [nil] lpBuffer : _CHAR_INFO_struct; dwBufferSize : COORD; dwBufferCoord : COORD; VAR [nil] lpReadRegion : _SMALL_RECT_struct) : BOOL;
    PROCEDURE ReadConsoleOutputW* (hConsoleOutput : HANDLE; VAR [nil] lpBuffer : _CHAR_INFO_struct; dwBufferSize : COORD; dwBufferCoord : COORD; VAR [nil] lpReadRegion : _SMALL_RECT_struct) : BOOL;
    PROCEDURE WriteConsoleOutputA* (hConsoleOutput : HANDLE; VAR [nil] lpBuffer : CHAR_INFO; dwBufferSize : COORD; dwBufferCoord : COORD; VAR [nil] lpWriteRegion : _SMALL_RECT_struct) : BOOL;
    PROCEDURE WriteConsoleOutputW* (hConsoleOutput : HANDLE; VAR [nil] lpBuffer : CHAR_INFO; dwBufferSize : COORD; dwBufferCoord : COORD; VAR [nil] lpWriteRegion : _SMALL_RECT_struct) : BOOL;
    PROCEDURE ReadConsoleOutputCharacterA* (hConsoleOutput : HANDLE; lpCharacter : LPSTR; nLength : DWORD; dwReadCoord : COORD; VAR [nil] lpNumberOfCharsRead : DWORD) : BOOL;
    PROCEDURE ReadConsoleOutputCharacterW* (hConsoleOutput : HANDLE; lpCharacter : LPWSTR; nLength : DWORD; dwReadCoord : COORD; VAR [nil] lpNumberOfCharsRead : DWORD) : BOOL;
    PROCEDURE ReadConsoleOutputAttribute* (hConsoleOutput : HANDLE; VAR [nil] lpAttribute : WORD; nLength : DWORD; dwReadCoord : COORD; VAR [nil] lpNumberOfAttrsRead : DWORD) : BOOL;
    PROCEDURE WriteConsoleOutputCharacterA* (hConsoleOutput : HANDLE; lpCharacter : LPCSTR; nLength : DWORD; dwWriteCoord : COORD; VAR [nil] lpNumberOfCharsWritten : DWORD) : BOOL;
    PROCEDURE WriteConsoleOutputCharacterW* (hConsoleOutput : HANDLE; lpCharacter : LPCWSTR; nLength : DWORD; dwWriteCoord : COORD; VAR [nil] lpNumberOfCharsWritten : DWORD) : BOOL;
    PROCEDURE WriteConsoleOutputAttribute* (hConsoleOutput : HANDLE; VAR [nil] lpAttribute : WORD; nLength : DWORD; dwWriteCoord : COORD; VAR [nil] lpNumberOfAttrsWritten : DWORD) : BOOL;
    PROCEDURE FillConsoleOutputCharacterA* (hConsoleOutput : HANDLE; cCharacter : CHAR; nLength : DWORD; dwWriteCoord : COORD; VAR [nil] lpNumberOfCharsWritten : DWORD) : BOOL;
    PROCEDURE FillConsoleOutputCharacterW* (hConsoleOutput : HANDLE; cCharacter : WCHAR; nLength : DWORD; dwWriteCoord : COORD; VAR [nil] lpNumberOfCharsWritten : DWORD) : BOOL;
    PROCEDURE FillConsoleOutputAttribute* (hConsoleOutput : HANDLE; wAttribute : WORD; nLength : DWORD; dwWriteCoord : COORD; VAR [nil] lpNumberOfAttrsWritten : DWORD) : BOOL;
    PROCEDURE GetConsoleMode* (hConsoleHandle : HANDLE; VAR [nil] lpMode : DWORD) : BOOL;
    PROCEDURE GetNumberOfConsoleInputEvents* (hConsoleInput : HANDLE; VAR [nil] lpNumberOfEvents : DWORD) : BOOL;
    PROCEDURE GetConsoleScreenBufferInfo* (hConsoleOutput : HANDLE; VAR [nil] lpConsoleScreenBufferInfo : _CONSOLE_SCREEN_BUFFER_INFO_struct) : BOOL;
    (* H2O: function returns record.
        PROCEDURE GetLargestConsoleWindowSize* (hConsoleOutput : HANDLE) : COORD; *)
    PROCEDURE GetConsoleCursorInfo* (hConsoleOutput : HANDLE; VAR [nil] lpConsoleCursorInfo : _CONSOLE_CURSOR_INFO_struct) : BOOL;
    PROCEDURE GetNumberOfConsoleMouseButtons* (VAR [nil] lpNumberOfMouseButtons : DWORD) : BOOL;
    PROCEDURE SetConsoleMode* (hConsoleHandle : HANDLE; dwMode : DWORD) : BOOL;
    PROCEDURE SetConsoleActiveScreenBuffer* (hConsoleOutput : HANDLE) : BOOL;
    PROCEDURE FlushConsoleInputBuffer* (hConsoleInput : HANDLE) : BOOL;
    PROCEDURE SetConsoleScreenBufferSize* (hConsoleOutput : HANDLE; dwSize : COORD) : BOOL;
    PROCEDURE SetConsoleCursorPosition* (hConsoleOutput : HANDLE; dwCursorPosition : COORD) : BOOL;
    PROCEDURE SetConsoleCursorInfo* (hConsoleOutput : HANDLE; VAR [nil] lpConsoleCursorInfo : CONSOLE_CURSOR_INFO) : BOOL;
    PROCEDURE ScrollConsoleScreenBufferA* (hConsoleOutput : HANDLE; VAR [nil] lpScrollRectangle : SMALL_RECT; VAR [nil] lpClipRectangle : SMALL_RECT; dwDestinationOrigin : COORD; VAR [nil] lpFill : CHAR_INFO) : BOOL;
    PROCEDURE ScrollConsoleScreenBufferW* (hConsoleOutput : HANDLE; VAR [nil] lpScrollRectangle : SMALL_RECT; VAR [nil] lpClipRectangle : SMALL_RECT; dwDestinationOrigin : COORD; VAR [nil] lpFill : CHAR_INFO) : BOOL;
    PROCEDURE SetConsoleWindowInfo* (hConsoleOutput : HANDLE; bAbsolute : BOOL; VAR [nil] lpConsoleWindow : SMALL_RECT) : BOOL;
    PROCEDURE SetConsoleTextAttribute* (hConsoleOutput : HANDLE; wAttributes : WORD) : BOOL;
    PROCEDURE SetConsoleCtrlHandler* (HandlerRoutine : PHANDLER_ROUTINE; Add : BOOL) : BOOL;
    PROCEDURE GenerateConsoleCtrlEvent* (dwCtrlEvent : DWORD; dwProcessGroupId : DWORD) : BOOL;
    PROCEDURE AllocConsole* () : BOOL;
    PROCEDURE FreeConsole* () : BOOL;
    PROCEDURE GetConsoleTitleA* (lpConsoleTitle : LPSTR; nSize : DWORD) : DWORD;
    PROCEDURE GetConsoleTitleW* (lpConsoleTitle : LPWSTR; nSize : DWORD) : DWORD;
    PROCEDURE SetConsoleTitleA* (lpConsoleTitle : LPCSTR) : BOOL;
    PROCEDURE SetConsoleTitleW* (lpConsoleTitle : LPCWSTR) : BOOL;
    PROCEDURE ReadConsoleA* (hConsoleInput : HANDLE; lpBuffer : LPVOID; nNumberOfCharsToRead : DWORD; VAR [nil] lpNumberOfCharsRead : DWORD; lpReserved : LPVOID) : BOOL;
    PROCEDURE ReadConsoleW* (hConsoleInput : HANDLE; lpBuffer : LPVOID; nNumberOfCharsToRead : DWORD; VAR [nil] lpNumberOfCharsRead : DWORD; lpReserved : LPVOID) : BOOL;
    PROCEDURE WriteConsoleA* (hConsoleOutput : HANDLE; lpBuffer : LPVOID; nNumberOfCharsToWrite : DWORD; VAR [nil] lpNumberOfCharsWritten : DWORD; lpReserved : LPVOID) : BOOL;
    PROCEDURE WriteConsoleW* (hConsoleOutput : HANDLE; lpBuffer : LPVOID; nNumberOfCharsToWrite : DWORD; VAR [nil] lpNumberOfCharsWritten : DWORD; lpReserved : LPVOID) : BOOL;
    PROCEDURE CreateConsoleScreenBuffer* (dwDesiredAccess : DWORD; dwShareMode : DWORD; VAR [nil] lpSecurityAttributes : SECURITY_ATTRIBUTES; dwFlags : DWORD; lpScreenBufferData : LPVOID) : HANDLE;
    PROCEDURE GetConsoleCP* () : UINT;
    PROCEDURE SetConsoleCP* (wCodePageID : UINT) : BOOL;
    PROCEDURE GetConsoleOutputCP* () : UINT;
    PROCEDURE SetConsoleOutputCP* (wCodePageID : UINT) : BOOL;
    PROCEDURE VerFindFileA* (uFlags : DWORD; szFileName : LPSTR; szWinDir : LPSTR; szAppDir : LPSTR; szCurDir : LPSTR; VAR [nil] lpuCurDirLen : LONGINT; szDestDir : LPSTR; VAR [nil] lpuDestDirLen : LONGINT) : DWORD;
    PROCEDURE VerFindFileW* (uFlags : DWORD; szFileName : LPWSTR; szWinDir : LPWSTR; szAppDir : LPWSTR; szCurDir : LPWSTR; VAR [nil] lpuCurDirLen : LONGINT; szDestDir : LPWSTR; VAR [nil] lpuDestDirLen : LONGINT) : DWORD;
    PROCEDURE VerInstallFileA* (uFlags : DWORD; szSrcFileName : LPSTR; szDestFileName : LPSTR; szSrcDir : LPSTR; szDestDir : LPSTR; szCurDir : LPSTR; szTmpFile : LPSTR; VAR [nil] lpuTmpFileLen : LONGINT) : DWORD;
    PROCEDURE VerInstallFileW* (uFlags : DWORD; szSrcFileName : LPWSTR; szDestFileName : LPWSTR; szSrcDir : LPWSTR; szDestDir : LPWSTR; szCurDir : LPWSTR; szTmpFile : LPWSTR; VAR [nil] lpuTmpFileLen : LONGINT) : DWORD;
    PROCEDURE GetFileVersionInfoSizeA* (lptstrFilename : LPSTR; VAR [nil] lpdwHandle : DWORD) : DWORD;
    PROCEDURE GetFileVersionInfoSizeW* (lptstrFilename : LPWSTR; VAR [nil] lpdwHandle : DWORD) : DWORD;
    PROCEDURE GetFileVersionInfoA* (lptstrFilename : LPSTR; dwHandle : DWORD; dwLen : DWORD; lpData : LPVOID) : BOOL;
    PROCEDURE GetFileVersionInfoW* (lptstrFilename : LPWSTR; dwHandle : DWORD; dwLen : DWORD; lpData : LPVOID) : BOOL;
    PROCEDURE VerLanguageNameA* (wLang : DWORD; szLang : LPSTR; nSize : DWORD) : DWORD;
    PROCEDURE VerLanguageNameW* (wLang : DWORD; szLang : LPWSTR; nSize : DWORD) : DWORD;
    PROCEDURE VerQueryValueA* (pBlock : LPVOID; lpSubBlock : LPSTR; VAR [nil] lplpBuffer : LPVOID; VAR [nil] puLen : LONGINT) : BOOL;
    PROCEDURE VerQueryValueW* (pBlock : LPVOID; lpSubBlock : LPWSTR; VAR [nil] lplpBuffer : LPVOID; VAR [nil] puLen : LONGINT) : BOOL;
    PROCEDURE RegCloseKey* (hKey : HKEY) : LONG;
    PROCEDURE RegOverridePredefKey* (hKey : HKEY; hNewHKey : HKEY) : LONG;
    PROCEDURE RegConnectRegistryA* (lpMachineName : LPCSTR; hKey : HKEY; VAR [nil] phkResult : HKEY) : LONG;
    PROCEDURE RegConnectRegistryW* (lpMachineName : LPCWSTR; hKey : HKEY; VAR [nil] phkResult : HKEY) : LONG;
    PROCEDURE RegCreateKeyA* (hKey : HKEY; lpSubKey : LPCSTR; VAR [nil] phkResult : HKEY) : LONG;
    PROCEDURE RegCreateKeyW* (hKey : HKEY; lpSubKey : LPCWSTR; VAR [nil] phkResult : HKEY) : LONG;
    PROCEDURE RegCreateKeyExA* (hKey : HKEY; lpSubKey : LPCSTR; Reserved : DWORD; lpClass : LPSTR; dwOptions : DWORD; samDesired : REGSAM; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct; VAR [nil] phkResult : HKEY; VAR [nil] lpdwDisposition : DWORD) : LONG;
    PROCEDURE RegCreateKeyExW* (hKey : HKEY; lpSubKey : LPCWSTR; Reserved : DWORD; lpClass : LPWSTR; dwOptions : DWORD; samDesired : REGSAM; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct; VAR [nil] phkResult : HKEY; VAR [nil] lpdwDisposition : DWORD) : LONG;
    PROCEDURE RegDeleteKeyA* (hKey : HKEY; lpSubKey : LPCSTR) : LONG;
    PROCEDURE RegDeleteKeyW* (hKey : HKEY; lpSubKey : LPCWSTR) : LONG;
    PROCEDURE RegDeleteValueA* (hKey : HKEY; lpValueName : LPCSTR) : LONG;
    PROCEDURE RegDeleteValueW* (hKey : HKEY; lpValueName : LPCWSTR) : LONG;
    PROCEDURE RegEnumKeyA* (hKey : HKEY; dwIndex : DWORD; lpName : LPSTR; cbName : DWORD) : LONG;
    PROCEDURE RegEnumKeyW* (hKey : HKEY; dwIndex : DWORD; lpName : LPWSTR; cbName : DWORD) : LONG;
    PROCEDURE RegEnumKeyExA* (hKey : HKEY; dwIndex : DWORD; lpName : LPSTR; VAR [nil] lpcbName : DWORD; VAR [nil] lpReserved : DWORD; lpClass : LPSTR; VAR [nil] lpcbClass : DWORD; VAR [nil] lpftLastWriteTime : _FILETIME_struct) : LONG;
    PROCEDURE RegEnumKeyExW* (hKey : HKEY; dwIndex : DWORD; lpName : LPWSTR; VAR [nil] lpcbName : DWORD; VAR [nil] lpReserved : DWORD; lpClass : LPWSTR; VAR [nil] lpcbClass : DWORD; VAR [nil] lpftLastWriteTime : _FILETIME_struct) : LONG;
    PROCEDURE RegEnumValueA* (hKey : HKEY; dwIndex : DWORD; lpValueName : LPSTR; VAR [nil] lpcbValueName : DWORD; VAR [nil] lpReserved : DWORD; VAR [nil] lpType : DWORD; lpData : LPBYTE; VAR [nil] lpcbData : DWORD) : LONG;
    PROCEDURE RegEnumValueW* (hKey : HKEY; dwIndex : DWORD; lpValueName : LPWSTR; VAR [nil] lpcbValueName : DWORD; VAR [nil] lpReserved : DWORD; VAR [nil] lpType : DWORD; lpData : LPBYTE; VAR [nil] lpcbData : DWORD) : LONG;
    PROCEDURE RegFlushKey* (hKey : HKEY) : LONG;
    PROCEDURE RegGetKeySecurity* (hKey : HKEY; SecurityInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSECURITY_DESCRIPTOR; VAR [nil] lpcbSecurityDescriptor : DWORD) : LONG;
    PROCEDURE RegLoadKeyA* (hKey : HKEY; lpSubKey : LPCSTR; lpFile : LPCSTR) : LONG;
    PROCEDURE RegLoadKeyW* (hKey : HKEY; lpSubKey : LPCWSTR; lpFile : LPCWSTR) : LONG;
    PROCEDURE RegNotifyChangeKeyValue* (hKey : HKEY; bWatchSubtree : BOOL; dwNotifyFilter : DWORD; hEvent : HANDLE; fAsynchronus : BOOL) : LONG;
    PROCEDURE RegOpenKeyA* (hKey : HKEY; lpSubKey : LPCSTR; VAR [nil] phkResult : HKEY) : LONG;
    PROCEDURE RegOpenKeyW* (hKey : HKEY; lpSubKey : LPCWSTR; VAR [nil] phkResult : HKEY) : LONG;
    PROCEDURE RegOpenKeyExA* (hKey : HKEY; lpSubKey : LPCSTR; ulOptions : DWORD; samDesired : REGSAM; VAR [nil] phkResult : HKEY) : LONG;
    PROCEDURE RegOpenKeyExW* (hKey : HKEY; lpSubKey : LPCWSTR; ulOptions : DWORD; samDesired : REGSAM; VAR [nil] phkResult : HKEY) : LONG;
    PROCEDURE RegQueryInfoKeyA* (hKey : HKEY; lpClass : LPSTR; VAR [nil] lpcbClass : DWORD; VAR [nil] lpReserved : DWORD; VAR [nil] lpcSubKeys : DWORD; VAR [nil] lpcbMaxSubKeyLen : DWORD; VAR [nil] lpcbMaxClassLen : DWORD; VAR [nil] lpcValues : DWORD; VAR [nil] lpcbMaxValueNameLen : DWORD; VAR [nil] lpcbMaxValueLen : DWORD; VAR [nil] lpcbSecurityDescriptor : DWORD; VAR [nil] lpftLastWriteTime : _FILETIME_struct) : LONG;
    PROCEDURE RegQueryInfoKeyW* (hKey : HKEY; lpClass : LPWSTR; VAR [nil] lpcbClass : DWORD; VAR [nil] lpReserved : DWORD; VAR [nil] lpcSubKeys : DWORD; VAR [nil] lpcbMaxSubKeyLen : DWORD; VAR [nil] lpcbMaxClassLen : DWORD; VAR [nil] lpcValues : DWORD; VAR [nil] lpcbMaxValueNameLen : DWORD; VAR [nil] lpcbMaxValueLen : DWORD; VAR [nil] lpcbSecurityDescriptor : DWORD; VAR [nil] lpftLastWriteTime : _FILETIME_struct) : LONG;
    PROCEDURE RegQueryValueA* (hKey : HKEY; lpSubKey : LPCSTR; lpValue : LPSTR; VAR [nil] lpcbValue : LONG) : LONG;
    PROCEDURE RegQueryValueW* (hKey : HKEY; lpSubKey : LPCWSTR; lpValue : LPWSTR; VAR [nil] lpcbValue : LONG) : LONG;
    PROCEDURE RegQueryMultipleValuesA* (hKey : HKEY; VAR [nil] val_list : value_entA_struct; num_vals : DWORD; lpValueBuf : LPSTR; VAR [nil] ldwTotsize : DWORD) : LONG;
    PROCEDURE RegQueryMultipleValuesW* (hKey : HKEY; VAR [nil] val_list : value_entW_struct; num_vals : DWORD; lpValueBuf : LPWSTR; VAR [nil] ldwTotsize : DWORD) : LONG;
    PROCEDURE RegQueryValueExA* (hKey : HKEY; lpValueName : LPCSTR; VAR [nil] lpReserved : DWORD; VAR [nil] lpType : DWORD; lpData : LPBYTE; VAR [nil] lpcbData : DWORD) : LONG;
    PROCEDURE RegQueryValueExW* (hKey : HKEY; lpValueName : LPCWSTR; VAR [nil] lpReserved : DWORD; VAR [nil] lpType : DWORD; lpData : LPBYTE; VAR [nil] lpcbData : DWORD) : LONG;
    PROCEDURE RegReplaceKeyA* (hKey : HKEY; lpSubKey : LPCSTR; lpNewFile : LPCSTR; lpOldFile : LPCSTR) : LONG;
    PROCEDURE RegReplaceKeyW* (hKey : HKEY; lpSubKey : LPCWSTR; lpNewFile : LPCWSTR; lpOldFile : LPCWSTR) : LONG;
    PROCEDURE RegRestoreKeyA* (hKey : HKEY; lpFile : LPCSTR; dwFlags : DWORD) : LONG;
    PROCEDURE RegRestoreKeyW* (hKey : HKEY; lpFile : LPCWSTR; dwFlags : DWORD) : LONG;
    PROCEDURE RegSaveKeyA* (hKey : HKEY; lpFile : LPCSTR; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct) : LONG;
    PROCEDURE RegSaveKeyW* (hKey : HKEY; lpFile : LPCWSTR; VAR [nil] lpSecurityAttributes : _SECURITY_ATTRIBUTES_struct) : LONG;
    PROCEDURE RegSetKeySecurity* (hKey : HKEY; SecurityInformation : SECURITY_INFORMATION; pSecurityDescriptor : PSECURITY_DESCRIPTOR) : LONG;
    PROCEDURE RegSetValueA* (hKey : HKEY; lpSubKey : LPCSTR; dwType : DWORD; lpData : LPCSTR; cbData : DWORD) : LONG;
    PROCEDURE RegSetValueW* (hKey : HKEY; lpSubKey : LPCWSTR; dwType : DWORD; lpData : LPCWSTR; cbData : DWORD) : LONG;
    PROCEDURE RegSetValueExA* (hKey : HKEY; lpValueName : LPCSTR; Reserved : DWORD; dwType : DWORD; lpData : PBYTE; cbData : DWORD) : LONG;
    PROCEDURE RegSetValueExW* (hKey : HKEY; lpValueName : LPCWSTR; Reserved : DWORD; dwType : DWORD; lpData : PBYTE; cbData : DWORD) : LONG;
    PROCEDURE RegUnLoadKeyA* (hKey : HKEY; lpSubKey : LPCSTR) : LONG;
    PROCEDURE RegUnLoadKeyW* (hKey : HKEY; lpSubKey : LPCWSTR) : LONG;
    PROCEDURE InitiateSystemShutdownA* (lpMachineName : LPSTR; lpMessage : LPSTR; dwTimeout : DWORD; bForceAppsClosed : BOOL; bRebootAfterShutdown : BOOL) : BOOL;
    PROCEDURE InitiateSystemShutdownW* (lpMachineName : LPWSTR; lpMessage : LPWSTR; dwTimeout : DWORD; bForceAppsClosed : BOOL; bRebootAfterShutdown : BOOL) : BOOL;
    PROCEDURE AbortSystemShutdownA* (lpMachineName : LPSTR) : BOOL;
    PROCEDURE AbortSystemShutdownW* (lpMachineName : LPWSTR) : BOOL;
    PROCEDURE WNetAddConnectionA* (lpRemoteName : LPCSTR; lpPassword : LPCSTR; lpLocalName : LPCSTR) : DWORD;
    PROCEDURE WNetAddConnectionW* (lpRemoteName : LPCWSTR; lpPassword : LPCWSTR; lpLocalName : LPCWSTR) : DWORD;
    PROCEDURE WNetAddConnection2A* (VAR [nil] lpNetResource : _NETRESOURCEA_struct; lpPassword : LPCSTR; lpUserName : LPCSTR; dwFlags : DWORD) : DWORD;
    PROCEDURE WNetAddConnection2W* (VAR [nil] lpNetResource : _NETRESOURCEW_struct; lpPassword : LPCWSTR; lpUserName : LPCWSTR; dwFlags : DWORD) : DWORD;
    PROCEDURE WNetAddConnection3A* (hwndOwner : HWND; VAR [nil] lpNetResource : _NETRESOURCEA_struct; lpPassword : LPCSTR; lpUserName : LPCSTR; dwFlags : DWORD) : DWORD;
    PROCEDURE WNetAddConnection3W* (hwndOwner : HWND; VAR [nil] lpNetResource : _NETRESOURCEW_struct; lpPassword : LPCWSTR; lpUserName : LPCWSTR; dwFlags : DWORD) : DWORD;
    PROCEDURE WNetCancelConnectionA* (lpName : LPCSTR; fForce : BOOL) : DWORD;
    PROCEDURE WNetCancelConnectionW* (lpName : LPCWSTR; fForce : BOOL) : DWORD;
    PROCEDURE WNetCancelConnection2A* (lpName : LPCSTR; dwFlags : DWORD; fForce : BOOL) : DWORD;
    PROCEDURE WNetCancelConnection2W* (lpName : LPCWSTR; dwFlags : DWORD; fForce : BOOL) : DWORD;
    PROCEDURE WNetGetConnectionA* (lpLocalName : LPCSTR; lpRemoteName : LPSTR; VAR [nil] lpnLength : DWORD) : DWORD;
    PROCEDURE WNetGetConnectionW* (lpLocalName : LPCWSTR; lpRemoteName : LPWSTR; VAR [nil] lpnLength : DWORD) : DWORD;
    PROCEDURE WNetUseConnectionA* (hwndOwner : HWND; VAR [nil] lpNetResource : _NETRESOURCEA_struct; lpUserID : LPCSTR; lpPassword : LPCSTR; dwFlags : DWORD; lpAccessName : LPSTR; VAR [nil] lpBufferSize : DWORD; VAR [nil] lpResult : DWORD) : DWORD;
    PROCEDURE WNetUseConnectionW* (hwndOwner : HWND; VAR [nil] lpNetResource : _NETRESOURCEW_struct; lpUserID : LPCWSTR; lpPassword : LPCWSTR; dwFlags : DWORD; lpAccessName : LPWSTR; VAR [nil] lpBufferSize : DWORD; VAR [nil] lpResult : DWORD) : DWORD;
    PROCEDURE WNetConnectionDialog* (hwnd : HWND; dwType : DWORD) : DWORD;
    PROCEDURE WNetDisconnectDialog* (hwnd : HWND; dwType : DWORD) : DWORD;
    PROCEDURE WNetConnectionDialog1A* (VAR [nil] lpConnDlgStruct : _CONNECTDLGSTRUCTA_struct) : DWORD;
    PROCEDURE WNetConnectionDialog1W* (VAR [nil] lpConnDlgStruct : _CONNECTDLGSTRUCTW_struct) : DWORD;
    PROCEDURE WNetDisconnectDialog1A* (VAR [nil] lpConnDlgStruct : _DISCDLGSTRUCTA_struct) : DWORD;
    PROCEDURE WNetDisconnectDialog1W* (VAR [nil] lpConnDlgStruct : _DISCDLGSTRUCTW_struct) : DWORD;
    PROCEDURE WNetOpenEnumA* (dwScope : DWORD; dwType : DWORD; dwUsage : DWORD; VAR [nil] lpNetResource : _NETRESOURCEA_struct; VAR [nil] lphEnum : HANDLE) : DWORD;
    PROCEDURE WNetOpenEnumW* (dwScope : DWORD; dwType : DWORD; dwUsage : DWORD; VAR [nil] lpNetResource : _NETRESOURCEW_struct; VAR [nil] lphEnum : HANDLE) : DWORD;
    PROCEDURE WNetEnumResourceA* (hEnum : HANDLE; VAR [nil] lpcCount : DWORD; lpBuffer : LPVOID; VAR [nil] lpBufferSize : DWORD) : DWORD;
    PROCEDURE WNetEnumResourceW* (hEnum : HANDLE; VAR [nil] lpcCount : DWORD; lpBuffer : LPVOID; VAR [nil] lpBufferSize : DWORD) : DWORD;
    PROCEDURE WNetCloseEnum* (hEnum : HANDLE) : DWORD;
    PROCEDURE WNetGetUniversalNameA* (lpLocalPath : LPCSTR; dwInfoLevel : DWORD; lpBuffer : LPVOID; VAR [nil] lpBufferSize : DWORD) : DWORD;
    PROCEDURE WNetGetUniversalNameW* (lpLocalPath : LPCWSTR; dwInfoLevel : DWORD; lpBuffer : LPVOID; VAR [nil] lpBufferSize : DWORD) : DWORD;
    PROCEDURE WNetGetUserA* (lpName : LPCSTR; lpUserName : LPSTR; VAR [nil] lpnLength : DWORD) : DWORD;
    PROCEDURE WNetGetUserW* (lpName : LPCWSTR; lpUserName : LPWSTR; VAR [nil] lpnLength : DWORD) : DWORD;
    PROCEDURE WNetGetProviderNameA* (dwNetType : DWORD; lpProviderName : LPSTR; VAR [nil] lpBufferSize : DWORD) : DWORD;
    PROCEDURE WNetGetProviderNameW* (dwNetType : DWORD; lpProviderName : LPWSTR; VAR [nil] lpBufferSize : DWORD) : DWORD;
    PROCEDURE WNetGetNetworkInformationA* (lpProvider : LPCSTR; VAR [nil] lpNetInfoStruct : _NETINFOSTRUCT_struct) : DWORD;
    PROCEDURE WNetGetNetworkInformationW* (lpProvider : LPCWSTR; VAR [nil] lpNetInfoStruct : _NETINFOSTRUCT_struct) : DWORD;
    PROCEDURE WNetGetLastErrorA* (VAR [nil] lpError : DWORD; lpErrorBuf : LPSTR; nErrorBufSize : DWORD; lpNameBuf : LPSTR; nNameBufSize : DWORD) : DWORD;
    PROCEDURE WNetGetLastErrorW* (VAR [nil] lpError : DWORD; lpErrorBuf : LPWSTR; nErrorBufSize : DWORD; lpNameBuf : LPWSTR; nNameBufSize : DWORD) : DWORD;
    PROCEDURE MultinetGetConnectionPerformanceA* (VAR [nil] lpNetResource : _NETRESOURCEA_struct; VAR [nil] lpNetConnectInfoStruct : _NETCONNECTINFOSTRUCT_struct) : DWORD;
    PROCEDURE MultinetGetConnectionPerformanceW* (VAR [nil] lpNetResource : _NETRESOURCEW_struct; VAR [nil] lpNetConnectInfoStruct : _NETCONNECTINFOSTRUCT_struct) : DWORD;
    PROCEDURE ChangeServiceConfigA* (hService : SC_HANDLE; dwServiceType : DWORD; dwStartType : DWORD; dwErrorControl : DWORD; lpBinaryPathName : LPCSTR; lpLoadOrderGroup : LPCSTR; VAR [nil] lpdwTagId : DWORD; lpDependencies : LPCSTR; lpServiceStartName : LPCSTR; lpPassword : LPCSTR; lpDisplayName : LPCSTR) : BOOL;
    PROCEDURE ChangeServiceConfigW* (hService : SC_HANDLE; dwServiceType : DWORD; dwStartType : DWORD; dwErrorControl : DWORD; lpBinaryPathName : LPCWSTR; lpLoadOrderGroup : LPCWSTR; VAR [nil] lpdwTagId : DWORD; lpDependencies : LPCWSTR; lpServiceStartName : LPCWSTR; lpPassword : LPCWSTR; lpDisplayName : LPCWSTR) : BOOL;
    PROCEDURE ChangeServiceConfig2A* (hService : SC_HANDLE; dwInfoLevel : DWORD; lpInfo : LPVOID) : BOOL;
    PROCEDURE ChangeServiceConfig2W* (hService : SC_HANDLE; dwInfoLevel : DWORD; lpInfo : LPVOID) : BOOL;
    PROCEDURE CloseServiceHandle* (hSCObject : SC_HANDLE) : BOOL;
    PROCEDURE ControlService* (hService : SC_HANDLE; dwControl : DWORD; VAR [nil] lpServiceStatus : _SERVICE_STATUS_struct) : BOOL;
    PROCEDURE CreateServiceA* (hSCManager : SC_HANDLE; lpServiceName : LPCSTR; lpDisplayName : LPCSTR; dwDesiredAccess : DWORD; dwServiceType : DWORD; dwStartType : DWORD; dwErrorControl : DWORD; lpBinaryPathName : LPCSTR; lpLoadOrderGroup : LPCSTR; VAR [nil] lpdwTagId : DWORD; lpDependencies : LPCSTR; lpServiceStartName : LPCSTR; lpPassword : LPCSTR) : SC_HANDLE;
    PROCEDURE CreateServiceW* (hSCManager : SC_HANDLE; lpServiceName : LPCWSTR; lpDisplayName : LPCWSTR; dwDesiredAccess : DWORD; dwServiceType : DWORD; dwStartType : DWORD; dwErrorControl : DWORD; lpBinaryPathName : LPCWSTR; lpLoadOrderGroup : LPCWSTR; VAR [nil] lpdwTagId : DWORD; lpDependencies : LPCWSTR; lpServiceStartName : LPCWSTR; lpPassword : LPCWSTR) : SC_HANDLE;
    PROCEDURE DeleteService* (hService : SC_HANDLE) : BOOL;
    PROCEDURE EnumDependentServicesA* (hService : SC_HANDLE; dwServiceState : DWORD; VAR [nil] lpServices : _ENUM_SERVICE_STATUSA_struct; cbBufSize : DWORD; VAR [nil] pcbBytesNeeded : DWORD; VAR [nil] lpServicesReturned : DWORD) : BOOL;
    PROCEDURE EnumDependentServicesW* (hService : SC_HANDLE; dwServiceState : DWORD; VAR [nil] lpServices : _ENUM_SERVICE_STATUSW_struct; cbBufSize : DWORD; VAR [nil] pcbBytesNeeded : DWORD; VAR [nil] lpServicesReturned : DWORD) : BOOL;
    PROCEDURE EnumServicesStatusA* (hSCManager : SC_HANDLE; dwServiceType : DWORD; dwServiceState : DWORD; VAR [nil] lpServices : _ENUM_SERVICE_STATUSA_struct; cbBufSize : DWORD; VAR [nil] pcbBytesNeeded : DWORD; VAR [nil] lpServicesReturned : DWORD; VAR [nil] lpResumeHandle : DWORD) : BOOL;
    PROCEDURE EnumServicesStatusW* (hSCManager : SC_HANDLE; dwServiceType : DWORD; dwServiceState : DWORD; VAR [nil] lpServices : _ENUM_SERVICE_STATUSW_struct; cbBufSize : DWORD; VAR [nil] pcbBytesNeeded : DWORD; VAR [nil] lpServicesReturned : DWORD; VAR [nil] lpResumeHandle : DWORD) : BOOL;
    PROCEDURE GetServiceKeyNameA* (hSCManager : SC_HANDLE; lpDisplayName : LPCSTR; lpServiceName : LPSTR; VAR [nil] lpcchBuffer : DWORD) : BOOL;
    PROCEDURE GetServiceKeyNameW* (hSCManager : SC_HANDLE; lpDisplayName : LPCWSTR; lpServiceName : LPWSTR; VAR [nil] lpcchBuffer : DWORD) : BOOL;
    PROCEDURE GetServiceDisplayNameA* (hSCManager : SC_HANDLE; lpServiceName : LPCSTR; lpDisplayName : LPSTR; VAR [nil] lpcchBuffer : DWORD) : BOOL;
    PROCEDURE GetServiceDisplayNameW* (hSCManager : SC_HANDLE; lpServiceName : LPCWSTR; lpDisplayName : LPWSTR; VAR [nil] lpcchBuffer : DWORD) : BOOL;
    PROCEDURE LockServiceDatabase* (hSCManager : SC_HANDLE) : SC_LOCK;
    PROCEDURE NotifyBootConfigStatus* (BootAcceptable : BOOL) : BOOL;
    PROCEDURE OpenSCManagerA* (lpMachineName : LPCSTR; lpDatabaseName : LPCSTR; dwDesiredAccess : DWORD) : SC_HANDLE;
    PROCEDURE OpenSCManagerW* (lpMachineName : LPCWSTR; lpDatabaseName : LPCWSTR; dwDesiredAccess : DWORD) : SC_HANDLE;
    PROCEDURE OpenServiceA* (hSCManager : SC_HANDLE; lpServiceName : LPCSTR; dwDesiredAccess : DWORD) : SC_HANDLE;
    PROCEDURE OpenServiceW* (hSCManager : SC_HANDLE; lpServiceName : LPCWSTR; dwDesiredAccess : DWORD) : SC_HANDLE;
    PROCEDURE QueryServiceConfigA* (hService : SC_HANDLE; VAR [nil] lpServiceConfig : _QUERY_SERVICE_CONFIGA_struct; cbBufSize : DWORD; VAR [nil] pcbBytesNeeded : DWORD) : BOOL;
    PROCEDURE QueryServiceConfigW* (hService : SC_HANDLE; VAR [nil] lpServiceConfig : _QUERY_SERVICE_CONFIGW_struct; cbBufSize : DWORD; VAR [nil] pcbBytesNeeded : DWORD) : BOOL;
    PROCEDURE QueryServiceConfig2A* (hService : SC_HANDLE; dwInfoLevel : DWORD; lpBuffer : LPBYTE; cbBufSize : DWORD; VAR [nil] pcbBytesNeeded : DWORD) : BOOL;
    PROCEDURE QueryServiceConfig2W* (hService : SC_HANDLE; dwInfoLevel : DWORD; lpBuffer : LPBYTE; cbBufSize : DWORD; VAR [nil] pcbBytesNeeded : DWORD) : BOOL;
    PROCEDURE QueryServiceLockStatusA* (hSCManager : SC_HANDLE; VAR [nil] lpLockStatus : _QUERY_SERVICE_LOCK_STATUSA_struct; cbBufSize : DWORD; VAR [nil] pcbBytesNeeded : DWORD) : BOOL;
    PROCEDURE QueryServiceLockStatusW* (hSCManager : SC_HANDLE; VAR [nil] lpLockStatus : _QUERY_SERVICE_LOCK_STATUSW_struct; cbBufSize : DWORD; VAR [nil] pcbBytesNeeded : DWORD) : BOOL;
    PROCEDURE QueryServiceObjectSecurity* (hService : SC_HANDLE; dwSecurityInformation : SECURITY_INFORMATION; lpSecurityDescriptor : PSECURITY_DESCRIPTOR; cbBufSize : DWORD; VAR [nil] pcbBytesNeeded : DWORD) : BOOL;
    PROCEDURE QueryServiceStatus* (hService : SC_HANDLE; VAR [nil] lpServiceStatus : _SERVICE_STATUS_struct) : BOOL;
    PROCEDURE RegisterServiceCtrlHandlerA* (lpServiceName : LPCSTR; lpHandlerProc : LPHANDLER_FUNCTION) : SERVICE_STATUS_HANDLE;
    PROCEDURE RegisterServiceCtrlHandlerW* (lpServiceName : LPCWSTR; lpHandlerProc : LPHANDLER_FUNCTION) : SERVICE_STATUS_HANDLE;
    PROCEDURE SetServiceObjectSecurity* (hService : SC_HANDLE; dwSecurityInformation : SECURITY_INFORMATION; lpSecurityDescriptor : PSECURITY_DESCRIPTOR) : BOOL;
    PROCEDURE SetServiceStatus* (hServiceStatus : SERVICE_STATUS_HANDLE; VAR [nil] lpServiceStatus : _SERVICE_STATUS_struct) : BOOL;
    PROCEDURE StartServiceCtrlDispatcherA* (VAR [nil] lpServiceStartTable : SERVICE_TABLE_ENTRYA) : BOOL;
    PROCEDURE StartServiceCtrlDispatcherW* (VAR [nil] lpServiceStartTable : SERVICE_TABLE_ENTRYW) : BOOL;
    PROCEDURE StartServiceA* (hService : SC_HANDLE; dwNumServiceArgs : DWORD; VAR [nil] lpServiceArgVectors : LPCSTR) : BOOL;
    PROCEDURE StartServiceW* (hService : SC_HANDLE; dwNumServiceArgs : DWORD; VAR [nil] lpServiceArgVectors : LPCWSTR) : BOOL;
    PROCEDURE UnlockServiceDatabase* (ScLock : SC_LOCK) : BOOL;
    PROCEDURE ImmInstallIMEA* (lpszIMEFileName : LPCSTR; lpszLayoutText : LPCSTR) : HKL;
    PROCEDURE ImmInstallIMEW* (lpszIMEFileName : LPCWSTR; lpszLayoutText : LPCWSTR) : HKL;
    PROCEDURE ImmGetDefaultIMEWnd* (p0 : HWND) : HWND;
    PROCEDURE ImmGetDescriptionA* (p0 : HKL; p1 : LPSTR; uBufLen : UINT) : UINT;
    PROCEDURE ImmGetDescriptionW* (p0 : HKL; p1 : LPWSTR; uBufLen : UINT) : UINT;
    PROCEDURE ImmGetIMEFileNameA* (p0 : HKL; p1 : LPSTR; uBufLen : UINT) : UINT;
    PROCEDURE ImmGetIMEFileNameW* (p0 : HKL; p1 : LPWSTR; uBufLen : UINT) : UINT;
    PROCEDURE ImmGetProperty* (p0 : HKL; p1 : DWORD) : DWORD;
    PROCEDURE ImmIsIME* (p0 : HKL) : BOOL;
    PROCEDURE ImmSimulateHotKey* (p0 : HWND; p1 : DWORD) : BOOL;
    PROCEDURE ImmCreateContext* () : HIMC;
    PROCEDURE ImmDestroyContext* (p0 : HIMC) : BOOL;
    PROCEDURE ImmGetContext* (p0 : HWND) : HIMC;
    PROCEDURE ImmReleaseContext* (p0 : HWND; p1 : HIMC) : BOOL;
    PROCEDURE ImmAssociateContext* (p0 : HWND; p1 : HIMC) : HIMC;
    PROCEDURE ImmGetCompositionStringA* (p0 : HIMC; p1 : DWORD; p2 : LPVOID; p3 : DWORD) : LONG;
    PROCEDURE ImmGetCompositionStringW* (p0 : HIMC; p1 : DWORD; p2 : LPVOID; p3 : DWORD) : LONG;
    PROCEDURE ImmSetCompositionStringA* (p0 : HIMC; dwIndex : DWORD; lpComp : LPCVOID; p3 : DWORD; lpRead : LPCVOID; p5 : DWORD) : BOOL;
    PROCEDURE ImmSetCompositionStringW* (p0 : HIMC; dwIndex : DWORD; lpComp : LPCVOID; p3 : DWORD; lpRead : LPCVOID; p5 : DWORD) : BOOL;
    PROCEDURE ImmGetCandidateListCountA* (p0 : HIMC; VAR [nil] lpdwListCount : DWORD) : DWORD;
    PROCEDURE ImmGetCandidateListCountW* (p0 : HIMC; VAR [nil] lpdwListCount : DWORD) : DWORD;
    PROCEDURE ImmGetCandidateListA* (p0 : HIMC; deIndex : DWORD; VAR [nil] p2 : tagCANDIDATELIST_struct; dwBufLen : DWORD) : DWORD;
    PROCEDURE ImmGetCandidateListW* (p0 : HIMC; deIndex : DWORD; VAR [nil] p2 : tagCANDIDATELIST_struct; dwBufLen : DWORD) : DWORD;
    PROCEDURE ImmGetGuideLineA* (p0 : HIMC; dwIndex : DWORD; p2 : LPSTR; dwBufLen : DWORD) : DWORD;
    PROCEDURE ImmGetGuideLineW* (p0 : HIMC; dwIndex : DWORD; p2 : LPWSTR; dwBufLen : DWORD) : DWORD;
    PROCEDURE ImmGetConversionStatus* (p0 : HIMC; VAR [nil] p1 : DWORD; VAR [nil] p2 : DWORD) : BOOL;
    PROCEDURE ImmSetConversionStatus* (p0 : HIMC; p1 : DWORD; p2 : DWORD) : BOOL;
    PROCEDURE ImmGetOpenStatus* (p0 : HIMC) : BOOL;
    PROCEDURE ImmSetOpenStatus* (p0 : HIMC; p1 : BOOL) : BOOL;
    PROCEDURE ImmGetCompositionFontA* (p0 : HIMC; VAR [nil] p1 : tagLOGFONTA_struct) : BOOL;
    PROCEDURE ImmGetCompositionFontW* (p0 : HIMC; VAR [nil] p1 : tagLOGFONTW_struct) : BOOL;
    PROCEDURE ImmSetCompositionFontA* (p0 : HIMC; VAR [nil] p1 : tagLOGFONTA_struct) : BOOL;
    PROCEDURE ImmSetCompositionFontW* (p0 : HIMC; VAR [nil] p1 : tagLOGFONTW_struct) : BOOL;
    PROCEDURE ImmConfigureIMEA* (p0 : HKL; p1 : HWND; p2 : DWORD; p3 : LPVOID) : BOOL;
    PROCEDURE ImmConfigureIMEW* (p0 : HKL; p1 : HWND; p2 : DWORD; p3 : LPVOID) : BOOL;
    PROCEDURE ImmEscapeA* (p0 : HKL; p1 : HIMC; p2 : UINT; p3 : LPVOID) : LRESULT;
    PROCEDURE ImmEscapeW* (p0 : HKL; p1 : HIMC; p2 : UINT; p3 : LPVOID) : LRESULT;
    PROCEDURE ImmGetConversionListA* (p0 : HKL; p1 : HIMC; p2 : LPCSTR; VAR [nil] p3 : tagCANDIDATELIST_struct; dwBufLen : DWORD; uFlag : UINT) : DWORD;
    PROCEDURE ImmGetConversionListW* (p0 : HKL; p1 : HIMC; p2 : LPCWSTR; VAR [nil] p3 : tagCANDIDATELIST_struct; dwBufLen : DWORD; uFlag : UINT) : DWORD;
    PROCEDURE ImmNotifyIME* (p0 : HIMC; dwAction : DWORD; dwIndex : DWORD; dwValue : DWORD) : BOOL;
    PROCEDURE ImmGetStatusWindowPos* (p0 : HIMC; VAR [nil] p1 : tagPOINT_struct) : BOOL;
    PROCEDURE ImmSetStatusWindowPos* (p0 : HIMC; VAR [nil] p1 : tagPOINT_struct) : BOOL;
    PROCEDURE ImmGetCompositionWindow* (p0 : HIMC; VAR [nil] p1 : tagCOMPOSITIONFORM_struct) : BOOL;
    PROCEDURE ImmSetCompositionWindow* (p0 : HIMC; VAR [nil] p1 : tagCOMPOSITIONFORM_struct) : BOOL;
    PROCEDURE ImmGetCandidateWindow* (p0 : HIMC; p1 : DWORD; VAR [nil] p2 : tagCANDIDATEFORM_struct) : BOOL;
    PROCEDURE ImmSetCandidateWindow* (p0 : HIMC; VAR [nil] p1 : tagCANDIDATEFORM_struct) : BOOL;
    PROCEDURE ImmIsUIMessageA* (p0 : HWND; p1 : UINT; p2 : WPARAM; p3 : LPARAM) : BOOL;
    PROCEDURE ImmIsUIMessageW* (p0 : HWND; p1 : UINT; p2 : WPARAM; p3 : LPARAM) : BOOL;
    PROCEDURE ImmGetVirtualKey* (p0 : HWND) : UINT;
    PROCEDURE ImmRegisterWordA* (p0 : HKL; lpszReading : LPCSTR; p2 : DWORD; lpszRegister : LPCSTR) : BOOL;
    PROCEDURE ImmRegisterWordW* (p0 : HKL; lpszReading : LPCWSTR; p2 : DWORD; lpszRegister : LPCWSTR) : BOOL;
    PROCEDURE ImmUnregisterWordA* (p0 : HKL; lpszReading : LPCSTR; p2 : DWORD; lpszUnregister : LPCSTR) : BOOL;
    PROCEDURE ImmUnregisterWordW* (p0 : HKL; lpszReading : LPCWSTR; p2 : DWORD; lpszUnregister : LPCWSTR) : BOOL;
    PROCEDURE ImmGetRegisterWordStyleA* (p0 : HKL; nItem : UINT; VAR [nil] p2 : tagSTYLEBUFA_struct) : UINT;
    PROCEDURE ImmGetRegisterWordStyleW* (p0 : HKL; nItem : UINT; VAR [nil] p2 : tagSTYLEBUFW_struct) : UINT;
    PROCEDURE ImmEnumRegisterWordA* (p0 : HKL; p1 : REGISTERWORDENUMPROCA; lpszReading : LPCSTR; p3 : DWORD; lpszRegister : LPCSTR; p5 : LPVOID) : UINT;
    PROCEDURE ImmEnumRegisterWordW* (p0 : HKL; p1 : REGISTERWORDENUMPROCW; lpszReading : LPCWSTR; p3 : DWORD; lpszRegister : LPCWSTR; p5 : LPVOID) : UINT;
    PROCEDURE CloseDriver* (hDriver : HDRVR; lParam1 : LONG; lParam2 : LONG) : LRESULT;
    PROCEDURE OpenDriver* (szDriverName : LPCWSTR; szSectionName : LPCWSTR; lParam2 : LONG) : HDRVR;
    PROCEDURE SendDriverMessage* (hDriver : HDRVR; message : UINT; lParam1 : LONG; lParam2 : LONG) : LRESULT;
    PROCEDURE DrvGetModuleHandle* (hDriver : HDRVR) : HMODULE;
    PROCEDURE GetDriverModuleHandle* (hDriver : HDRVR) : HMODULE;
    PROCEDURE DefDriverProc* (dwDriverIdentifier : DWORD; hdrvr : HDRVR; uMsg : UINT; lParam1 : LPARAM; lParam2 : LPARAM) : LRESULT;
    PROCEDURE sndPlaySoundA* (pszSound : LPCSTR; fuSound : UINT) : BOOL;
    PROCEDURE sndPlaySoundW* (pszSound : LPCWSTR; fuSound : UINT) : BOOL;
    PROCEDURE PlaySoundA* (pszSound : LPCSTR; hmod : HMODULE; fdwSound : DWORD) : BOOL;
    PROCEDURE PlaySoundW* (pszSound : LPCWSTR; hmod : HMODULE; fdwSound : DWORD) : BOOL;
    PROCEDURE waveOutGetNumDevs* () : UINT;
    PROCEDURE waveOutGetDevCapsA* (uDeviceID : UINT; VAR [nil] pwoc : tagWAVEOUTCAPSA_struct; cbwoc : UINT) : MMRESULT;
    PROCEDURE waveOutGetDevCapsW* (uDeviceID : UINT; VAR [nil] pwoc : tagWAVEOUTCAPSW_struct; cbwoc : UINT) : MMRESULT;
    PROCEDURE waveOutGetVolume* (hwo : HWAVEOUT; VAR [nil] pdwVolume : DWORD) : MMRESULT;
    PROCEDURE waveOutSetVolume* (hwo : HWAVEOUT; dwVolume : DWORD) : MMRESULT;
    PROCEDURE waveOutGetErrorTextA* (mmrError : MMRESULT; pszText : LPSTR; cchText : UINT) : MMRESULT;
    PROCEDURE waveOutGetErrorTextW* (mmrError : MMRESULT; pszText : LPWSTR; cchText : UINT) : MMRESULT;
    PROCEDURE waveOutOpen* (VAR [nil] phwo : HWAVEOUT; uDeviceID : UINT; VAR [nil] pwfx : WAVEFORMATEX; dwCallback : DWORD; dwInstance : DWORD; fdwOpen : DWORD) : MMRESULT;
    PROCEDURE waveOutClose* (hwo : HWAVEOUT) : MMRESULT;
    PROCEDURE waveOutPrepareHeader* (hwo : HWAVEOUT; VAR [nil] pwh : wavehdr_tag_struct; cbwh : UINT) : MMRESULT;
    PROCEDURE waveOutUnprepareHeader* (hwo : HWAVEOUT; VAR [nil] pwh : wavehdr_tag_struct; cbwh : UINT) : MMRESULT;
    PROCEDURE waveOutWrite* (hwo : HWAVEOUT; VAR [nil] pwh : wavehdr_tag_struct; cbwh : UINT) : MMRESULT;
    PROCEDURE waveOutPause* (hwo : HWAVEOUT) : MMRESULT;
    PROCEDURE waveOutRestart* (hwo : HWAVEOUT) : MMRESULT;
    PROCEDURE waveOutReset* (hwo : HWAVEOUT) : MMRESULT;
    PROCEDURE waveOutBreakLoop* (hwo : HWAVEOUT) : MMRESULT;
    PROCEDURE waveOutGetPosition* (hwo : HWAVEOUT; VAR [nil] pmmt : mmtime_tag_struct; cbmmt : UINT) : MMRESULT;
    PROCEDURE waveOutGetPitch* (hwo : HWAVEOUT; VAR [nil] pdwPitch : DWORD) : MMRESULT;
    PROCEDURE waveOutSetPitch* (hwo : HWAVEOUT; dwPitch : DWORD) : MMRESULT;
    PROCEDURE waveOutGetPlaybackRate* (hwo : HWAVEOUT; VAR [nil] pdwRate : DWORD) : MMRESULT;
    PROCEDURE waveOutSetPlaybackRate* (hwo : HWAVEOUT; dwRate : DWORD) : MMRESULT;
    PROCEDURE waveOutGetID* (hwo : HWAVEOUT; VAR [nil] puDeviceID : UINT) : MMRESULT;
    PROCEDURE waveOutMessage* (hwo : HWAVEOUT; uMsg : UINT; dw1 : DWORD; dw2 : DWORD) : MMRESULT;
    PROCEDURE waveInGetNumDevs* () : UINT;
    PROCEDURE waveInGetDevCapsA* (uDeviceID : UINT; VAR [nil] pwic : tagWAVEINCAPSA_struct; cbwic : UINT) : MMRESULT;
    PROCEDURE waveInGetDevCapsW* (uDeviceID : UINT; VAR [nil] pwic : tagWAVEINCAPSW_struct; cbwic : UINT) : MMRESULT;
    PROCEDURE waveInGetErrorTextA* (mmrError : MMRESULT; pszText : LPSTR; cchText : UINT) : MMRESULT;
    PROCEDURE waveInGetErrorTextW* (mmrError : MMRESULT; pszText : LPWSTR; cchText : UINT) : MMRESULT;
    PROCEDURE waveInOpen* (VAR [nil] phwi : HWAVEIN; uDeviceID : UINT; VAR [nil] pwfx : WAVEFORMATEX; dwCallback : DWORD; dwInstance : DWORD; fdwOpen : DWORD) : MMRESULT;
    PROCEDURE waveInClose* (hwi : HWAVEIN) : MMRESULT;
    PROCEDURE waveInPrepareHeader* (hwi : HWAVEIN; VAR [nil] pwh : wavehdr_tag_struct; cbwh : UINT) : MMRESULT;
    PROCEDURE waveInUnprepareHeader* (hwi : HWAVEIN; VAR [nil] pwh : wavehdr_tag_struct; cbwh : UINT) : MMRESULT;
    PROCEDURE waveInAddBuffer* (hwi : HWAVEIN; VAR [nil] pwh : wavehdr_tag_struct; cbwh : UINT) : MMRESULT;
    PROCEDURE waveInStart* (hwi : HWAVEIN) : MMRESULT;
    PROCEDURE waveInStop* (hwi : HWAVEIN) : MMRESULT;
    PROCEDURE waveInReset* (hwi : HWAVEIN) : MMRESULT;
    PROCEDURE waveInGetPosition* (hwi : HWAVEIN; VAR [nil] pmmt : mmtime_tag_struct; cbmmt : UINT) : MMRESULT;
    PROCEDURE waveInGetID* (hwi : HWAVEIN; VAR [nil] puDeviceID : UINT) : MMRESULT;
    PROCEDURE waveInMessage* (hwi : HWAVEIN; uMsg : UINT; dw1 : DWORD; dw2 : DWORD) : MMRESULT;
    PROCEDURE midiOutGetNumDevs* () : UINT;
    PROCEDURE midiStreamOpen* (VAR [nil] phms : HMIDISTRM; VAR [nil] puDeviceID : UINT; cMidi : DWORD; dwCallback : DWORD; dwInstance : DWORD; fdwOpen : DWORD) : MMRESULT;
    PROCEDURE midiStreamClose* (hms : HMIDISTRM) : MMRESULT;
    PROCEDURE midiStreamProperty* (hms : HMIDISTRM; lppropdata : LPBYTE; dwProperty : DWORD) : MMRESULT;
    PROCEDURE midiStreamPosition* (hms : HMIDISTRM; VAR [nil] lpmmt : mmtime_tag_struct; cbmmt : UINT) : MMRESULT;
    PROCEDURE midiStreamOut* (hms : HMIDISTRM; VAR [nil] pmh : midihdr_tag_struct; cbmh : UINT) : MMRESULT;
    PROCEDURE midiStreamPause* (hms : HMIDISTRM) : MMRESULT;
    PROCEDURE midiStreamRestart* (hms : HMIDISTRM) : MMRESULT;
    PROCEDURE midiStreamStop* (hms : HMIDISTRM) : MMRESULT;
    PROCEDURE midiConnect* (hmi : HMIDI; hmo : HMIDIOUT; pReserved : LPVOID) : MMRESULT;
    PROCEDURE midiDisconnect* (hmi : HMIDI; hmo : HMIDIOUT; pReserved : LPVOID) : MMRESULT;
    PROCEDURE midiOutGetDevCapsA* (uDeviceID : UINT; VAR [nil] pmoc : tagMIDIOUTCAPSA_struct; cbmoc : UINT) : MMRESULT;
    PROCEDURE midiOutGetDevCapsW* (uDeviceID : UINT; VAR [nil] pmoc : tagMIDIOUTCAPSW_struct; cbmoc : UINT) : MMRESULT;
    PROCEDURE midiOutGetVolume* (hmo : HMIDIOUT; VAR [nil] pdwVolume : DWORD) : MMRESULT;
    PROCEDURE midiOutSetVolume* (hmo : HMIDIOUT; dwVolume : DWORD) : MMRESULT;
    PROCEDURE midiOutGetErrorTextA* (mmrError : MMRESULT; pszText : LPSTR; cchText : UINT) : MMRESULT;
    PROCEDURE midiOutGetErrorTextW* (mmrError : MMRESULT; pszText : LPWSTR; cchText : UINT) : MMRESULT;
    PROCEDURE midiOutOpen* (VAR [nil] phmo : HMIDIOUT; uDeviceID : UINT; dwCallback : DWORD; dwInstance : DWORD; fdwOpen : DWORD) : MMRESULT;
    PROCEDURE midiOutClose* (hmo : HMIDIOUT) : MMRESULT;
    PROCEDURE midiOutPrepareHeader* (hmo : HMIDIOUT; VAR [nil] pmh : midihdr_tag_struct; cbmh : UINT) : MMRESULT;
    PROCEDURE midiOutUnprepareHeader* (hmo : HMIDIOUT; VAR [nil] pmh : midihdr_tag_struct; cbmh : UINT) : MMRESULT;
    PROCEDURE midiOutShortMsg* (hmo : HMIDIOUT; dwMsg : DWORD) : MMRESULT;
    PROCEDURE midiOutLongMsg* (hmo : HMIDIOUT; VAR [nil] pmh : midihdr_tag_struct; cbmh : UINT) : MMRESULT;
    PROCEDURE midiOutReset* (hmo : HMIDIOUT) : MMRESULT;
    PROCEDURE midiOutCachePatches* (hmo : HMIDIOUT; uBank : UINT; VAR [nil] pwpa : WORD; fuCache : UINT) : MMRESULT;
    PROCEDURE midiOutCacheDrumPatches* (hmo : HMIDIOUT; uPatch : UINT; VAR [nil] pwkya : WORD; fuCache : UINT) : MMRESULT;
    PROCEDURE midiOutGetID* (hmo : HMIDIOUT; VAR [nil] puDeviceID : UINT) : MMRESULT;
    PROCEDURE midiOutMessage* (hmo : HMIDIOUT; uMsg : UINT; dw1 : DWORD; dw2 : DWORD) : MMRESULT;
    PROCEDURE midiInGetNumDevs* () : UINT;
    PROCEDURE midiInGetDevCapsA* (uDeviceID : UINT; VAR [nil] pmic : tagMIDIINCAPSA_struct; cbmic : UINT) : MMRESULT;
    PROCEDURE midiInGetDevCapsW* (uDeviceID : UINT; VAR [nil] pmic : tagMIDIINCAPSW_struct; cbmic : UINT) : MMRESULT;
    PROCEDURE midiInGetErrorTextA* (mmrError : MMRESULT; pszText : LPSTR; cchText : UINT) : MMRESULT;
    PROCEDURE midiInGetErrorTextW* (mmrError : MMRESULT; pszText : LPWSTR; cchText : UINT) : MMRESULT;
    PROCEDURE midiInOpen* (VAR [nil] phmi : HMIDIIN; uDeviceID : UINT; dwCallback : DWORD; dwInstance : DWORD; fdwOpen : DWORD) : MMRESULT;
    PROCEDURE midiInClose* (hmi : HMIDIIN) : MMRESULT;
    PROCEDURE midiInPrepareHeader* (hmi : HMIDIIN; VAR [nil] pmh : midihdr_tag_struct; cbmh : UINT) : MMRESULT;
    PROCEDURE midiInUnprepareHeader* (hmi : HMIDIIN; VAR [nil] pmh : midihdr_tag_struct; cbmh : UINT) : MMRESULT;
    PROCEDURE midiInAddBuffer* (hmi : HMIDIIN; VAR [nil] pmh : midihdr_tag_struct; cbmh : UINT) : MMRESULT;
    PROCEDURE midiInStart* (hmi : HMIDIIN) : MMRESULT;
    PROCEDURE midiInStop* (hmi : HMIDIIN) : MMRESULT;
    PROCEDURE midiInReset* (hmi : HMIDIIN) : MMRESULT;
    PROCEDURE midiInGetID* (hmi : HMIDIIN; VAR [nil] puDeviceID : UINT) : MMRESULT;
    PROCEDURE midiInMessage* (hmi : HMIDIIN; uMsg : UINT; dw1 : DWORD; dw2 : DWORD) : MMRESULT;
    PROCEDURE auxGetNumDevs* () : UINT;
    PROCEDURE auxGetDevCapsA* (uDeviceID : UINT; VAR [nil] pac : tagAUXCAPSA_struct; cbac : UINT) : MMRESULT;
    PROCEDURE auxGetDevCapsW* (uDeviceID : UINT; VAR [nil] pac : tagAUXCAPSW_struct; cbac : UINT) : MMRESULT;
    PROCEDURE auxSetVolume* (uDeviceID : UINT; dwVolume : DWORD) : MMRESULT;
    PROCEDURE auxGetVolume* (uDeviceID : UINT; VAR [nil] pdwVolume : DWORD) : MMRESULT;
    PROCEDURE auxOutMessage* (uDeviceID : UINT; uMsg : UINT; dw1 : DWORD; dw2 : DWORD) : MMRESULT;
    PROCEDURE mixerGetNumDevs* () : UINT;
    PROCEDURE mixerGetDevCapsA* (uMxId : UINT; VAR [nil] pmxcaps : tagMIXERCAPSA_struct; cbmxcaps : UINT) : MMRESULT;
    PROCEDURE mixerGetDevCapsW* (uMxId : UINT; VAR [nil] pmxcaps : tagMIXERCAPSW_struct; cbmxcaps : UINT) : MMRESULT;
    PROCEDURE mixerOpen* (VAR [nil] phmx : HMIXER; uMxId : UINT; dwCallback : DWORD; dwInstance : DWORD; fdwOpen : DWORD) : MMRESULT;
    PROCEDURE mixerClose* (hmx : HMIXER) : MMRESULT;
    PROCEDURE mixerMessage* (hmx : HMIXER; uMsg : UINT; dwParam1 : DWORD; dwParam2 : DWORD) : DWORD;
    PROCEDURE mixerGetLineInfoA* (hmxobj : HMIXEROBJ; VAR [nil] pmxl : tagMIXERLINEA_struct; fdwInfo : DWORD) : MMRESULT;
    PROCEDURE mixerGetLineInfoW* (hmxobj : HMIXEROBJ; VAR [nil] pmxl : tagMIXERLINEW_struct; fdwInfo : DWORD) : MMRESULT;
    PROCEDURE mixerGetID* (hmxobj : HMIXEROBJ; VAR [nil] puMxId : UINT; fdwId : DWORD) : MMRESULT;
    PROCEDURE mixerGetLineControlsA* (hmxobj : HMIXEROBJ; VAR [nil] pmxlc : tagMIXERLINECONTROLSA_struct; fdwControls : DWORD) : MMRESULT;
    PROCEDURE mixerGetLineControlsW* (hmxobj : HMIXEROBJ; VAR [nil] pmxlc : tagMIXERLINECONTROLSW_struct; fdwControls : DWORD) : MMRESULT;
    PROCEDURE mixerGetControlDetailsA* (hmxobj : HMIXEROBJ; VAR [nil] pmxcd : tMIXERCONTROLDETAILS_struct; fdwDetails : DWORD) : MMRESULT;
    PROCEDURE mixerGetControlDetailsW* (hmxobj : HMIXEROBJ; VAR [nil] pmxcd : tMIXERCONTROLDETAILS_struct; fdwDetails : DWORD) : MMRESULT;
    PROCEDURE mixerSetControlDetails* (hmxobj : HMIXEROBJ; VAR [nil] pmxcd : tMIXERCONTROLDETAILS_struct; fdwDetails : DWORD) : MMRESULT;
    PROCEDURE timeGetSystemTime* (VAR [nil] pmmt : mmtime_tag_struct; cbmmt : UINT) : MMRESULT;
    PROCEDURE timeGetTime* () : DWORD;
    PROCEDURE timeSetEvent* (uDelay : UINT; uResolution : UINT; fptc : LPTIMECALLBACK; dwUser : DWORD; fuEvent : UINT) : MMRESULT;
    PROCEDURE timeKillEvent* (uTimerID : UINT) : MMRESULT;
    PROCEDURE timeGetDevCaps* (VAR [nil] ptc : timecaps_tag_struct; cbtc : UINT) : MMRESULT;
    PROCEDURE timeBeginPeriod* (uPeriod : UINT) : MMRESULT;
    PROCEDURE timeEndPeriod* (uPeriod : UINT) : MMRESULT;
    PROCEDURE joyGetNumDevs* () : UINT;
    PROCEDURE joyGetDevCapsA* (uJoyID : UINT; VAR [nil] pjc : tagJOYCAPSA_struct; cbjc : UINT) : MMRESULT;
    PROCEDURE joyGetDevCapsW* (uJoyID : UINT; VAR [nil] pjc : tagJOYCAPSW_struct; cbjc : UINT) : MMRESULT;
    PROCEDURE joyGetPos* (uJoyID : UINT; VAR [nil] pji : joyinfo_tag_struct) : MMRESULT;
    PROCEDURE joyGetPosEx* (uJoyID : UINT; VAR [nil] pji : joyinfoex_tag_struct) : MMRESULT;
    PROCEDURE joyGetThreshold* (uJoyID : UINT; VAR [nil] puThreshold : UINT) : MMRESULT;
    PROCEDURE joyReleaseCapture* (uJoyID : UINT) : MMRESULT;
    PROCEDURE joySetCapture* (hwnd : HWND; uJoyID : UINT; uPeriod : UINT; fChanged : BOOL) : MMRESULT;
    PROCEDURE joySetThreshold* (uJoyID : UINT; uThreshold : UINT) : MMRESULT;
    PROCEDURE mmioStringToFOURCCA* (sz : LPCSTR; uFlags : UINT) : FOURCC;
    PROCEDURE mmioStringToFOURCCW* (sz : LPCWSTR; uFlags : UINT) : FOURCC;
    PROCEDURE mmioInstallIOProcA* (fccIOProc : FOURCC; pIOProc : LPMMIOPROC; dwFlags : DWORD) : LPMMIOPROC;
    PROCEDURE mmioInstallIOProcW* (fccIOProc : FOURCC; pIOProc : LPMMIOPROC; dwFlags : DWORD) : LPMMIOPROC;
    PROCEDURE mmioOpenA* (pszFileName : LPSTR; VAR [nil] pmmioinfo : _MMIOINFO_struct; fdwOpen : DWORD) : HMMIO;
    PROCEDURE mmioOpenW* (pszFileName : LPWSTR; VAR [nil] pmmioinfo : _MMIOINFO_struct; fdwOpen : DWORD) : HMMIO;
    PROCEDURE mmioRenameA* (pszFileName : LPCSTR; pszNewFileName : LPCSTR; VAR [nil] pmmioinfo : MMIOINFO; fdwRename : DWORD) : MMRESULT;
    PROCEDURE mmioRenameW* (pszFileName : LPCWSTR; pszNewFileName : LPCWSTR; VAR [nil] pmmioinfo : MMIOINFO; fdwRename : DWORD) : MMRESULT;
    PROCEDURE mmioClose* (hmmio : HMMIO; fuClose : UINT) : MMRESULT;
    PROCEDURE mmioRead* (hmmio : HMMIO; pch : HPSTR; cch : LONG) : LONG;
    PROCEDURE mmioWrite* (hmmio : HMMIO; pch : va_list; cch : LONG) : LONG;
    PROCEDURE mmioSeek* (hmmio : HMMIO; lOffset : LONG; iOrigin : LONGINT) : LONG;
    PROCEDURE mmioGetInfo* (hmmio : HMMIO; VAR [nil] pmmioinfo : _MMIOINFO_struct; fuInfo : UINT) : MMRESULT;
    PROCEDURE mmioSetInfo* (hmmio : HMMIO; VAR [nil] pmmioinfo : MMIOINFO; fuInfo : UINT) : MMRESULT;
    PROCEDURE mmioSetBuffer* (hmmio : HMMIO; pchBuffer : LPSTR; cchBuffer : LONG; fuBuffer : UINT) : MMRESULT;
    PROCEDURE mmioFlush* (hmmio : HMMIO; fuFlush : UINT) : MMRESULT;
    PROCEDURE mmioAdvance* (hmmio : HMMIO; VAR [nil] pmmioinfo : _MMIOINFO_struct; fuAdvance : UINT) : MMRESULT;
    PROCEDURE mmioSendMessage* (hmmio : HMMIO; uMsg : UINT; lParam1 : LPARAM; lParam2 : LPARAM) : LRESULT;
    PROCEDURE mmioDescend* (hmmio : HMMIO; VAR [nil] pmmcki : _MMCKINFO_struct; VAR [nil] pmmckiParent : MMCKINFO; fuDescend : UINT) : MMRESULT;
    PROCEDURE mmioAscend* (hmmio : HMMIO; VAR [nil] pmmcki : _MMCKINFO_struct; fuAscend : UINT) : MMRESULT;
    PROCEDURE mmioCreateChunk* (hmmio : HMMIO; VAR [nil] pmmcki : _MMCKINFO_struct; fuCreate : UINT) : MMRESULT;
    PROCEDURE mciSendCommandA* (mciId : MCIDEVICEID; uMsg : UINT; dwParam1 : DWORD; dwParam2 : DWORD) : MCIERROR;
    PROCEDURE mciSendCommandW* (mciId : MCIDEVICEID; uMsg : UINT; dwParam1 : DWORD; dwParam2 : DWORD) : MCIERROR;
    PROCEDURE mciSendStringA* (lpstrCommand : LPCSTR; lpstrReturnString : LPSTR; uReturnLength : UINT; hwndCallback : HWND) : MCIERROR;
    PROCEDURE mciSendStringW* (lpstrCommand : LPCWSTR; lpstrReturnString : LPWSTR; uReturnLength : UINT; hwndCallback : HWND) : MCIERROR;
    PROCEDURE mciGetDeviceIDA* (pszDevice : LPCSTR) : MCIDEVICEID;
    PROCEDURE mciGetDeviceIDW* (pszDevice : LPCWSTR) : MCIDEVICEID;
    PROCEDURE mciGetDeviceIDFromElementIDA* (dwElementID : DWORD; lpstrType : LPCSTR) : MCIDEVICEID;
    PROCEDURE mciGetDeviceIDFromElementIDW* (dwElementID : DWORD; lpstrType : LPCWSTR) : MCIDEVICEID;
    PROCEDURE mciGetErrorStringA* (mcierr : MCIERROR; pszText : LPSTR; cchText : UINT) : BOOL;
    PROCEDURE mciGetErrorStringW* (mcierr : MCIERROR; pszText : LPWSTR; cchText : UINT) : BOOL;
    PROCEDURE mciSetYieldProc* (mciId : MCIDEVICEID; fpYieldProc : YIELDPROC; dwYieldData : DWORD) : BOOL;
    PROCEDURE mciGetCreatorTask* (mciId : MCIDEVICEID) : HTASK;
    PROCEDURE mciGetYieldProc* (mciId : MCIDEVICEID; VAR [nil] pdwYieldData : DWORD) : YIELDPROC;

END Windows.
